{"repository_name":"private-parlor-xt","body":"# Private Parlor XT\n![GitHub Workflow Status (with event)](https://img.shields.io/github/actions/workflow/status/Private-Parlor/Private-Parlor-XT/deploy-nightly.yml?style=for-the-badge&label=Tests)\n![GitHub Workflow Status (with event)](https://img.shields.io/github/actions/workflow/status/Private-Parlor/Private-Parlor-XT/deploy-nightly.yml?style=for-the-badge&label=Linux%20Nightly)\n![GitHub Workflow Status (with event)](https://img.shields.io/github/actions/workflow/status/Private-Parlor/Private-Parlor-XT/deploy-tag.yml?style=for-the-badge&label=Linux%20Release)\n\n![GitHub top language](https://img.shields.io/github/languages/top/Private-Parlor/Private-Parlor-XT?style=for-the-badge&logo=crystal&labelColor=%23000000&color=%23000000)\n\nA featureful Telegram bot to make an anonymous, private group chat on Telegram. \n\nInspired by [secretlounge-ng](https://github.com/secretlounge/secretlounge-ng)\n\nUsing the [Tourmaline](https://github.com/protoncr/tourmaline) Telegram bot library.\n\n## Notable Features\n- Anonymously relay text, photos, albums, polls, videos and more to other people using the bot.\n- Restrict new users from sending media by configuring the media limit period.\n- Define new ranks via the configuration file with permissions to use various commands and media.\n- Make tripcodes harder to crack by adding a salt to the config file.\n- Add a spoiler to media before they're sent; or add a spoiler after the fact using the `/spoiler` command.\n- Pin and unpin messages to the chat.\n- Privately reveal your username to another user.\n- Print log messages to a Telegram channel\n- Kick users that have been inactive for a configurable period of time.\n- Send forwarded messages as photos, videos, animations, etc. to prevent rate limiting.\n- Have users automatically send every message with a tripcode using pseudonymous mode.\n- Store message history in the database to reduce RAM usage.\n- Localization in English, German, and Klingon.\n- Persist message history longer or less than 24 hours.\n- Prevent new users from joining by closing registration via the config file.\n- Upvote and Downvote messages.\n- Register commands with BotFather using the config file.\n- Enable or disable commands and relaying of certain types of messages using the config file.\n- Give users a level based on how much karma they have; user's can sign messages with their level using the `/ksign` command.\n- Reduce noise and enforce original messages using the Robot 9000 auto moderator.\n- *[And more!](https://github.com/Private-Parlor/Private-Parlor-XT/wiki/Features)*\n## Installation\nCompiling PrivateParlor XT requires having both `crystal` and `shards` installed.\n\n~~~\ngit clone https://github.com/Private-Parlor/Private-Parlor-XT.git\ncd private-parlor-xt\nshards install\nshards build --release\n~~~\nAlternatively, you can download the precompiled binaries from [Releases](https://github.com/Private-Parlor/Private-Parlor-XT/releases)\n\n## BotFather Setup\n1. Start a conversation with [BotFather](https://t.me/botfather)\n2. Make a new bot with `/newbot` and answer the prompts\n3. `/setprivacy`: enabled\n4. `/setjoingroups`: disabled\n\n## Usage\n\n1. Rename `config.yaml.copy` to `config.yaml`\n2. Edit config file\n  - The config file should at least contain the API Token received from Botfather and a path to a SQLite database\n  - Unless the database already exists, Private Parlor XT will create a new SQLite database at the given path\n3. Run the `private-parlor-xt` binary\n\n## Development\n\nDevelopment instructions are as follows:\n- Ensure code conforms to the [Crystal API coding style](https://crystal-lang.org/reference/1.9/conventions/coding_style.html)\n- Explicitly define return types and types for variables and parameters\n- Document your code\n- Write some specs for your code\n- Lint using Ameba; remove as many warnings as possible\n\n## Contributing\n\n1. Fork it (<https://github.com/Private-Parlor/private-parlor-xt/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Charybdis](https://github.com/Charibdys) - creator and maintainer\n","program":{"html_id":"private-parlor-xt/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"private-parlor-xt","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"private-parlor-xt/PrivateParlorXT","path":"PrivateParlorXT.html","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT","abstract":false,"locations":[{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L5"},{"filename":"src/private-parlor-xt/client.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/client.cr#L3"},{"filename":"src/private-parlor-xt/config/config.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L6"},{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L3"},{"filename":"src/private-parlor-xt/constants.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/constants.cr#L1"},{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L4"},{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L5"},{"filename":"src/private-parlor-xt/database/database.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L4"},{"filename":"src/private-parlor-xt/format.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L4"},{"filename":"src/private-parlor-xt/handler.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handler.cr#L3"},{"filename":"src/private-parlor-xt/handlers/callback_query_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/callback_query_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/callback_query_handlers/statistics_query_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/callback_query_handlers/statistics_query_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/delete_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/delete_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/demote_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/demote_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/help_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/help_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/info_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/info_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/karma_info_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/karma_info_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/karma_sign_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/karma_sign_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/motd_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/motd_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/pin_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/pin_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/privacy_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/privacy_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/promote_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/promote_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/purge_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/purge_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/ranksay_command.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/ranksay_command.cr#L5"},{"filename":"src/private-parlor-xt/handlers/command_handlers/remove_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/remove_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/reveal_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/reveal_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/sign_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/sign_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/spoiler_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/spoiler_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/start_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/start_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/statistics_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/statistics_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/stop_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/stop_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/toggle_debug_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/toggle_debug_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/toggle_karma_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/toggle_karma_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/tripcode_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/tripcode_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/tripcode_sign_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/tripcode_sign_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/unblacklist.command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/unblacklist.command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/uncooldown_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/uncooldown_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/unpin_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/unpin_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/users_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/users_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/version_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/version_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/warn_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/warn_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/command_handlers/whitelist_command.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/whitelist_command.cr#L4"},{"filename":"src/private-parlor-xt/handlers/hears_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr#L5"},{"filename":"src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr#L5"},{"filename":"src/private-parlor-xt/handlers/update_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/album_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/album_handler.cr#L7"},{"filename":"src/private-parlor-xt/handlers/update_handlers/animation_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/animation_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/audio_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/audio_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/contact_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/contact_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/document_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/document_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/forward_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/forward_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/location_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/location_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/photo_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/photo_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/poll_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/poll_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L5"},{"filename":"src/private-parlor-xt/handlers/update_handlers/sticker_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/sticker_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/text_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/text_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/venue_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/venue_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/video_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/video_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/video_note_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/video_note_handler.cr#L4"},{"filename":"src/private-parlor-xt/handlers/update_handlers/voice_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/voice_handler.cr#L4"},{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L4"},{"filename":"src/private-parlor-xt/history/history.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L3"},{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L5"},{"filename":"src/private-parlor-xt/initializers.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L7"},{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L3"},{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L3"},{"filename":"src/private-parlor-xt/locale/locale.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/locale.cr#L6"},{"filename":"src/private-parlor-xt/locale/localization.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/localization.cr#L7"},{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L3"},{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L3"},{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L5"},{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L1"},{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L1"},{"filename":"src/private-parlor-xt/ranks/rank.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/rank.cr#L5"},{"filename":"src/private-parlor-xt/relay/queue.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queue.cr#L3"},{"filename":"src/private-parlor-xt/relay/queued_message.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queued_message.cr#L4"},{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L5"},{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L3"},{"filename":"src/private-parlor-xt/robot9000/sqlite_r9k.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/sqlite_r9k.cr#L5"},{"filename":"src/private-parlor-xt/services.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L10"},{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":4,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L4"},{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L5"},{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L1"},{"filename":"src/private-parlor-xt/user.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L3"},{"filename":"src/private_parlor_xt.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private_parlor_xt.cr#L5"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.2.4\""}],"class_methods":[{"html_id":"command_disabled(message:Tourmaline::Message,services:Services):Nil-class-method","name":"command_disabled","doc":"Queues a command_disabled system reply when the `CommandHandler` was disabled","summary":"<p>Queues a command_disabled system reply when the <code><a href=\"PrivateParlorXT/CommandHandler.html\">CommandHandler</a></code> was disabled</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":275,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L275"},"def":{"name":"command_disabled","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if info = message.from\nelse\n  return\nend\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), info.id.to_i64, services.replies.command_disabled)\n"}},{"html_id":"generate_callback_query_handlers(config:Config,services:Services):Array(Tourmaline::CallbackQueryHandler)-class-method","name":"generate_callback_query_handlers","doc":"Initializes all `CallbackHandler`","summary":"<p>Initializes all <code><a href=\"PrivateParlorXT/CallbackHandler.html\">CallbackHandler</a></code></p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(config : Config, services : Services) : Array(Tourmaline::CallbackQueryHandler)","args_html":"(config : <a href=\"PrivateParlorXT/Config.html\">Config</a>, services : <a href=\"PrivateParlorXT/Services.html\">Services</a>) : Array(Tourmaline::CallbackQueryHandler)","location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":174,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L174"},"def":{"name":"generate_callback_query_handlers","args":[{"name":"config","external_name":"config","restriction":"Config"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Array(Tourmaline::CallbackQueryHandler)","visibility":"Public","body":"arr = [] of Tourmaline::CallbackQueryHandler\n{% if @type.has_constant?(\"StatisticsQueryHandler\") %}\n      return arr unless config.statistics\n\n      handler = StatisticsQueryHandler.new(config)\n\n      arr << Tourmaline::CallbackQueryHandler.new(/statistics-next/) do |ctx|\n        next unless query = ctx.callback_query\n        next unless message = ctx.message\n        next if message.date == 0 # Message is inaccessible\n\n        handler.do(query, services)\n      end\n    {% end %}\narr\n"}},{"html_id":"generate_command_handlers(config:Config,client:Tourmaline::Client,services:Services):Array(Tourmaline::CommandHandler)-class-method","name":"generate_command_handlers","doc":"Intialize all command handlers that inherit from `CommandHandler`\nand are annotated with `RespondsTo`","summary":"<p>Intialize all command handlers that inherit from <code><a href=\"PrivateParlorXT/CommandHandler.html\">CommandHandler</a></code> and are annotated with <code><a href=\"PrivateParlorXT/RespondsTo.html\">RespondsTo</a></code></p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"},{"name":"client","external_name":"client","restriction":"Tourmaline::Client"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(config : Config, client : Tourmaline::Client, services : Services) : Array(Tourmaline::CommandHandler)","args_html":"(config : <a href=\"PrivateParlorXT/Config.html\">Config</a>, client : Tourmaline::Client, services : <a href=\"PrivateParlorXT/Services.html\">Services</a>) : Array(Tourmaline::CommandHandler)","location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":107,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L107"},"def":{"name":"generate_command_handlers","args":[{"name":"config","external_name":"config","restriction":"Config"},{"name":"client","external_name":"client","restriction":"Tourmaline::Client"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Array(Tourmaline::CommandHandler)","visibility":"Public","body":"arr = [] of Tourmaline::CommandHandler\nbot_commands = [] of Tourmaline::BotCommand\ncreate_command_handlers\nclient.set_my_commands(bot_commands)\narr\n"}},{"html_id":"generate_hears_handlers(config:Config,services:Services):Array(Tourmaline::HearsHandler)-class-method","name":"generate_hears_handlers","doc":"Intialize all \"hears\" handlers that inherit from `HearsHandler`\nand are annotated with `Hears`","summary":"<p>Intialize all &quot;hears&quot; handlers that inherit from <code><a href=\"PrivateParlorXT/HearsHandler.html\">HearsHandler</a></code> and are annotated with <code><a href=\"PrivateParlorXT/Hears.html\">Hears</a></code></p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(config : Config, services : Services) : Array(Tourmaline::HearsHandler)","args_html":"(config : <a href=\"PrivateParlorXT/Config.html\">Config</a>, services : <a href=\"PrivateParlorXT/Services.html\">Services</a>) : Array(Tourmaline::HearsHandler)","location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":165,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L165"},"def":{"name":"generate_hears_handlers","args":[{"name":"config","external_name":"config","restriction":"Config"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Array(Tourmaline::HearsHandler)","visibility":"Public","body":"arr = [] of Tourmaline::HearsHandler\ncreate_hears_handlers\narr\n"}},{"html_id":"generate_update_handlers(config:Config,client:Client,services:Services):Nil-class-method","name":"generate_update_handlers","doc":"Intialize all update handlers that inherit from `UpdateHandler`\nand are annotated with `On`","summary":"<p>Intialize all update handlers that inherit from <code><a href=\"PrivateParlorXT/UpdateHandler.html\">UpdateHandler</a></code> and are annotated with <code><a href=\"PrivateParlorXT/On.html\">On</a></code></p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"},{"name":"client","external_name":"client","restriction":"Client"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(config : Config, client : Client, services : Services) : Nil","args_html":"(config : <a href=\"PrivateParlorXT/Config.html\">Config</a>, client : <a href=\"PrivateParlorXT/Client.html\">Client</a>, services : <a href=\"PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":255,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L255"},"def":{"name":"generate_update_handlers","args":[{"name":"config","external_name":"config","restriction":"Config"},{"name":"client","external_name":"client","restriction":"Client"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"create_update_handlers"}},{"html_id":"initialize_bot(client:Client|Nil=nil):Services-class-method","name":"initialize_bot","doc":"Reads from the config file and initialize `Services`, recurring tasks, and bot handlers\n\nReturns the initialized `Services` object","summary":"<p>Reads from the config file and initialize <code><a href=\"PrivateParlorXT/Services.html\">Services</a></code>, recurring tasks, and bot handlers</p>","abstract":false,"args":[{"name":"client","default_value":"nil","external_name":"client","restriction":"Client | ::Nil"}],"args_string":"(client : Client | Nil = nil) : Services","args_html":"(client : <a href=\"PrivateParlorXT/Client.html\">Client</a> | Nil = <span class=\"n\">nil</span>) : <a href=\"PrivateParlorXT/Services.html\">Services</a>","location":{"filename":"src/private_parlor_xt.cr","line_number":64,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private_parlor_xt.cr#L64"},"def":{"name":"initialize_bot","args":[{"name":"client","default_value":"nil","external_name":"client","restriction":"Client | ::Nil"}],"return_type":"Services","visibility":"Public","body":"config = Config.parse_config\nif client\nelse\n  client = Client.new(config.token)\nend\nclient.default_parse_mode = Tourmaline::ParseMode::MarkdownV2\nservices = Services.new(config, client)\nstart_tasks(config, services)\ninitialize_handlers(client, config, services)\nservices\n"}},{"html_id":"initialize_handlers(client:Tourmaline::Client,config:Config,services:Services):Nil-class-method","name":"initialize_handlers","doc":"Initialize bot handlers, such as `CommandHandler`, `HearsHandler`, `CallbackHandler`, and `UpdateHandler`","summary":"<p>Initialize bot handlers, such as <code><a href=\"PrivateParlorXT/CommandHandler.html\">CommandHandler</a></code>, <code><a href=\"PrivateParlorXT/HearsHandler.html\">HearsHandler</a></code>, <code><a href=\"PrivateParlorXT/CallbackHandler.html\">CallbackHandler</a></code>, and <code><a href=\"PrivateParlorXT/UpdateHandler.html\">UpdateHandler</a></code></p>","abstract":false,"args":[{"name":"client","external_name":"client","restriction":"Tourmaline::Client"},{"name":"config","external_name":"config","restriction":"Config"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(client : Tourmaline::Client, config : Config, services : Services) : Nil","args_html":"(client : Tourmaline::Client, config : <a href=\"PrivateParlorXT/Config.html\">Config</a>, services : <a href=\"PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L9"},"def":{"name":"initialize_handlers","args":[{"name":"client","external_name":"client","restriction":"Tourmaline::Client"},{"name":"config","external_name":"config","restriction":"Config"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"events = [] of Tourmaline::EventHandler\nevents = events.concat(generate_command_handlers(config, client, services))\nevents = events.concat(generate_hears_handlers(config, services))\nevents = events.concat(generate_callback_query_handlers(config, services))\nevents.each do |handler|\n  client.register(handler)\nend\ngenerate_update_handlers(config, client, services)\n"}},{"html_id":"kick_inactive_users(limit:Time::Span,services:Services):Nil-class-method","name":"kick_inactive_users","doc":"Force-leave users whose last active time is creater than the given `Time::Span` *limit*","summary":"<p>Force-leave users whose last active time is creater than the given <code>Time::Span</code> <em>limit</em></p>","abstract":false,"args":[{"name":"limit","external_name":"limit","restriction":"Time::Span"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(limit : Time::Span, services : Services) : Nil","args_html":"(limit : Time::Span, services : <a href=\"PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":292,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L292"},"def":{"name":"kick_inactive_users","args":[{"name":"limit","external_name":"limit","restriction":"Time::Span"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"(services.database.inactive_users(limit)).each do |user|\n  user.set_left\n  services.database.update_user(user)\n  services.relay.reject_inactive_user_messages(user.id)\n  log = Format.substitute_message(services.logs.left, {\"id\" => user.id.to_s, \"name\" => user.formatted_name})\n  response = Format.substitute_reply(services.replies.inactive, {\"time\" => limit.days.to_s})\n  services.relay.log_output(log)\n  services.relay.send_to_user(nil, user.id, response)\nend"}},{"html_id":"media_disabled(message:Tourmaline::Message,type:Tourmaline::UpdateAction,services:Services):Nil-class-method","name":"media_disabled","doc":"Queues a media_disabled system reply when the `UpdateHandler` was disabled","summary":"<p>Queues a media_disabled system reply when the <code><a href=\"PrivateParlorXT/UpdateHandler.html\">UpdateHandler</a></code> was disabled</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"type","external_name":"type","restriction":"Tourmaline::UpdateAction"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, type : Tourmaline::UpdateAction, services : Services) : Nil","args_html":"(message : <a href=\"Tourmaline/Message.html\">Tourmaline::Message</a>, type : Tourmaline::UpdateAction, services : <a href=\"PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":260,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L260"},"def":{"name":"media_disabled","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"type","external_name":"type","restriction":"Tourmaline::UpdateAction"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if info = message.from\nelse\n  return\nend\nresponse = Format.substitute_reply(services.replies.media_disabled, {\"type\" => type.to_s})\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), info.id.to_i64, response)\n"}},{"html_id":"start_tasks(config:Config,services:Services):Nil-class-method","name":"start_tasks","doc":"Initializes recurring tasks, such as:\n  - Warning expiration\n  - Message expiration (if toggled)\n  - Spam cooldown expiration (if toggled)\n  - Inactive user kicking (if toggled)","summary":"<p>Initializes recurring tasks, such as:   - Warning expiration   - Message expiration (if toggled)   - Spam cooldown expiration (if toggled)   - Inactive user kicking (if toggled)</p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(config : Config, services : Services) : Nil","args_html":"(config : <a href=\"PrivateParlorXT/Config.html\">Config</a>, services : <a href=\"PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private_parlor_xt.cr","line_number":87,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private_parlor_xt.cr#L87"},"def":{"name":"start_tasks","args":[{"name":"config","external_name":"config","restriction":"Config"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"Tasker.every(15.minutes) do\n  services.database.expire_warnings(config.warn_lifespan.hours)\nend\nif config.message_lifespan > 0\n  Tasker.every(config.message_lifespan.hours * (1 / 4)) do\n    services.history.expire\n  end\nend\nif spam = services.spam\n  Tasker.every(config.spam_interval.seconds) do\n    spam.expire\n  end\nend\nif config.inactivity_limit > 0\n  Tasker.every(6.hours) do\n    kick_inactive_users(config.inactivity_limit.days, services)\n  end\nend\n"}},{"html_id":"terminate_program(routine:Tasker::Task,services:Services):Nil-class-method","name":"terminate_program","doc":"Stop the message sending routine, send remaining messages in the queue\nand terminate the program","summary":"<p>Stop the message sending routine, send remaining messages in the queue and terminate the program</p>","abstract":false,"args":[{"name":"routine","external_name":"routine","restriction":"Tasker::Task"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(routine : Tasker::Task, services : Services) : Nil","args_html":"(routine : Tasker::Task, services : <a href=\"PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private_parlor_xt.cr","line_number":40,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private_parlor_xt.cr#L40"},"def":{"name":"terminate_program","args":[{"name":"routine","external_name":"routine","restriction":"Tasker::Task"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"services.relay.stop_polling\nroutine.cancel\nloop do\n  if services.relay.send_message(services)\n    break\n  end\nend\nbegin\n  services.database.close\nrescue\n  nil\nend\nLog.notice do\n  \"Sent last messages in queue. Shutting down...\"\nend\nexit\n"}},{"html_id":"valid_message(ctx:Tourmaline::Context):Tourmaline::Message|Nil-class-method","name":"valid_message","doc":"Checks if the given `Tourmaline::Context` contains a valid and accesible message\nIf so, returns the `Tourmaline::Message` contained in the handler context\nReturns `nil` otherwise","summary":"<p>Checks if the given <code>Tourmaline::Context</code> contains a valid and accesible message If so, returns the <code><a href=\"Tourmaline/Message.html\">Tourmaline::Message</a></code> contained in the handler context Returns <code>nil</code> otherwise</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Tourmaline::Context"}],"args_string":"(ctx : Tourmaline::Context) : Tourmaline::Message | Nil","args_html":"(ctx : Tourmaline::Context) : <a href=\"Tourmaline/Message.html\">Tourmaline::Message</a> | Nil","location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":284,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L284"},"def":{"name":"valid_message","args":[{"name":"ctx","external_name":"ctx","restriction":"Tourmaline::Context"}],"return_type":"Tourmaline::Message | ::Nil","visibility":"Public","body":"if message = ctx.message\nelse\n  return\nend\nif message.date == 0\n  return\nend\nmessage.as(Tourmaline::Message)\n"}}],"macros":[{"html_id":"append_command_handler(command,call)-macro","name":"append_command_handler","doc":"Appends given `CommandHandler` to `Tourmaline::CommandHandler` array\n\nThe given `CommandHandler` will respond to *command* value(s) of `RespondsTo`","summary":"<p>Appends given <code><a href=\"PrivateParlorXT/CommandHandler.html\">CommandHandler</a></code> to <code>Tourmaline::CommandHandler</code> array</p>","abstract":false,"args":[{"name":"command","external_name":"command","restriction":""},{"name":"call","external_name":"call","restriction":""}],"args_string":"(command, call)","args_html":"(command, call)","location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":75,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L75"},"def":{"name":"append_command_handler","args":[{"name":"command","external_name":"command","restriction":""},{"name":"call","external_name":"call","restriction":""}],"visibility":"Public","body":"    commands = [] of String\n\n    \n{% if call.is_a?(ArrayLiteral) %}\n      commands = commands + {{ call }}\n      {{ handler = (call[0] + \"_command\").id }} = {{ command }}.new(config)\n    {% else %}\n      commands << {{ call }}\n      {{ handler = (call + \"_command\").id }}  = {{ command }}.new(config)\n    {% end %}\n\n\n\n    \n{% if (@type.has_constant?(\"RanksayCommand\")) && (command.id == RanksayCommand.id) %}\n      commands = commands + services.access.ranksay_ranks.map do |rank|\n        rank = services.access.ranksay(rank)\n\n        \"#{rank}say\"\n      end\n    {% end %}\n\n\n    arr << Tourmaline::CommandHandler.new(commands) do |ctx|\n      next unless message = ctx.message\n      next if message.date == 0 \n# Message is inaccessible\n\n\n      message = message.as(Tourmaline::Message)\n\n      \n{{ handler }}\n.do(message, services)\n    \nend\n  \n"}},{"html_id":"append_hears_handler(hears_handler,hears)-macro","name":"append_hears_handler","doc":"Appends given `HearsHandler` to `Tourmaline::HearsHandler` array\n\nThe given `HearsHandler` will respond to the *pattern* value of `Hears`","summary":"<p>Appends given <code><a href=\"PrivateParlorXT/HearsHandler.html\">HearsHandler</a></code> to <code>Tourmaline::HearsHandler</code> array</p>","abstract":false,"args":[{"name":"hears_handler","external_name":"hears_handler","restriction":""},{"name":"hears","external_name":"hears","restriction":""}],"args_string":"(hears_handler, hears)","args_html":"(hears_handler, hears)","location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":149,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L149"},"def":{"name":"append_hears_handler","args":[{"name":"hears_handler","external_name":"hears_handler","restriction":""},{"name":"hears","external_name":"hears","restriction":""}],"visibility":"Public","body":"    \n# Handler name is command's name but snake cased\n\n    \n{{ handler = ((hears_handler.stringify.split(\"::\")).last.underscore).id }}\n  = \n{{ hears_handler }}\n.new(config)\n\n    arr << Tourmaline::HearsHandler.new(\n{{ hears[:pattern] }}\n) do |ctx|\n      next unless message = ctx.message\n      next if message.date == 0 \n# Message is inaccessible\n\n\n      message = message.as(Tourmaline::Message)\n\n      \n{{ handler }}\n.do(message, services)\n    \nend\n  \n"}},{"html_id":"create_command_handlers-macro","name":"create_command_handlers","doc":"Iterate through all `CommandHandler` subclasses and initialize `Tourmaline::CommandHandler` procs for these commands.\n\n`CommandDescriptions` for each `CommandHandler` will be registered by the bot if the the command is configurable.","summary":"<p>Iterate through all <code><a href=\"PrivateParlorXT/CommandHandler.html\">CommandHandler</a></code> subclasses and initialize <code>Tourmaline::CommandHandler</code> procs for these commands.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":30,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L30"},"def":{"name":"create_command_handlers","visibility":"Public","body":"    \n{% for command in CommandHandler.all_subclasses.select do |sub_class|\n  (responds_to = sub_class.annotation(RespondsTo))\nend %}\n\n      {% responds_to = command.annotation(RespondsTo) %}\n\n      {% if responds_to[:config].nil? %}\n        {{ warning(\"Command #{command} should have a configuration toggle and command description.\") }}\n        append_command_handler({{ command }}, {{ responds_to[:command] }})\n      {% else %}\n        if config.{{ responds_to[:config].id }}[0]\n          append_command_handler({{ command }}, {{ responds_to[:command] }})\n        else\n          arr << Tourmaline::CommandHandler.new({{ responds_to[:command] }}) do |ctx|\n            next unless message = valid_message(ctx)\n\n            # Check if message starts with a command\n            # Only send the reply if this is the case\n            command_entities = message.text_entities(\"bot_command\")\n            next unless command_entities.first[0].offset == 0\n\n            command_disabled(message, services)\n          end\n        end\n\n        if config.{{ responds_to[:config].id }}[1]\n          bot_commands << Tourmaline::BotCommand.new(\n            {% if responds_to[:command].is_a?(ArrayLiteral) %}\n              {{ responds_to[:command][0] }},\n              services.descriptions.{{ responds_to[:command][0].id }}\n            {% else %}\n              {{ responds_to[:command] }},\n              services.descriptions.{{ responds_to[:command].id }}\n            {% end %}\n          )\n        end\n      {% end %}\n\n    {% end %}\n\n  \n"}},{"html_id":"create_hears_handlers-macro","name":"create_hears_handlers","doc":"Iterate through all `HearsHandler` subclasses and initialize `Tourmaline::HearsHandler` procs for these handlers.","summary":"<p>Iterate through all <code><a href=\"PrivateParlorXT/HearsHandler.html\">HearsHandler</a></code> subclasses and initialize <code>Tourmaline::HearsHandler</code> procs for these handlers.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":119,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L119"},"def":{"name":"create_hears_handlers","visibility":"Public","body":"    \n{% for hears_handler in HearsHandler.all_subclasses.select do |sub_class|\n  (hears = sub_class.annotation(Hears))\nend %}\n\n      {{ hears = hears_handler.annotation(Hears) }}\n\n      {% if hears[:config].nil? %}\n        {{ warning(\"Hears handler #{hears_handler} should have a configuration toggle.\") }}\n        append_hears_handler({{ hears_handler }}, {{ hears }})\n      {% else %}\n        if config.{{ hears[:config].id }}[0]\n          append_hears_handler({{ hears_handler }}, {{ hears }})\n        else\n        {% if hears[:command] %}\n          arr << Tourmaline::HearsHandler.new({{ hears[:pattern] }}) do |ctx|\n            next unless message = valid_message(ctx)\n\n            command_disabled(message, services)\n          end\n        {% end %}\n        end\n      {% end %}\n\n    {% end %}\n\n  \n"}},{"html_id":"create_update_handlers-macro","name":"create_update_handlers","doc":"Iterate through all `UpdateHandler` subclasses and initialize `Tourmaline::UpdateHandler` procs for these handlers.","summary":"<p>Iterate through all <code><a href=\"PrivateParlorXT/UpdateHandler.html\">UpdateHandler</a></code> subclasses and initialize <code>Tourmaline::UpdateHandler</code> procs for these handlers.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":195,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L195"},"def":{"name":"create_update_handlers","visibility":"Public","body":"    \n{% for update in UpdateHandler.all_subclasses.select do |sub_class|\n  (on = sub_class.annotation(On))\nend %}\n\n      {{ update_on = update.annotation(On) }}\n\n      {% if update_on[:config].nil? %}\n        {{ warning(\"Update type #{update} should have a configuration toggle.\") }}\n        register_update_handler({{ update }}, {{ update_on[:update] }})\n      {% else %}\n        if config.{{ update_on[:config].id }}\n          register_update_handler({{ update }}, {{ update_on[:update] }})\n        else\n          client.on({{ update_on[:update] }}) do |ctx|\n            next unless message = ctx.message\n            next if message.date == 0 # Message is inaccessible\n\n            message = message.as(Tourmaline::Message)\n\n            {% if (@type.has_constant?(\"DocumentHandler\")) && (update.id == DocumentHandler.id) %}\n              next if message.animation\n            {% end %}\n            media_disabled(message, {{ update_on[:update] }}, services)\n          end\n        end\n      {% end %}\n\n    {% end %}\n\n  \n"}},{"html_id":"register_update_handler(update,on)-macro","name":"register_update_handler","doc":"Registers the given `UpdateHandler` with the bot\n\nThe given `UpdateHandler` will respond to messages of type *update* value of `On`","summary":"<p>Registers the given <code><a href=\"PrivateParlorXT/UpdateHandler.html\">UpdateHandler</a></code> with the bot</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":""},{"name":"on","external_name":"on","restriction":""}],"args_string":"(update, on)","args_html":"(update, on)","location":{"filename":"src/private-parlor-xt/initializers.cr","line_number":229,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/initializers.cr#L229"},"def":{"name":"register_update_handler","args":[{"name":"update","external_name":"update","restriction":""},{"name":"on","external_name":"on","restriction":""}],"visibility":"Public","body":"    \n{% if ((@type.has_constant?(\"ForwardHandler\")) && (@type.has_constant?(\"RegularForwardHandler\"))) && (update.id == ForwardHandler.id) %}\n      if config.regular_forwards\n        {{ handler = (on.id + \"_update\").id.downcase }} = RegularForwardHandler.new(config)\n      else\n        {{ handler = (on.id + \"_update\").id.downcase }} = ForwardHandler.new(config)\n      end\n    {% else %}\n      {{ handler = (on.id + \"_update\").id.downcase }}  = {{ update }}.new(config)\n    {% end %}\n\n\n    client.on(\n{{ on }}\n) do |ctx|\n      next unless message = ctx.message\n      next if message.date == 0 \n# Message is inaccessible\n\n\n      message = message.as(Tourmaline::Message)\n\n      \n{% if (@type.has_constant?(\"DocumentHandler\")) && (update.id == DocumentHandler.id) %}\n        next if message.animation\n      {% end %}\n\n      \n{{ handler }}\n.do(message, services)\n    \nend\n  \n"}}],"types":[{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumHandler","path":"PrivateParlorXT/AlbumHandler.html","kind":"class","full_name":"PrivateParlorXT::AlbumHandler","name":"AlbumHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumHelpers","kind":"module","full_name":"PrivateParlorXT::AlbumHelpers","name":"AlbumHelpers"},{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/album_handler.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/album_handler.cr#L10"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumHelpers","kind":"module","full_name":"PrivateParlorXT::AlbumHelpers","name":"AlbumHelpers"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for album message updates","summary":"<p>A handler for album message updates</p>","instance_methods":[{"html_id":"albums:Hash(String,Album)-instance-method","name":"albums","doc":"A hash of `String`, media group IDs, to `Album`, representing forwarded albums","summary":"<p>A hash of <code>String</code>, media group IDs, to <code><a href=\"../PrivateParlorXT/AlbumHelpers/Album.html\">Album</a></code>, representing forwarded albums</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/handlers/update_handlers/album_handler.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/album_handler.cr#L14"},"def":{"name":"albums","return_type":"Hash(String, Album)","visibility":"Public","body":"@albums"}},{"html_id":"albums=(albums:Hash(String,Album))-instance-method","name":"albums=","doc":"A hash of `String`, media group IDs, to `Album`, representing forwarded albums","summary":"<p>A hash of <code>String</code>, media group IDs, to <code><a href=\"../PrivateParlorXT/AlbumHelpers/Album.html\">Album</a></code>, representing forwarded albums</p>","abstract":false,"args":[{"name":"albums","external_name":"albums","restriction":"Hash(String, Album)"}],"args_string":"(albums : Hash(String, Album))","args_html":"(albums : Hash(String, <a href=\"../PrivateParlorXT/AlbumHelpers/Album.html\">Album</a>))","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/album_handler.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/album_handler.cr#L14"},"def":{"name":"albums=","args":[{"name":"albums","external_name":"albums","restriction":"Hash(String, Album)"}],"visibility":"Public","body":"@albums = albums"}},{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the album message meets requirements and relays it","summary":"<p>Checks if the album message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/album_handler.cr","line_number":17,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/album_handler.cr#L17"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif authorized?(user, message, :MediaGroup, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif album = message.media_group_id\nelse\n  return\nend\ncaption, entities = Format.text_and_entities(message, user, services)\nif caption\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nif unique?(user, message, services)\nelse\n  return\nend\nif input = album_input(message, caption, entities, services.config.allow_spoilers)\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Albums, services)\nuser = spend_karma(user, message, services)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nrelay_album(@albums, album, message.message_id.to_i64, input, user, receivers, reply_messages, services.config.allow_effects ? message.effect_id : nil, services)\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming albums\n\nReturns `true` if the user is spamming albums, `false` otherwise","summary":"<p>Checks if the user is spamming albums</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/album_handler.cr","line_number":64,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/album_handler.cr#L64"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif (album = message.media_group_id) && @albums[album]?\n  return false\nend\nif spam.spammy_album?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,message:Tourmaline::Message,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for an album","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for an album</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/album_handler.cr","line_number":111,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/album_handler.cr#L111"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_media_group >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nif (album = message.media_group_id) && @albums[album]?\n  return user\nend\nuser.decrement_karma(karma.karma_media_group)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send an album when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for albums is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send an album when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/album_handler.cr","line_number":86,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/album_handler.cr#L86"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_media_group >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif (album = message.media_group_id) && @albums[album]?\n  return true\nend\nif user.karma >= karma.karma_media_group\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_media_group.to_s, \"type\" => \"album\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumHelpers","path":"PrivateParlorXT/AlbumHelpers.html","kind":"module","full_name":"PrivateParlorXT::AlbumHelpers","name":"AlbumHelpers","abstract":false,"locations":[{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L6"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"WAIT_TIME","name":"WAIT_TIME","value":"500.milliseconds"}],"including_types":[{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumHandler","kind":"class","full_name":"PrivateParlorXT::AlbumHandler","name":"AlbumHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/RegularForwardHandler","kind":"class","full_name":"PrivateParlorXT::RegularForwardHandler","name":"RegularForwardHandler"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"instance_methods":[{"html_id":"album_input(message:Tourmaline::Message,caption:String,entities:Array(Tourmaline::MessageEntity),allow_spoilers:Bool|Nil=false):AlbumMedia|Nil-instance-method","name":"album_input","doc":"Returns the `Tourmaline::InputMedia` from the media in the given *message*, if available.\n\nReturns `nil` if there was no media in the *message* to create a `Tourmaline::InputMedia`","summary":"<p>Returns the <code>Tourmaline::InputMedia</code> from the media in the given <em>message</em>, if available.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"caption","external_name":"caption","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"allow_spoilers","default_value":"false","external_name":"allow_spoilers","restriction":"Bool | ::Nil"}],"args_string":"(message : Tourmaline::Message, caption : String, entities : Array(Tourmaline::MessageEntity), allow_spoilers : Bool | Nil = false) : AlbumMedia | Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, caption : String, entities : Array(Tourmaline::MessageEntity), allow_spoilers : Bool | Nil = <span class=\"n\">false</span>) : <a href=\"../PrivateParlorXT/AlbumMedia.html\">AlbumMedia</a> | Nil","location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":52,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L52"},"def":{"name":"album_input","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"caption","external_name":"caption","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"allow_spoilers","default_value":"false","external_name":"allow_spoilers","restriction":"Bool | ::Nil"}],"return_type":"AlbumMedia | ::Nil","visibility":"Public","body":"if media = message.photo.last?\n  Tourmaline::InputMediaPhoto.new(media.file_id, caption: caption, caption_entities: entities, parse_mode: nil, has_spoiler: message.has_media_spoiler? && allow_spoilers, show_caption_above_media: message.show_caption_above_media?)\nelse\n  if media = message.video\n    Tourmaline::InputMediaVideo.new(media.file_id, caption: caption, caption_entities: entities, parse_mode: nil, has_spoiler: message.has_media_spoiler? && allow_spoilers, show_caption_above_media: message.show_caption_above_media?)\n  else\n    if media = message.audio\n      Tourmaline::InputMediaAudio.new(media.file_id, caption: caption, caption_entities: entities, parse_mode: nil)\n    else\n      if media = message.document\n        Tourmaline::InputMediaDocument.new(media.file_id, caption: caption, caption_entities: entities, parse_mode: nil)\n      else\n        return\n      end\n    end\n  end\nend"}},{"html_id":"relay_album(albums:Hash(String,Album),album:String,message_id:MessageID,input:AlbumMedia,user:User,receivers:Array(UserID),reply_msids:Hash(UserID,ReplyParameters),effect:String|Nil,services:Services):Nil-instance-method","name":"relay_album","doc":"Relays the given *album* after an arbitrary amount of time, waiting for the rest of the media group updates to come in\n\nReturns early if the album is already queued for relaying, and adds the *input* to the Album object.","summary":"<p>Relays the given <em>album</em> after an arbitrary amount of time, waiting for the rest of the media group updates to come in</p>","abstract":false,"args":[{"name":"albums","external_name":"albums","restriction":"Hash(String, Album)"},{"name":"album","external_name":"album","restriction":"String"},{"name":"message_id","external_name":"message_id","restriction":"MessageID"},{"name":"input","external_name":"input","restriction":"AlbumMedia"},{"name":"user","external_name":"user","restriction":"User"},{"name":"receivers","external_name":"receivers","restriction":"Array(UserID)"},{"name":"reply_msids","external_name":"reply_msids","restriction":"Hash(UserID, ReplyParameters)"},{"name":"effect","external_name":"effect","restriction":"String | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(albums : Hash(String, Album), album : String, message_id : MessageID, input : AlbumMedia, user : User, receivers : Array(UserID), reply_msids : Hash(UserID, ReplyParameters), effect : String | Nil, services : Services) : Nil","args_html":"(albums : Hash(String, <a href=\"../PrivateParlorXT/AlbumHelpers/Album.html\">Album</a>), album : String, message_id : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, input : <a href=\"../PrivateParlorXT/AlbumMedia.html\">AlbumMedia</a>, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, receivers : Array(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>), reply_msids : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, <a href=\"../PrivateParlorXT/ReplyParameters.html\">ReplyParameters</a>), effect : String | Nil, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":69,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L69"},"def":{"name":"relay_album","args":[{"name":"albums","external_name":"albums","restriction":"Hash(String, Album)"},{"name":"album","external_name":"album","restriction":"String"},{"name":"message_id","external_name":"message_id","restriction":"MessageID"},{"name":"input","external_name":"input","restriction":"AlbumMedia"},{"name":"user","external_name":"user","restriction":"User"},{"name":"receivers","external_name":"receivers","restriction":"Array(UserID)"},{"name":"reply_msids","external_name":"reply_msids","restriction":"Hash(UserID, ReplyParameters)"},{"name":"effect","external_name":"effect","restriction":"String | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if albums[album]?\n  albums[album].message_ids << message_id\n  albums[album].media << input\n  return\nend\nmedia_group = Album.new(message_id, input)\nalbums.merge!({album => media_group})\nTasker.in(WAIT_TIME) do\n  if prepared_album = albums.delete(album)\n  else\n    next\n  end\n  if prepared_album.media.any? do |item|\n    (!item.is_a?(Tourmaline::InputMediaDocument | Tourmaline::InputMediaAudio)) && item.show_caption_above_media?\n  end\n    prepared_album.media.each do |item|\n      if item.is_a?(Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo)\n        item.show_caption_above_media = true\n      end\n    end\n  end\n  cached_messages = Array(MessageID).new\n  prepared_album.message_ids.each do |msid|\n    cached_messages << (services.history.new_message(user.id, msid))\n  end\n  services.relay.send_album(AlbumRelayParameters.new(origins: cached_messages, sender: user.id, receivers: receivers, replies: reply_msids, media: prepared_album.media, effect: effect))\nend\n"}}],"types":[{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumHelpers/Album","path":"PrivateParlorXT/AlbumHelpers/Album.html","kind":"class","full_name":"PrivateParlorXT::AlbumHelpers::Album","name":"Album","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":30,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L30"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumHelpers","kind":"module","full_name":"PrivateParlorXT::AlbumHelpers","name":"AlbumHelpers"},"doc":"An object representing a prepared media group to queue and relay","summary":"<p>An object representing a prepared media group to queue and relay</p>","constructors":[{"html_id":"new(message:MessageID,media:AlbumMedia)-class-method","name":"new","doc":"Creates and instance of `Album`\n\n## Arguments:\n\n`message`\n:     the `MessageID` of the first media file in the album\n\n`media`\n:     the media type corresponding with the given MSID","summary":"<p>Creates and instance of <code><a href=\"../../PrivateParlorXT/AlbumHelpers/Album.html\">Album</a></code></p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"media","external_name":"media","restriction":"AlbumMedia"}],"args_string":"(message : MessageID, media : AlbumMedia)","args_html":"(message : <a href=\"../../PrivateParlorXT/MessageID.html\">MessageID</a>, media : <a href=\"../../PrivateParlorXT/AlbumMedia.html\">AlbumMedia</a>)","location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":43,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L43"},"def":{"name":"new","args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"media","external_name":"media","restriction":"AlbumMedia"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message, media)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"media:Array(AlbumMedia)-instance-method","name":"media","abstract":false,"location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":32,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L32"},"def":{"name":"media","return_type":"Array(AlbumMedia)","visibility":"Public","body":"@media"}},{"html_id":"media=(media:Array(AlbumMedia))-instance-method","name":"media=","abstract":false,"args":[{"name":"media","external_name":"media","restriction":"Array(AlbumMedia)"}],"args_string":"(media : Array(AlbumMedia))","args_html":"(media : Array(<a href=\"../../PrivateParlorXT/AlbumMedia.html\">AlbumMedia</a>))","location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":32,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L32"},"def":{"name":"media=","args":[{"name":"media","external_name":"media","restriction":"Array(AlbumMedia)"}],"visibility":"Public","body":"@media = media"}},{"html_id":"message_ids:Array(MessageID)-instance-method","name":"message_ids","abstract":false,"location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":31,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L31"},"def":{"name":"message_ids","return_type":"Array(MessageID)","visibility":"Public","body":"@message_ids"}},{"html_id":"message_ids=(message_ids:Array(MessageID))-instance-method","name":"message_ids=","abstract":false,"args":[{"name":"message_ids","external_name":"message_ids","restriction":"Array(MessageID)"}],"args_string":"(message_ids : Array(MessageID))","args_html":"(message_ids : Array(<a href=\"../../PrivateParlorXT/MessageID.html\">MessageID</a>))","location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":31,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L31"},"def":{"name":"message_ids=","args":[{"name":"message_ids","external_name":"message_ids","restriction":"Array(MessageID)"}],"visibility":"Public","body":"@message_ids = message_ids"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumHelpers/AlbumRelayParameters","path":"PrivateParlorXT/AlbumHelpers/AlbumRelayParameters.html","kind":"class","full_name":"PrivateParlorXT::AlbumHelpers::AlbumRelayParameters","name":"AlbumRelayParameters","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L10"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumHelpers","kind":"module","full_name":"PrivateParlorXT::AlbumHelpers","name":"AlbumHelpers"},"doc":"A set of relay parameters associated with an album","summary":"<p>A set of relay parameters associated with an album</p>","constructors":[{"html_id":"new(origins:Array(MessageID),sender:UserID,receivers:Array(UserID),media:Array(AlbumMedia),replies:Hash(UserID,ReplyParameters)={}ofUserID=>ReplyParameters,effect:String|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"origins","external_name":"origins","restriction":"Array(MessageID)"},{"name":"sender","external_name":"sender","restriction":"UserID"},{"name":"receivers","external_name":"receivers","restriction":"Array(UserID)"},{"name":"media","external_name":"media","restriction":"Array(AlbumMedia)"},{"name":"replies","default_value":"{} of UserID => ReplyParameters","external_name":"replies","restriction":"Hash(UserID, ReplyParameters)"},{"name":"effect","default_value":"nil","external_name":"effect","restriction":"String | ::Nil"}],"args_string":"(origins : Array(MessageID), sender : UserID, receivers : Array(UserID), media : Array(AlbumMedia), replies : Hash(UserID, ReplyParameters) = {} of UserID => ReplyParameters, effect : String | Nil = nil)","args_html":"(origins : Array(<a href=\"../../PrivateParlorXT/MessageID.html\">MessageID</a>), sender : <a href=\"../../PrivateParlorXT/UserID.html\">UserID</a>, receivers : Array(<a href=\"../../PrivateParlorXT/UserID.html\">UserID</a>), media : Array(<a href=\"../../PrivateParlorXT/AlbumMedia.html\">AlbumMedia</a>), replies : Hash(<a href=\"../../PrivateParlorXT/UserID.html\">UserID</a>, <a href=\"../../PrivateParlorXT/ReplyParameters.html\">ReplyParameters</a>) = {} <span class=\"k\">of</span> <span class=\"t\">UserID</span> <span class=\"o\">=&gt;</span> <span class=\"t\">ReplyParameters</span>, effect : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":18,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L18"},"def":{"name":"new","args":[{"name":"origins","external_name":"origins","restriction":"Array(MessageID)"},{"name":"sender","external_name":"sender","restriction":"UserID"},{"name":"receivers","external_name":"receivers","restriction":"Array(UserID)"},{"name":"media","external_name":"media","restriction":"Array(AlbumMedia)"},{"name":"replies","default_value":"{} of UserID => ReplyParameters","external_name":"replies","restriction":"Hash(UserID, ReplyParameters)"},{"name":"effect","default_value":"nil","external_name":"effect","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(origins, sender, receivers, media, replies, effect)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"effect:String|Nil-instance-method","name":"effect","abstract":false,"location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L16"},"def":{"name":"effect","return_type":"String | ::Nil","visibility":"Public","body":"@effect"}},{"html_id":"media:Array(AlbumMedia)-instance-method","name":"media","abstract":false,"location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L14"},"def":{"name":"media","return_type":"Array(AlbumMedia)","visibility":"Public","body":"@media"}},{"html_id":"origins:Array(MessageID)-instance-method","name":"origins","abstract":false,"location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":11,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L11"},"def":{"name":"origins","return_type":"Array(MessageID)","visibility":"Public","body":"@origins"}},{"html_id":"receivers:Array(UserID)-instance-method","name":"receivers","abstract":false,"location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L13"},"def":{"name":"receivers","return_type":"Array(UserID)","visibility":"Public","body":"@receivers"}},{"html_id":"replies:Hash(UserID,ReplyParameters)-instance-method","name":"replies","abstract":false,"location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":15,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L15"},"def":{"name":"replies","return_type":"Hash(UserID, ReplyParameters)","visibility":"Public","body":"@replies"}},{"html_id":"sender:UserID-instance-method","name":"sender","abstract":false,"location":{"filename":"src/private-parlor-xt/album_helpers.cr","line_number":12,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/album_helpers.cr#L12"},"def":{"name":"sender","return_type":"UserID","visibility":"Public","body":"@sender"}}]}]},{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumMedia","path":"PrivateParlorXT/AlbumMedia.html","kind":"alias","full_name":"PrivateParlorXT::AlbumMedia","name":"AlbumMedia","abstract":false,"locations":[{"filename":"src/private-parlor-xt/constants.cr","line_number":12,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/constants.cr#L12"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":true,"aliased":"(Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument | Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo)","aliased_html":"Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument | Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo","const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"The possible types for one element in an album/media group","summary":"<p>The possible types for one element in an album/media group</p>"},{"html_id":"private-parlor-xt/PrivateParlorXT/AnimationHandler","path":"PrivateParlorXT/AnimationHandler.html","kind":"class","full_name":"PrivateParlorXT::AnimationHandler","name":"AnimationHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/animation_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/animation_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for animation message updates","summary":"<p>A handler for animation message updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the animation message meets requirements and relays it","summary":"<p>Checks if the animation message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/animation_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/animation_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif authorized?(user, message, :Animation, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif animation = message.animation\nelse\n  return\nend\ncaption, entities = Format.text_and_entities(message, user, services)\nif caption\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nif unique?(user, message, services)\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Animations, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_animation(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, replies: reply_messages, media: animation.file_id, text: caption, entities: entities, spoiler: services.config.allow_spoilers ? message.has_media_spoiler? : false, effect: services.config.allow_effects ? message.effect_id : nil, caption_above_media: message.show_caption_above_media?))\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming animations\n\nReturns `true` if the user is spamming animations, `false` otherwise","summary":"<p>Checks if the user is spamming animations</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/animation_handler.cr","line_number":59,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/animation_handler.cr#L59"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_animation?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for an animation","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for an animation</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/animation_handler.cr","line_number":102,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/animation_handler.cr#L102"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_animation >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_animation)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send an animation when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for animations is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send an animation when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/animation_handler.cr","line_number":79,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/animation_handler.cr#L79"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_animation >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_animation\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_animation.to_s, \"type\" => \"animation\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/AudioHandler","path":"PrivateParlorXT/AudioHandler.html","kind":"class","full_name":"PrivateParlorXT::AudioHandler","name":"AudioHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/audio_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/audio_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for audio message updates","summary":"<p>A handler for audio message updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the audio message meets requirements and relays it","summary":"<p>Checks if the audio message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/audio_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/audio_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif meets_requirements?(message)\nelse\n  return\nend\nif authorized?(user, message, :Audio, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif audio = message.audio\nelse\n  return\nend\ncaption, entities = Format.text_and_entities(message, user, services)\nif caption\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nif unique?(user, message, services)\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Audio, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_audio(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, replies: reply_messages, media: audio.file_id, text: caption, entities: entities, effect: services.config.allow_effects ? message.effect_id : nil))\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming audio messages\n\nReturns `true` if the user is spamming audio messages, `false` otherwise","summary":"<p>Checks if the user is spamming audio messages</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/audio_handler.cr","line_number":57,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/audio_handler.cr#L57"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_audio?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a audio message","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a audio message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/audio_handler.cr","line_number":100,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/audio_handler.cr#L100"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_audio >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_audio)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a audio message when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for audio messages is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a audio message when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/audio_handler.cr","line_number":77,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/audio_handler.cr#L77"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_audio >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_audio\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_audio.to_s, \"type\" => \"audio\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/AuthorizedRanks","path":"PrivateParlorXT/AuthorizedRanks.html","kind":"class","full_name":"PrivateParlorXT::AuthorizedRanks","name":"AuthorizedRanks","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for `Rank` and determines if a `Rank` has access to certain commands and message types","summary":"<p>A handler for <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> and determines if a <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> has access to certain commands and message types</p>","constructors":[{"html_id":"new(ranks:Hash(Int32,Rank))-class-method","name":"new","doc":"Creates an instance of `AuthorizedRanks`","summary":"<p>Creates an instance of <code><a href=\"../PrivateParlorXT/AuthorizedRanks.html\">AuthorizedRanks</a></code></p>","abstract":false,"args":[{"name":"ranks","external_name":"ranks","restriction":"Hash(Int32, Rank)"}],"args_string":"(ranks : Hash(Int32, Rank))","args_html":"(ranks : Hash(Int32, <a href=\"../PrivateParlorXT/Rank.html\">Rank</a>))","location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":12,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L12"},"def":{"name":"new","args":[{"name":"ranks","external_name":"ranks","restriction":"Hash(Int32, Rank)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(ranks)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"authorized?(user_rank:Int32,permission:CommandPermissions):Bool|Nil-instance-method","name":"authorized?","doc":"Returns `true` if user rank has the given command permission; user is authorized.\n\nReturns `false` otherwise, or `nil` if the user rank does not exist in `ranks`","summary":"<p>Returns <code>true</code> if user rank has the given command permission; user is authorized.</p>","abstract":false,"args":[{"name":"user_rank","external_name":"user_rank","restriction":"Int32"},{"name":"permission","external_name":"permission","restriction":"CommandPermissions"}],"args_string":"(user_rank : Int32, permission : CommandPermissions) : Bool | Nil","args_html":"(user_rank : Int32, permission : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":18,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L18"},"def":{"name":"authorized?","args":[{"name":"user_rank","external_name":"user_rank","restriction":"Int32"},{"name":"permission","external_name":"permission","restriction":"CommandPermissions"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if rank = @ranks[user_rank]?\n  rank.command_permissions.includes?(permission)\nend"}},{"html_id":"authorized?(user_rank:Int32,permission:MessagePermissions):Bool|Nil-instance-method","name":"authorized?","doc":"Returns `true` if user rank has the given message permission; user is authorized.\n\nReturns `false` otherwise, or `nil` if the user rank does not exist in `ranks`","summary":"<p>Returns <code>true</code> if user rank has the given message permission; user is authorized.</p>","abstract":false,"args":[{"name":"user_rank","external_name":"user_rank","restriction":"Int32"},{"name":"permission","external_name":"permission","restriction":"MessagePermissions"}],"args_string":"(user_rank : Int32, permission : MessagePermissions) : Bool | Nil","args_html":"(user_rank : Int32, permission : <a href=\"../PrivateParlorXT/MessagePermissions.html\">MessagePermissions</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":38,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L38"},"def":{"name":"authorized?","args":[{"name":"user_rank","external_name":"user_rank","restriction":"Int32"},{"name":"permission","external_name":"permission","restriction":"MessagePermissions"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if rank = @ranks[user_rank]?\n  rank.message_permissions.includes?(permission)\nend"}},{"html_id":"authorized?(user_rank:Int32,*permissions:CommandPermissions):CommandPermissions|Nil-instance-method","name":"authorized?","doc":"Returns the first symbol found from intersecting the user command permissions and the given permissions; user is authorized.\n\nReturns`nil` if the user rank does not exist in `ranks` or if the rank does not have any of the given permissions.\n\nUsed for checking groups of command permissions that are similar.","summary":"<p>Returns the first symbol found from intersecting the user command permissions and the given permissions; user is authorized.</p>","abstract":false,"args":[{"name":"user_rank","external_name":"user_rank","restriction":"Int32"},{"name":"permissions","external_name":"permissions","restriction":"CommandPermissions"}],"args_string":"(user_rank : Int32, *permissions : CommandPermissions) : CommandPermissions | Nil","args_html":"(user_rank : Int32, *permissions : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a>) : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a> | Nil","location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":29,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L29"},"def":{"name":"authorized?","args":[{"name":"user_rank","external_name":"user_rank","restriction":"Int32"},{"name":"permissions","external_name":"permissions","restriction":"CommandPermissions"}],"splat_index":1,"return_type":"CommandPermissions | ::Nil","visibility":"Public","body":"if rank = @ranks[user_rank]?\n  (rank.command_permissions & permissions.to_set).first?\nend"}},{"html_id":"can_demote?(rank:Int32,invoker:Int32,receiver:Int32):Bool-instance-method","name":"can_demote?","doc":"Returns `true` if the user to be demoted (receiver) can be demoted with the given rank.","summary":"<p>Returns <code>true</code> if the user to be demoted (receiver) can be demoted with the given rank.</p>","abstract":false,"args":[{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"invoker","external_name":"invoker","restriction":"Int32"},{"name":"receiver","external_name":"receiver","restriction":"Int32"}],"args_string":"(rank : Int32, invoker : Int32, receiver : Int32) : Bool","args_html":"(rank : Int32, invoker : Int32, receiver : Int32) : Bool","location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":107,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L107"},"def":{"name":"can_demote?","args":[{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"invoker","external_name":"invoker","restriction":"Int32"},{"name":"receiver","external_name":"receiver","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"(rank < receiver && receiver < invoker) && (rank != -10)"}},{"html_id":"can_promote?(rank:Int32,invoker:Int32,receiver:Int32,permission:CommandPermissions):Bool-instance-method","name":"can_promote?","doc":"Returns true if the user to be promoted (receiver) can be promoted with the given rank.","summary":"<p>Returns true if the user to be promoted (receiver) can be promoted with the given rank.</p>","abstract":false,"args":[{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"invoker","external_name":"invoker","restriction":"Int32"},{"name":"receiver","external_name":"receiver","restriction":"Int32"},{"name":"permission","external_name":"permission","restriction":"CommandPermissions"}],"args_string":"(rank : Int32, invoker : Int32, receiver : Int32, permission : CommandPermissions) : Bool","args_html":"(rank : Int32, invoker : Int32, receiver : Int32, permission : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a>) : Bool","location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":90,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L90"},"def":{"name":"can_promote?","args":[{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"invoker","external_name":"invoker","restriction":"Int32"},{"name":"receiver","external_name":"receiver","restriction":"Int32"},{"name":"permission","external_name":"permission","restriction":"CommandPermissions"}],"return_type":"Bool","visibility":"Public","body":"if (rank <= receiver || rank > invoker) || (receiver == -10)\n  return false\nend\nif rank <= invoker && (permission == CommandPermissions::Promote)\n  true\nelse\n  if rank < invoker && (permission == CommandPermissions::PromoteLower)\n    true\n  else\n    if (rank == invoker) && (permission == CommandPermissions::PromoteSame)\n      true\n    else\n      false\n    end\n  end\nend\n"}},{"html_id":"can_ranksay?(rank:Int32,invoker:Int32,invoker_permission:CommandPermissions,rank_permission:CommandPermissions|Nil=nil):Bool-instance-method","name":"can_ranksay?","doc":"Returns `true` if the user can sign a message with the given rank.","summary":"<p>Returns <code>true</code> if the user can sign a message with the given rank.</p>","abstract":false,"args":[{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"invoker","external_name":"invoker","restriction":"Int32"},{"name":"invoker_permission","external_name":"invoker_permission","restriction":"CommandPermissions"},{"name":"rank_permission","default_value":"nil","external_name":"rank_permission","restriction":"CommandPermissions | ::Nil"}],"args_string":"(rank : Int32, invoker : Int32, invoker_permission : CommandPermissions, rank_permission : CommandPermissions | Nil = nil) : Bool","args_html":"(rank : Int32, invoker : Int32, invoker_permission : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a>, rank_permission : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a> | Nil = <span class=\"n\">nil</span>) : Bool","location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":112,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L112"},"def":{"name":"can_ranksay?","args":[{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"invoker","external_name":"invoker","restriction":"Int32"},{"name":"invoker_permission","external_name":"invoker_permission","restriction":"CommandPermissions"},{"name":"rank_permission","default_value":"nil","external_name":"rank_permission","restriction":"CommandPermissions | ::Nil"}],"return_type":"Bool","visibility":"Public","body":"if (rank == -10) || rank_permission.nil?\n  return false\nend\n(rank < invoker && (invoker_permission == CommandPermissions::RanksayLower)) || (rank == invoker)\n"}},{"html_id":"find_rank(name:String,value:Int32|Nil=nil):Tuple(Int32,Rank)|Nil-instance-method","name":"find_rank","doc":"Finds a rank from a given rank value\nor iterates through the ranks hash for a rank with a given name\n\nReturns a 2-tuple with the rank value and the rank associated with that rank,\nor `nil` if no rank exists with the given values.","summary":"<p>Finds a rank from a given rank value or iterates through the ranks hash for a rank with a given name</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"value","default_value":"nil","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(name : String, value : Int32 | Nil = nil) : Tuple(Int32, Rank) | Nil","args_html":"(name : String, value : Int32 | Nil = <span class=\"n\">nil</span>) : Tuple(Int32, <a href=\"../PrivateParlorXT/Rank.html\">Rank</a>) | Nil","location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":79,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L79"},"def":{"name":"find_rank","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"value","default_value":"nil","external_name":"value","restriction":"Int32 | ::Nil"}],"return_type":"Tuple(Int32, Rank) | ::Nil","visibility":"Public","body":"if value && @ranks[value]?\n  {value, @ranks[value]}\nelse\n  @ranks.find do |k, v|\n    ((ranksay(v.name)) == name) || (k == value)\n  end\nend"}},{"html_id":"max_rank:Int32-instance-method","name":"max_rank","doc":"Returns the max rank value in the ranks hash","summary":"<p>Returns the max rank value in the ranks hash</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":45,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L45"},"def":{"name":"max_rank","return_type":"Int32","visibility":"Public","body":"@ranks.keys.max"}},{"html_id":"rank_name(rank_value:Int32):String|Nil-instance-method","name":"rank_name","doc":"Returns the rank name associated with the given value.","summary":"<p>Returns the rank name associated with the given value.</p>","abstract":false,"args":[{"name":"rank_value","external_name":"rank_value","restriction":"Int32"}],"args_string":"(rank_value : Int32) : String | Nil","args_html":"(rank_value : Int32) : String | Nil","location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":50,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L50"},"def":{"name":"rank_name","args":[{"name":"rank_value","external_name":"rank_value","restriction":"Int32"}],"return_type":"String | ::Nil","visibility":"Public","body":"if @ranks[rank_value]?\n  @ranks[rank_value].name\nend"}},{"html_id":"rank_names(limit:Int32):Array(String)-instance-method","name":"rank_names","doc":"Returns an array of all the rank names in the ranks hash, up to a rank value limit and excluding the blacklisted (-10) rank","summary":"<p>Returns an array of all the rank names in the ranks hash, up to a rank value limit and excluding the blacklisted (-10) rank</p>","abstract":false,"args":[{"name":"limit","external_name":"limit","restriction":"Int32"}],"args_string":"(limit : Int32) : Array(String)","args_html":"(limit : Int32) : Array(String)","location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":126,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L126"},"def":{"name":"rank_names","args":[{"name":"limit","external_name":"limit","restriction":"Int32"}],"return_type":"Array(String)","visibility":"Public","body":"@ranks.compact_map do |k, v|\n  if k <= limit && (k != -10)\n    v.name\n  end\nend"}},{"html_id":"rank_names:Array(String)-instance-method","name":"rank_names","doc":"Returns an array of all the rank names in the ranks hash.","summary":"<p>Returns an array of all the rank names in the ranks hash.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":119,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L119"},"def":{"name":"rank_names","return_type":"Array(String)","visibility":"Public","body":"@ranks.compact_map do |_, v|\n  v.name\nend"}},{"html_id":"ranks:Hash(Int32,Rank)-instance-method","name":"ranks","doc":"A hash of `Int32` to `Rank`, where each value represents a `Rank`","summary":"<p>A hash of <code>Int32</code> to <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code>, where each value represents a <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L9"},"def":{"name":"ranks","return_type":"Hash(Int32, Rank)","visibility":"Public","body":"@ranks"}},{"html_id":"ranksay(rank:String):String-instance-method","name":"ranksay","doc":"Converts the given *rank* string into a string that can be used for a `RanksayCommand`, preceding the '-say' substring","summary":"<p>Converts the given <em>rank</em> string into a string that can be used for a <code><a href=\"../PrivateParlorXT/RanksayCommand.html\">RanksayCommand</a></code>, preceding the '-say' substring</p>","abstract":false,"args":[{"name":"rank","external_name":"rank","restriction":"String"}],"args_string":"(rank : String) : String","args_html":"(rank : String) : String","location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":133,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L133"},"def":{"name":"ranksay","args":[{"name":"rank","external_name":"rank","restriction":"String"}],"return_type":"String","visibility":"Public","body":"rank = rank.gsub(\"_\", \" \")\nrank = rank.gsub(/[[:punct:]]|[^[:ascii:]]/, \"\")\nrank = rank.gsub(/\\s{1,}/, \"_\")\nrank.downcase\n"}},{"html_id":"ranksay_ranks:Array(String)-instance-method","name":"ranksay_ranks","doc":"Return an array of rank names that have a `CommandPermissions::Ranksay` or `CommandPermissions::RanksayLower` permission","summary":"<p>Return an array of rank names that have a <code><a href=\"../PrivateParlorXT/CommandPermissions.html#Ranksay\">CommandPermissions::Ranksay</a></code> or <code><a href=\"../PrivateParlorXT/CommandPermissions.html#RanksayLower\">CommandPermissions::RanksayLower</a></code> permission</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/authorized_ranks.cr","line_number":57,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/authorized_ranks.cr#L57"},"def":{"name":"ranksay_ranks","return_type":"Array(String)","visibility":"Public","body":"names = [] of String\nranksay_permissions = Set {CommandPermissions::Ranksay, CommandPermissions::RanksayLower}\n@ranks.each do |_, rank|\n  if ranksay_permissions.intersects?(rank.command_permissions)\n    names << rank.name\n  end\nend\nnames\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/BlacklistCommand","path":"PrivateParlorXT/BlacklistCommand.html","kind":"class","full_name":"PrivateParlorXT::BlacklistCommand","name":"BlacklistCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to blacklist a user by args or by replying to a message","summary":"<p>A command used to blacklist a user by args or by replying to a message</p>","instance_methods":[{"html_id":"blacklist_from_args(args:Array(String),user:User,message:MessageID,services:Services):Nil-instance-method","name":"blacklist_from_args","doc":"Blacklists a user described in *args* from the chat if the user exists","summary":"<p>Blacklists a user described in <em>args</em> from the chat if the user exists</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":"Array(String)"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(args : Array(String), user : User, message : MessageID, services : Services) : Nil","args_html":"(args : Array(String), user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr","line_number":47,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr#L47"},"def":{"name":"blacklist_from_args","args":[{"name":"args","external_name":"args","restriction":"Array(String)"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if blacklisted_user = services.database.get_user_by_arg(args[0])\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.no_user_found)\nend\nif blacklist_user(blacklisted_user, user, message, args[1]?, services)\nelse\n  return\nend\nsend_messages(args[1]?, blacklisted_user, user, nil, message, services)\n"}},{"html_id":"blacklist_from_reply(reason:String|Nil,user:User,message:MessageID,reply:Tourmaline::Message,services:Services):Nil-instance-method","name":"blacklist_from_reply","doc":"Blacklists the sender of *reply* if the message still exists in the cache","summary":"<p>Blacklists the sender of <em>reply</em> if the message still exists in the cache</p>","abstract":false,"args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(reason : String | Nil, user : User, message : MessageID, reply : Tourmaline::Message, services : Services) : Nil","args_html":"(reason : String | Nil, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, reply : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr","line_number":27,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr#L27"},"def":{"name":"blacklist_from_reply","args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if reply_user = reply_user(user, reply, services)\nelse\n  return\nend\nif blacklist_user(reply_user, user, message, reason, services)\nelse\n  return\nend\noriginal_message = delete_messages(reply.message_id.to_i64, reply_user.id, reply_user.debug_enabled, services)\nif original_message\n  original_message = ReplyParameters.new(original_message)\nend\nsend_messages(reason, reply_user, user, original_message, message, services)\n"}},{"html_id":"blacklist_user(blacklisted_user:User,invoker:User,message:MessageID,reason:String|Nil,services:Services):Bool|Nil-instance-method","name":"blacklist_user","doc":"Blacklists the *blacklisted_user* and removes all messages sent by and addressed to him if his rank does not equal to or exceed *invoker's* rank","summary":"<p>Blacklists the <em>blacklisted_user</em> and removes all messages sent by and addressed to him if his rank does not equal to or exceed <em>invoker's</em> rank</p>","abstract":false,"args":[{"name":"blacklisted_user","external_name":"blacklisted_user","restriction":"User"},{"name":"invoker","external_name":"invoker","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(blacklisted_user : User, invoker : User, message : MessageID, reason : String | Nil, services : Services) : Bool | Nil","args_html":"(blacklisted_user : <a href=\"../PrivateParlorXT/User.html\">User</a>, invoker : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, reason : String | Nil, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr","line_number":58,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr#L58"},"def":{"name":"blacklist_user","args":[{"name":"blacklisted_user","external_name":"blacklisted_user","restriction":"User"},{"name":"invoker","external_name":"invoker","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if blacklisted_user.rank < invoker.rank\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), invoker.id, services.replies.fail)\nend\nupdate_user_activity(invoker, services)\nblacklisted_user.blacklist(reason)\nservices.database.update_user(blacklisted_user)\nservices.relay.reject_blacklisted_messages(blacklisted_user.id)\ntrue\n"}},{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Blacklists the user described in the *message* text or blacklists the sender of the message it replies to, if *message* meets requirements","summary":"<p>Blacklists the user described in the <em>message</em> text or blacklists the sender of the message it replies to, if <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Blacklist, services)\nelse\n  return\nend\nif reply = message.reply_to_message\n  arg = Format.get_arg(message.text)\n  blacklist_from_reply(arg, user, message.message_id.to_i64, reply, services)\nelse\n  if (args = Format.get_args(message.text, count: 2)) && args.size > 0\n  else\n    return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.missing_args)\n  end\n  blacklist_from_args(args, user, message.message_id.to_i64, services)\nend\n"}},{"html_id":"send_messages(reason:String|Nil,blacklisted_user:User,invoker:User,deleted_message:ReplyParameters|Nil,invoker_message:MessageID,services:Services):Nil-instance-method","name":"send_messages","doc":"Queues success and blacklisted responses","summary":"<p>Queues success and blacklisted responses</p>","abstract":false,"args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"blacklisted_user","external_name":"blacklisted_user","restriction":"User"},{"name":"invoker","external_name":"invoker","restriction":"User"},{"name":"deleted_message","external_name":"deleted_message","restriction":"ReplyParameters | ::Nil"},{"name":"invoker_message","external_name":"invoker_message","restriction":"MessageID"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(reason : String | Nil, blacklisted_user : User, invoker : User, deleted_message : ReplyParameters | Nil, invoker_message : MessageID, services : Services) : Nil","args_html":"(reason : String | Nil, blacklisted_user : <a href=\"../PrivateParlorXT/User.html\">User</a>, invoker : <a href=\"../PrivateParlorXT/User.html\">User</a>, deleted_message : <a href=\"../PrivateParlorXT/ReplyParameters.html\">ReplyParameters</a> | Nil, invoker_message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr","line_number":74,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/blacklist_command.cr#L74"},"def":{"name":"send_messages","args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"blacklisted_user","external_name":"blacklisted_user","restriction":"User"},{"name":"invoker","external_name":"invoker","restriction":"User"},{"name":"deleted_message","external_name":"deleted_message","restriction":"ReplyParameters | ::Nil"},{"name":"invoker_message","external_name":"invoker_message","restriction":"MessageID"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"response = Format.substitute_reply(services.replies.blacklisted, {\"contact\" => Format.contact(services.config.blacklist_contact, services.replies), \"reason\" => Format.reason(reason, services.replies)})\nlog = Format.substitute_message(services.logs.blacklisted, {\"id\" => blacklisted_user.id.to_s, \"name\" => blacklisted_user.formatted_name, \"invoker\" => invoker.formatted_name, \"reason\" => Format.reason_log(reason, services.logs)})\nservices.relay.send_to_user(deleted_message, blacklisted_user.id, response)\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(invoker_message), invoker.id, services.replies.success)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/CachedHistory","path":"PrivateParlorXT/CachedHistory.html","kind":"class","full_name":"PrivateParlorXT::CachedHistory","name":"CachedHistory","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/History","kind":"class","full_name":"PrivateParlorXT::History","name":"History"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/History","kind":"class","full_name":"PrivateParlorXT::History","name":"History"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L6"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"An implementation of `History` storing the messages in RAM as a `Hash`","summary":"<p>An implementation of <code><a href=\"../PrivateParlorXT/History.html\">History</a></code> storing the messages in RAM as a <code>Hash</code></p>","instance_methods":[{"html_id":"add_rating(message:MessageID,user:UserID):Bool-instance-method","name":"add_rating","doc":"Adds a rating entry to the database with the given data\n\nReturns `true` if the user's rating was successfully added; `false` if the user's rating already exists.","summary":"<p>Adds a rating entry to the database with the given data</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(message : MessageID, user : UserID) : Bool","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":97,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L97"},"def":{"name":"add_rating","args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"@message_map[message].ratings.add?(user)"}},{"html_id":"add_to_history(origin:MessageID,receiver:MessageID,receiver_id:UserID):Nil-instance-method","name":"add_to_history","doc":"Add a receiver message to the `History`","summary":"<p>Add a receiver message to the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"args":[{"name":"origin","external_name":"origin","restriction":"MessageID"},{"name":"receiver","external_name":"receiver","restriction":"MessageID"},{"name":"receiver_id","external_name":"receiver_id","restriction":"UserID"}],"args_string":"(origin : MessageID, receiver : MessageID, receiver_id : UserID) : Nil","args_html":"(origin : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, receiver : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, receiver_id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Nil","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":49,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L49"},"def":{"name":"add_to_history","args":[{"name":"origin","external_name":"origin","restriction":"MessageID"},{"name":"receiver","external_name":"receiver","restriction":"MessageID"},{"name":"receiver_id","external_name":"receiver_id","restriction":"UserID"}],"return_type":"Nil","visibility":"Public","body":"@message_map.merge!({receiver => @message_map[origin]})\n@message_map[origin].receivers.merge!({receiver_id => receiver})\n"}},{"html_id":"add_warning(message:MessageID):Nil-instance-method","name":"add_warning","doc":"Adds a warning to the given message","summary":"<p>Adds a warning to the given message</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Nil","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":102,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L102"},"def":{"name":"add_warning","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Nil","visibility":"Public","body":"if msg = @message_map[message]\n  msg.warned = true\nend"}},{"html_id":"close-instance-method","name":"close","doc":"Cleanup when finished with `History`\n\nMainly applicable for implementations using a database","summary":"<p>Cleanup when finished with <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":38,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L38"},"def":{"name":"close","visibility":"Public","body":""}},{"html_id":"delete_message_group(message:MessageID):MessageID|Nil-instance-method","name":"delete_message_group","doc":"Delete a message group from the `History`","summary":"<p>Delete a message group from the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : MessageID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Nil","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":135,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L135"},"def":{"name":"delete_message_group","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"MessageID | ::Nil","visibility":"Public","body":"message = @message_map[message]\nmessage.receivers.each_value do |cached_msid|\n  @message_map.delete(cached_msid)\nend\n@message_map.delete(message.origin)\nmessage.origin\n"}},{"html_id":"expire:Nil-instance-method","name":"expire","doc":"Deletes old messages from the `History`\n\nThis should be invoked as a recurring task","summary":"<p>Deletes old messages from the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":154,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L154"},"def":{"name":"expire","return_type":"Nil","visibility":"Public","body":"msids = Set(MessageID).new\n@message_map.each_value do |message_group|\n  if !(expired?(message_group))\n    next\n  end\n  msids << message_group.origin\nend\nmsids.each do |msid|\n  delete_message_group(msid)\nend\nif msids.size > 0\n  Log.debug do\n    \"Expired #{msids.size} messages from the cache\"\n  end\nend\n"}},{"html_id":"message_map:Hash(MessageID,MessageGroup)-instance-method","name":"message_map","doc":"A hash of `MessageID` to `MessageGroup`","summary":"<p>A hash of <code><a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a></code> to <code><a href=\"../PrivateParlorXT/CachedHistory/MessageGroup.html\">MessageGroup</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":35,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L35"},"def":{"name":"message_map","return_type":"Hash(MessageID, MessageGroup)","visibility":"Public","body":"@message_map"}},{"html_id":"messages_from_user(user:UserID):Set(MessageID)-instance-method","name":"messages_from_user","doc":"Get all message IDs sent by a given user for purging messages","summary":"<p>Get all message IDs sent by a given user for purging messages</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Set(MessageID)","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Set(<a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>)","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":83,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L83"},"def":{"name":"messages_from_user","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Set(MessageID)","visibility":"Public","body":"user_msgs = Set(MessageID).new\n@message_map.each_value do |msg|\n  if msg.sender == user\n  else\n    next\n  end\n  if msg.sent <= (Time.utc - 48.hours)\n    next\n  end\n  user_msgs.add(msg.origin)\nend\nuser_msgs\n"}},{"html_id":"new_message(sender_id:UserID,origin:MessageID):MessageID-instance-method","name":"new_message","doc":"Create a new message group and add it to the `History`","summary":"<p>Create a new message group and add it to the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"UserID"},{"name":"origin","external_name":"origin","restriction":"MessageID"}],"args_string":"(sender_id : UserID, origin : MessageID) : MessageID","args_html":"(sender_id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, origin : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":42,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L42"},"def":{"name":"new_message","args":[{"name":"sender_id","external_name":"sender_id","restriction":"UserID"},{"name":"origin","external_name":"origin","restriction":"MessageID"}],"return_type":"MessageID","visibility":"Public","body":"message = MessageGroup.new(sender_id, origin)\n@message_map.merge!({origin => message})\norigin\n"}},{"html_id":"origin_message(message:MessageID):MessageID|Nil-instance-method","name":"origin_message","doc":"Get the message ID of the original message associated with the given message ID","summary":"<p>Get the message ID of the original message associated with the given message ID</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : MessageID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Nil","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":55,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L55"},"def":{"name":"origin_message","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"MessageID | ::Nil","visibility":"Public","body":"if msg = @message_map[message]?\n  msg.origin\nend"}},{"html_id":"purge_receivers(messages:Set(MessageID)):Hash(UserID,Array(MessageID))-instance-method","name":"purge_receivers","doc":"Get a hash containing an array of message IDs to delete associated with the users who received a message in the given set.\nUsed for the `PurgeCommand`\nNOTE: The returned array of message IDs should be sorted in descending order (most recent messages first)","summary":"<p>Get a hash containing an array of message IDs to delete associated with the users who received a message in the given set.</p>","abstract":false,"args":[{"name":"messages","external_name":"messages","restriction":"Set(MessageID)"}],"args_string":"(messages : Set(MessageID)) : Hash(UserID, Array(MessageID))","args_html":"(messages : Set(<a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>)) : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, Array(<a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>))","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":116,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L116"},"def":{"name":"purge_receivers","args":[{"name":"messages","external_name":"messages","restriction":"Set(MessageID)"}],"return_type":"Hash(UserID, Array(MessageID))","visibility":"Public","body":"hash = {} of UserID => Array(MessageID)\nmessages = messages.to_a.sort do |a, b|\n  b <=> a\nend\nmessages.each do |msid|\n  @message_map[msid].receivers.each do |receiver, receiver_msid|\n    if hash[receiver]?\n      hash[receiver] << receiver_msid\n    else\n      hash[receiver] = [receiver_msid]\n    end\n  end\nend\nhash\n"}},{"html_id":"receiver_message(message:MessageID,receiver:UserID):MessageID|Nil-instance-method","name":"receiver_message","doc":"Get the original message ID associated with the given message ID and receiver ID","summary":"<p>Get the original message ID associated with the given message ID and receiver ID</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"receiver","external_name":"receiver","restriction":"UserID"}],"args_string":"(message : MessageID, receiver : UserID) : MessageID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, receiver : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Nil","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":71,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L71"},"def":{"name":"receiver_message","args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"receiver","external_name":"receiver","restriction":"UserID"}],"return_type":"MessageID | ::Nil","visibility":"Public","body":"(receivers(message))[receiver]?"}},{"html_id":"receivers(message:MessageID):Hash(UserID,MessageID)-instance-method","name":"receivers","doc":"Get a hash of all users and receiver message IDs associated with the given message ID","summary":"<p>Get a hash of all users and receiver message IDs associated with the given message ID</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : Hash(UserID, MessageID)","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>)","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":62,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L62"},"def":{"name":"receivers","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Hash(UserID, MessageID)","visibility":"Public","body":"if msg = @message_map[message]?\n  {msg.sender => msg.origin}.merge!(msg.receivers)\nelse\n  {} of UserID => MessageID\nend"}},{"html_id":"sender(message:MessageID):UserID|Nil-instance-method","name":"sender","doc":"Get the sender of the original message referenced by the given message ID","summary":"<p>Get the sender of the original message referenced by the given message ID</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : UserID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a> | Nil","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":76,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L76"},"def":{"name":"sender","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"UserID | ::Nil","visibility":"Public","body":"if msg = @message_map[message]?\n  msg.sender\nend"}},{"html_id":"warned?(message:MessageID):Bool|Nil-instance-method","name":"warned?","doc":"Returns `true` if the given message was already warned; `false` or nil otherwise","summary":"<p>Returns <code>true</code> if the given message was already warned; <code>false</code> or nil otherwise</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : Bool | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":109,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L109"},"def":{"name":"warned?","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if msg = @message_map[message]\n  msg.warned\nend"}}],"types":[{"html_id":"private-parlor-xt/PrivateParlorXT/CachedHistory/MessageGroup","path":"PrivateParlorXT/CachedHistory/MessageGroup.html","kind":"class","full_name":"PrivateParlorXT::CachedHistory::MessageGroup","name":"MessageGroup","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L8"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT/CachedHistory","kind":"class","full_name":"PrivateParlorXT::CachedHistory","name":"CachedHistory"},"doc":"Represents single message sent and all of its receivers","summary":"<p>Represents single message sent and all of its receivers</p>","constructors":[{"html_id":"new(sender:UserID,origin:MessageID)-class-method","name":"new","doc":"Creates an instance of `MessageGroup`","summary":"<p>Creates an instance of <code><a href=\"../../PrivateParlorXT/CachedHistory/MessageGroup.html\">MessageGroup</a></code></p>","abstract":false,"args":[{"name":"sender","external_name":"sender","restriction":"UserID"},{"name":"origin","external_name":"origin","restriction":"MessageID"}],"args_string":"(sender : UserID, origin : MessageID)","args_html":"(sender : <a href=\"../../PrivateParlorXT/UserID.html\">UserID</a>, origin : <a href=\"../../PrivateParlorXT/MessageID.html\">MessageID</a>)","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":30,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L30"},"def":{"name":"new","args":[{"name":"sender","external_name":"sender","restriction":"UserID"},{"name":"origin","external_name":"origin","restriction":"MessageID"}],"visibility":"Public","body":"_ = allocate\n_.initialize(sender, origin)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"origin:MessageID-instance-method","name":"origin","doc":"The original message ID of this message","summary":"<p>The original message ID of this message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L13"},"def":{"name":"origin","return_type":"MessageID","visibility":"Public","body":"@origin"}},{"html_id":"ratings:Set(UserID)-instance-method","name":"ratings","doc":"Set of users who upvoted or downvoted this message","summary":"<p>Set of users who upvoted or downvoted this message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L22"},"def":{"name":"ratings","return_type":"Set(UserID)","visibility":"Public","body":"@ratings"}},{"html_id":"ratings=(ratings:Set(UserID))-instance-method","name":"ratings=","doc":"Set of users who upvoted or downvoted this message","summary":"<p>Set of users who upvoted or downvoted this message</p>","abstract":false,"args":[{"name":"ratings","external_name":"ratings","restriction":"Set(UserID)"}],"args_string":"(ratings : Set(UserID))","args_html":"(ratings : Set(<a href=\"../../PrivateParlorXT/UserID.html\">UserID</a>))","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L22"},"def":{"name":"ratings=","args":[{"name":"ratings","external_name":"ratings","restriction":"Set(UserID)"}],"visibility":"Public","body":"@ratings = ratings"}},{"html_id":"receivers:Hash(UserID,MessageID)-instance-method","name":"receivers","doc":"Users who received this message and their corresponding `MessageID`","summary":"<p>Users who received this message and their corresponding <code><a href=\"../../PrivateParlorXT/MessageID.html\">MessageID</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":19,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L19"},"def":{"name":"receivers","return_type":"Hash(UserID, MessageID)","visibility":"Public","body":"@receivers"}},{"html_id":"receivers=(receivers:Hash(UserID,MessageID))-instance-method","name":"receivers=","doc":"Users who received this message and their corresponding `MessageID`","summary":"<p>Users who received this message and their corresponding <code><a href=\"../../PrivateParlorXT/MessageID.html\">MessageID</a></code></p>","abstract":false,"args":[{"name":"receivers","external_name":"receivers","restriction":"Hash(UserID, MessageID)"}],"args_string":"(receivers : Hash(UserID, MessageID))","args_html":"(receivers : Hash(<a href=\"../../PrivateParlorXT/UserID.html\">UserID</a>, <a href=\"../../PrivateParlorXT/MessageID.html\">MessageID</a>))","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":19,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L19"},"def":{"name":"receivers=","args":[{"name":"receivers","external_name":"receivers","restriction":"Hash(UserID, MessageID)"}],"visibility":"Public","body":"@receivers = receivers"}},{"html_id":"sender:UserID-instance-method","name":"sender","doc":"User who sent this message","summary":"<p>User who sent this message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L10"},"def":{"name":"sender","return_type":"UserID","visibility":"Public","body":"@sender"}},{"html_id":"sent:Time-instance-method","name":"sent","doc":"The time at which this message was sent","summary":"<p>The time at which this message was sent</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L16"},"def":{"name":"sent","return_type":"Time","visibility":"Public","body":"@sent"}},{"html_id":"warned:Bool|Nil-instance-method","name":"warned","doc":"Whether or not this message has been warned\n\nIf `true`, a warning has been given to the user who sent this message, `false` otherwise","summary":"<p>Whether or not this message has been warned</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":27,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L27"},"def":{"name":"warned","return_type":"Bool | ::Nil","visibility":"Public","body":"@warned"}},{"html_id":"warned=(warned:Bool|Nil)-instance-method","name":"warned=","doc":"Whether or not this message has been warned\n\nIf `true`, a warning has been given to the user who sent this message, `false` otherwise","summary":"<p>Whether or not this message has been warned</p>","abstract":false,"args":[{"name":"warned","external_name":"warned","restriction":"Bool | ::Nil"}],"args_string":"(warned : Bool | Nil)","args_html":"(warned : Bool | Nil)","location":{"filename":"src/private-parlor-xt/history/cached_history.cr","line_number":27,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/cached_history.cr#L27"},"def":{"name":"warned=","args":[{"name":"warned","external_name":"warned","restriction":"Bool | ::Nil"}],"visibility":"Public","body":"@warned = warned"}}]}]},{"html_id":"private-parlor-xt/PrivateParlorXT/CallbackHandler","path":"PrivateParlorXT/CallbackHandler.html","kind":"class","full_name":"PrivateParlorXT::CallbackHandler","name":"CallbackHandler","abstract":true,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/callback_query_handler.cr","line_number":18,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/callback_query_handler.cr#L18"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"private-parlor-xt/PrivateParlorXT/StatisticsQueryHandler","kind":"class","full_name":"PrivateParlorXT::StatisticsQueryHandler","name":"StatisticsQueryHandler"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"The base class for all callback query handlers","summary":"<p>The base class for all callback query handlers</p>","constructors":[{"html_id":"new(config:Config)-class-method","name":"new","doc":"Initializes an instance of `CallbackHandler`\n\nThe *config* can be used to modify the functionality of the handler","summary":"<p>Initializes an instance of <code><a href=\"../PrivateParlorXT/CallbackHandler.html\">CallbackHandler</a></code></p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(config : Config)","args_html":"(config : <a href=\"../PrivateParlorXT/Config.html\">Config</a>)","location":{"filename":"src/private-parlor-xt/handlers/callback_query_handler.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/callback_query_handler.cr#L22"},"def":{"name":"new","args":[{"name":"config","external_name":"config","restriction":"Config"}],"visibility":"Public","body":"_ = allocate\n_.initialize(config)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"deny_user(user:User,services:Services):Nil-instance-method","name":"deny_user","doc":"Queues a system reply when the user cannot make a callback query due to being blacklisted.","summary":"<p>Queues a system reply when the user cannot make a callback query due to being blacklisted.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/callback_query_handler.cr","line_number":51,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/callback_query_handler.cr#L51"},"def":{"name":"deny_user","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user.blacklisted?\n  response = Format.substitute_reply(services.replies.blacklisted, {\"contact\" => Format.contact(services.config.blacklist_contact, services.replies), \"reason\" => Format.reason(user.blacklist_reason, services.replies)})\nelse\n  response = services.replies.not_in_chat\nend\nservices.relay.send_to_user(nil, user.id, response)\n"}},{"html_id":"do(callback:Tourmaline::CallbackQuery,services:Services):Nil-instance-method","name":"do","doc":"The function that describes the behavior of the `CallbackHandler`","summary":"<p>The function that describes the behavior of the <code><a href=\"../PrivateParlorXT/CallbackHandler.html\">CallbackHandler</a></code></p>","abstract":true,"args":[{"name":"callback","external_name":"callback","restriction":"Tourmaline::CallbackQuery"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(callback : Tourmaline::CallbackQuery, services : Services) : Nil","args_html":"(callback : Tourmaline::CallbackQuery, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/callback_query_handler.cr","line_number":26,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/callback_query_handler.cr#L26"},"def":{"name":"do","args":[{"name":"callback","external_name":"callback","restriction":"Tourmaline::CallbackQuery"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"user_from_callback(callback:Tourmaline::CallbackQuery,services:Services):User|Nil-instance-method","name":"user_from_callback","doc":"Returns the `User` associated with the *callback* if the `User` could be found in the `Database`.\nThis will also update the `User`'s username and realname if they have changed since the last message.\n\nReturns `nil`  if:\n  - `User` does not exist in the `Database`\n  - `User` is blacklisted","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> associated with the <em>callback</em> if the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> could be found in the <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code>.</p>","abstract":false,"args":[{"name":"callback","external_name":"callback","restriction":"Tourmaline::CallbackQuery"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(callback : Tourmaline::CallbackQuery, services : Services) : User | Nil","args_html":"(callback : Tourmaline::CallbackQuery, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/handlers/callback_query_handler.cr","line_number":34,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/callback_query_handler.cr#L34"},"def":{"name":"user_from_callback","args":[{"name":"callback","external_name":"callback","restriction":"Tourmaline::CallbackQuery"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User | ::Nil","visibility":"Public","body":"info = callback.from\nif user = services.database.get_user(info.id.to_i64)\nelse\n  return services.relay.send_to_user(nil, info.id.to_i64, services.replies.not_in_chat)\nend\nif user.can_use_command?\nelse\n  return deny_user(user, services)\nend\nuser.update_names(info.username, info.full_name)\nuser\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Client","path":"PrivateParlorXT/Client.html","kind":"class","full_name":"PrivateParlorXT::Client","name":"Client","abstract":false,"superclass":{"html_id":"private-parlor-xt/Tourmaline/Client","kind":"class","full_name":"Tourmaline::Client","name":"Client"},"ancestors":[{"html_id":"private-parlor-xt/Tourmaline/Client","kind":"class","full_name":"Tourmaline::Client","name":"Client"},{"html_id":"private-parlor-xt/Tourmaline/Logger","kind":"module","full_name":"Tourmaline::Logger","name":"Logger"},{"html_id":"private-parlor-xt/Tourmaline/Client/Api","kind":"module","full_name":"Tourmaline::Client::Api","name":"Api"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/client.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/client.cr#L5"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Handles polling Telegram for updates and sending responses","summary":"<p>Handles polling Telegram for updates and sending responses</p>","instance_methods":[{"html_id":"poll:Nil-instance-method","name":"poll","doc":"Initialize the `poller` and start polling for updates","summary":"<p>Initialize the <code>poller</code> and start polling for updates</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/client.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/client.cr#L10"},"def":{"name":"poll","return_type":"Nil","visibility":"Public","body":"@poller = (Tourmaline::Poller.new(self)).start"}},{"html_id":"stop:Nil-instance-method","name":"stop","doc":"Stop polling for updates","summary":"<p>Stop polling for updates</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/client.cr","line_number":15,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/client.cr#L15"},"def":{"name":"stop","return_type":"Nil","visibility":"Public","body":"if poller = @poller\nelse\n  return\nend\npoller.stop\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/CommandDescriptions","path":"PrivateParlorXT/CommandDescriptions.html","kind":"class","full_name":"PrivateParlorXT::CommandDescriptions","name":"CommandDescriptions","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L5"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A container for various command descriptions","summary":"<p>A container for various command descriptions</p>","constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L6"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}}],"instance_methods":[{"html_id":"blacklist:String-instance-method","name":"blacklist","doc":"Description for the `BlacklistCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/BlacklistCommand.html\">BlacklistCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":122,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L122"},"def":{"name":"blacklist","return_type":"String","visibility":"Public","body":"@blacklist"}},{"html_id":"delete:String-instance-method","name":"delete","doc":"Description for the `DeleteCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/DeleteCommand.html\">DeleteCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":82,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L82"},"def":{"name":"delete","return_type":"String","visibility":"Public","body":"@delete"}},{"html_id":"demote:String-instance-method","name":"demote","doc":"Description for the `DemoteCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/DemoteCommand.html\">DemoteCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":58,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L58"},"def":{"name":"demote","return_type":"String","visibility":"Public","body":"@demote"}},{"html_id":"downvote:String-instance-method","name":"downvote","doc":"Description for the `DownvoteHandler`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/DownvoteHandler.html\">DownvoteHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":34,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L34"},"def":{"name":"downvote","return_type":"String","visibility":"Public","body":"@downvote"}},{"html_id":"help:String-instance-method","name":"help","doc":"Description for the `HelpCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/HelpCommand.html\">HelpCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":138,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L138"},"def":{"name":"help","return_type":"String","visibility":"Public","body":"@help"}},{"html_id":"info:String-instance-method","name":"info","doc":"Description for the `InfoCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/InfoCommand.html\">InfoCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":18,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L18"},"def":{"name":"info","return_type":"String","visibility":"Public","body":"@info"}},{"html_id":"karma_info:String-instance-method","name":"karma_info","doc":"Description for the `KarmaInfoCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/KarmaInfoCommand.html\">KarmaInfoCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":102,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L102"},"def":{"name":"karma_info","return_type":"String","visibility":"Public","body":"@karma_info"}},{"html_id":"ksign:String-instance-method","name":"ksign","doc":"Description for the `KarmaSignCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/KarmaSignCommand.html\">KarmaSignCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":70,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L70"},"def":{"name":"ksign","return_type":"String","visibility":"Public","body":"@ksign"}},{"html_id":"motd:String-instance-method","name":"motd","doc":"Description for the `MotdCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/MotdCommand.html\">MotdCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":134,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L134"},"def":{"name":"motd","return_type":"String","visibility":"Public","body":"@motd"}},{"html_id":"motd_set:String-instance-method","name":"motd_set","doc":"Description for the `MotdCommand` when a new MOTD is set","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/MotdCommand.html\">MotdCommand</a></code> when a new MOTD is set</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":142,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L142"},"def":{"name":"motd_set","return_type":"String","visibility":"Public","body":"@motd_set"}},{"html_id":"pin:String-instance-method","name":"pin","doc":"Description for the `PinCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/PinCommand.html\">PinCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":106,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L106"},"def":{"name":"pin","return_type":"String","visibility":"Public","body":"@pin"}},{"html_id":"privacy:String-instance-method","name":"privacy","doc":"Description for the `PrivacyPolicyCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/PrivacyPolicyCommand.html\">PrivacyPolicyCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":118,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L118"},"def":{"name":"privacy","return_type":"String","visibility":"Public","body":"@privacy"}},{"html_id":"promote:String-instance-method","name":"promote","doc":"Description for the `PromoteCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/PromoteCommand.html\">PromoteCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":54,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L54"},"def":{"name":"promote","return_type":"String","visibility":"Public","body":"@promote"}},{"html_id":"purge:String-instance-method","name":"purge","doc":"Description for the `PurgeCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/PurgeCommand.html\">PurgeCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":94,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L94"},"def":{"name":"purge","return_type":"String","visibility":"Public","body":"@purge"}},{"html_id":"ranked_info:String-instance-method","name":"ranked_info","doc":"Description for the `InfoCommand` when optaining information about another user","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/InfoCommand.html\">InfoCommand</a></code> when optaining information about another user</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":146,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L146"},"def":{"name":"ranked_info","return_type":"String","visibility":"Public","body":"@ranked_info"}},{"html_id":"ranksay:String-instance-method","name":"ranksay","doc":"Description for the `RanksayCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/RanksayCommand.html\">RanksayCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":74,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L74"},"def":{"name":"ranksay","return_type":"String","visibility":"Public","body":"@ranksay"}},{"html_id":"remove:String-instance-method","name":"remove","doc":"Description for the `RemoveCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/RemoveCommand.html\">RemoveCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":90,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L90"},"def":{"name":"remove","return_type":"String","visibility":"Public","body":"@remove"}},{"html_id":"reveal:String-instance-method","name":"reveal","doc":"Description for the `RevealCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/RevealCommand.html\">RevealCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":46,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L46"},"def":{"name":"reveal","return_type":"String","visibility":"Public","body":"@reveal"}},{"html_id":"sign:String-instance-method","name":"sign","doc":"Description for the `SignCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/SignCommand.html\">SignCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":62,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L62"},"def":{"name":"sign","return_type":"String","visibility":"Public","body":"@sign"}},{"html_id":"spoiler:String-instance-method","name":"spoiler","doc":"Description for the `SpoilerCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/SpoilerCommand.html\">SpoilerCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":98,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L98"},"def":{"name":"spoiler","return_type":"String","visibility":"Public","body":"@spoiler"}},{"html_id":"start:String-instance-method","name":"start","doc":"Description for the `StartCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/StartCommand.html\">StartCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L10"},"def":{"name":"start","return_type":"String","visibility":"Public","body":"@start"}},{"html_id":"stats:String-instance-method","name":"stats","doc":"Description for the `StatsCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/StatsCommand.html\">StatsCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":114,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L114"},"def":{"name":"stats","return_type":"String","visibility":"Public","body":"@stats"}},{"html_id":"stop:String-instance-method","name":"stop","doc":"Description for the `StopCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/StopCommand.html\">StopCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L14"},"def":{"name":"stop","return_type":"String","visibility":"Public","body":"@stop"}},{"html_id":"toggle_debug:String-instance-method","name":"toggle_debug","doc":"Description for the `ToggleDebugCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/ToggleDebugCommand.html\">ToggleDebugCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":42,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L42"},"def":{"name":"toggle_debug","return_type":"String","visibility":"Public","body":"@toggle_debug"}},{"html_id":"toggle_karma:String-instance-method","name":"toggle_karma","doc":"Description for the `ToggleKarmaCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/ToggleKarmaCommand.html\">ToggleKarmaCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":38,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L38"},"def":{"name":"toggle_karma","return_type":"String","visibility":"Public","body":"@toggle_karma"}},{"html_id":"tripcode:String-instance-method","name":"tripcode","doc":"Description for the `TripcodeCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/TripcodeCommand.html\">TripcodeCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":50,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L50"},"def":{"name":"tripcode","return_type":"String","visibility":"Public","body":"@tripcode"}},{"html_id":"tsign:String-instance-method","name":"tsign","doc":"Description for the `TripcodeSignCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/TripcodeSignCommand.html\">TripcodeSignCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":66,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L66"},"def":{"name":"tsign","return_type":"String","visibility":"Public","body":"@tsign"}},{"html_id":"unblacklist:String-instance-method","name":"unblacklist","doc":"Description for the `UnblacklistCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/UnblacklistCommand.html\">UnblacklistCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":126,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L126"},"def":{"name":"unblacklist","return_type":"String","visibility":"Public","body":"@unblacklist"}},{"html_id":"uncooldown:String-instance-method","name":"uncooldown","doc":"Description for the `UncooldownCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/UncooldownCommand.html\">UncooldownCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":86,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L86"},"def":{"name":"uncooldown","return_type":"String","visibility":"Public","body":"@uncooldown"}},{"html_id":"unpin:String-instance-method","name":"unpin","doc":"Description for the `UnpinCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/UnpinCommand.html\">UnpinCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":110,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L110"},"def":{"name":"unpin","return_type":"String","visibility":"Public","body":"@unpin"}},{"html_id":"upvote:String-instance-method","name":"upvote","doc":"Description for the `UpvoteHandler`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/UpvoteHandler.html\">UpvoteHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":30,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L30"},"def":{"name":"upvote","return_type":"String","visibility":"Public","body":"@upvote"}},{"html_id":"users:String-instance-method","name":"users","doc":"Description for the `UsersCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/UsersCommand.html\">UsersCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L22"},"def":{"name":"users","return_type":"String","visibility":"Public","body":"@users"}},{"html_id":"version:String-instance-method","name":"version","doc":"Description for the `VersionCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/VersionCommand.html\">VersionCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":26,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L26"},"def":{"name":"version","return_type":"String","visibility":"Public","body":"@version"}},{"html_id":"warn:String-instance-method","name":"warn","doc":"Description for the `WarnCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/WarnCommand.html\">WarnCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":78,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L78"},"def":{"name":"warn","return_type":"String","visibility":"Public","body":"@warn"}},{"html_id":"whitelist:String-instance-method","name":"whitelist","doc":"Description for the `WhitelistCommand`","summary":"<p>Description for the <code><a href=\"../PrivateParlorXT/WhitelistCommand.html\">WhitelistCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/command_descriptions.cr","line_number":130,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/command_descriptions.cr#L130"},"def":{"name":"whitelist","return_type":"String","visibility":"Public","body":"@whitelist"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","path":"PrivateParlorXT/CommandHandler.html","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler","abstract":true,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handler.cr","line_number":23,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handler.cr#L23"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"private-parlor-xt/PrivateParlorXT/BlacklistCommand","kind":"class","full_name":"PrivateParlorXT::BlacklistCommand","name":"BlacklistCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/DeleteCommand","kind":"class","full_name":"PrivateParlorXT::DeleteCommand","name":"DeleteCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/DemoteCommand","kind":"class","full_name":"PrivateParlorXT::DemoteCommand","name":"DemoteCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/HelpCommand","kind":"class","full_name":"PrivateParlorXT::HelpCommand","name":"HelpCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/InfoCommand","kind":"class","full_name":"PrivateParlorXT::InfoCommand","name":"InfoCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/KarmaInfoCommand","kind":"class","full_name":"PrivateParlorXT::KarmaInfoCommand","name":"KarmaInfoCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/KarmaSignCommand","kind":"class","full_name":"PrivateParlorXT::KarmaSignCommand","name":"KarmaSignCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/MotdCommand","kind":"class","full_name":"PrivateParlorXT::MotdCommand","name":"MotdCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/PinCommand","kind":"class","full_name":"PrivateParlorXT::PinCommand","name":"PinCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/PrivacyPolicyCommand","kind":"class","full_name":"PrivateParlorXT::PrivacyPolicyCommand","name":"PrivacyPolicyCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/PromoteCommand","kind":"class","full_name":"PrivateParlorXT::PromoteCommand","name":"PromoteCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/PurgeCommand","kind":"class","full_name":"PrivateParlorXT::PurgeCommand","name":"PurgeCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/RanksayCommand","kind":"class","full_name":"PrivateParlorXT::RanksayCommand","name":"RanksayCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/RemoveCommand","kind":"class","full_name":"PrivateParlorXT::RemoveCommand","name":"RemoveCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/RevealCommand","kind":"class","full_name":"PrivateParlorXT::RevealCommand","name":"RevealCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/SignCommand","kind":"class","full_name":"PrivateParlorXT::SignCommand","name":"SignCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/SpoilerCommand","kind":"class","full_name":"PrivateParlorXT::SpoilerCommand","name":"SpoilerCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/StartCommand","kind":"class","full_name":"PrivateParlorXT::StartCommand","name":"StartCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/StatsCommand","kind":"class","full_name":"PrivateParlorXT::StatsCommand","name":"StatsCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/StopCommand","kind":"class","full_name":"PrivateParlorXT::StopCommand","name":"StopCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/ToggleDebugCommand","kind":"class","full_name":"PrivateParlorXT::ToggleDebugCommand","name":"ToggleDebugCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/ToggleKarmaCommand","kind":"class","full_name":"PrivateParlorXT::ToggleKarmaCommand","name":"ToggleKarmaCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/TripcodeCommand","kind":"class","full_name":"PrivateParlorXT::TripcodeCommand","name":"TripcodeCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/TripcodeSignCommand","kind":"class","full_name":"PrivateParlorXT::TripcodeSignCommand","name":"TripcodeSignCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/UnblacklistCommand","kind":"class","full_name":"PrivateParlorXT::UnblacklistCommand","name":"UnblacklistCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/UncooldownCommand","kind":"class","full_name":"PrivateParlorXT::UncooldownCommand","name":"UncooldownCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/UnpinCommand","kind":"class","full_name":"PrivateParlorXT::UnpinCommand","name":"UnpinCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/UsersCommand","kind":"class","full_name":"PrivateParlorXT::UsersCommand","name":"UsersCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/VersionCommand","kind":"class","full_name":"PrivateParlorXT::VersionCommand","name":"VersionCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/WarnCommand","kind":"class","full_name":"PrivateParlorXT::WarnCommand","name":"WarnCommand"},{"html_id":"private-parlor-xt/PrivateParlorXT/WhitelistCommand","kind":"class","full_name":"PrivateParlorXT::WhitelistCommand","name":"WhitelistCommand"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A base class for handling a Telegram command\n\nHandlers that are meant to respond to commands (messages that start with '/') should inherit this class,\nand include a `RespondsTo` annotation to have it be usable by the bot.","summary":"<p>A base class for handling a Telegram command</p>","instance_methods":[{"html_id":"authorized?(user:User,message:Tourmaline::Message,permission:CommandPermissions,services:Services):Bool-instance-method","name":"authorized?","doc":"Checks if the user's `Rank` contain the given `CommandPermissions`\n\nReturns `true` if it does, `false` otherwise","summary":"<p>Checks if the user's <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> contain the given <code><a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a></code></p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"permission","external_name":"permission","restriction":"CommandPermissions"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, permission : CommandPermissions, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, permission : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/command_handler.cr","line_number":58,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handler.cr#L58"},"def":{"name":"authorized?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"permission","external_name":"permission","restriction":"CommandPermissions"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if services.access.authorized?(user.rank, permission)\nelse\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.command_disabled)\n  return false\nend\ntrue\n"}},{"html_id":"authorized?(user:User,message:Tourmaline::Message,services:Services,*permissions:CommandPermissions):CommandPermissions|Nil-instance-method","name":"authorized?","doc":"Checks if the user's `Rank` contains any of the given `CommandPermissions`\n\nIf it does, it returns the one `CommandPermissions`\nReturns `nil` otherwise","summary":"<p>Checks if the user's <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> contains any of the given <code><a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a></code></p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"},{"name":"permissions","external_name":"permissions","restriction":"CommandPermissions"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services, *permissions : CommandPermissions) : CommandPermissions | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>, *permissions : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a>) : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a> | Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handler.cr","line_number":71,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handler.cr#L71"},"def":{"name":"authorized?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"},{"name":"permissions","external_name":"permissions","restriction":"CommandPermissions"}],"splat_index":3,"return_type":"CommandPermissions | ::Nil","visibility":"Public","body":"if authority = services.access.authorized?(user.rank, *permissions)\n  authority\nelse\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.command_disabled)\nend"}},{"html_id":"delete_messages(message:MessageID,user:UserID,debug_enabled:Bool|Nil,services:Services):MessageID|Nil-instance-method","name":"delete_messages","doc":"Deletes the message group associated with the given *message* ID in the chat and from the `History`\n\nReturns the original `MessageID` of the associated message group","summary":"<p>Deletes the message group associated with the given <em>message</em> ID in the chat and from the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"user","external_name":"user","restriction":"UserID"},{"name":"debug_enabled","external_name":"debug_enabled","restriction":"Bool | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : MessageID, user : UserID, debug_enabled : Bool | Nil, services : Services) : MessageID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, debug_enabled : Bool | Nil, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handler.cr","line_number":82,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handler.cr#L82"},"def":{"name":"delete_messages","args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"user","external_name":"user","restriction":"UserID"},{"name":"debug_enabled","external_name":"debug_enabled","restriction":"Bool | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"MessageID | ::Nil","visibility":"Public","body":"reply_msids = services.history.receivers(message)\nif debug_enabled\nelse\n  reply_msids.delete(user)\nend\nreply_msids.each do |receiver, receiver_message|\n  services.relay.delete_message(receiver, receiver_message)\nend\nservices.history.delete_message_group(message)\n"}},{"html_id":"deny_user(user:User,services:Services):Nil-instance-method","name":"deny_user","doc":"Queues a system reply when the user is blacklisted and cannot use a command","summary":"<p>Queues a system reply when the user is blacklisted and cannot use a command</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handler.cr","line_number":44,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handler.cr#L44"},"def":{"name":"deny_user","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user.blacklisted?\nelse\n  return\nend\nresponse = Format.substitute_reply(services.replies.blacklisted, {\"contact\" => Format.contact(services.config.blacklist_contact, services.replies), \"reason\" => Format.reason(user.blacklist_reason, services.replies)})\nservices.relay.send_to_user(nil, user.id, response)\n"}},{"html_id":"remove_command_entity(text:String,entities:Array(Tourmaline::MessageEntity),arg:String):Array(Tourmaline::MessageEntity)-instance-method","name":"remove_command_entity","doc":"Removes the bot command message entity from *entities* and subtracts the index of the *arg* start from the offset of each message entity in *entities*\n\nReturns an array of updated `Tourmaline::MessageEntity`","summary":"<p>Removes the bot command message entity from <em>entities</em> and subtracts the index of the <em>arg</em> start from the offset of each message entity in <em>entities</em></p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"arg","external_name":"arg","restriction":"String"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity), arg : String) : Array(Tourmaline::MessageEntity)","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity), arg : String) : Array(Tourmaline::MessageEntity)","location":{"filename":"src/private-parlor-xt/handlers/command_handler.cr","line_number":99,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handler.cr#L99"},"def":{"name":"remove_command_entity","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"arg","external_name":"arg","restriction":"String"}],"return_type":"Array(Tourmaline::MessageEntity)","visibility":"Public","body":"if command_entity = entities.find do |item|\n  (item.type == \"bot_command\") && (item.offset == 0)\nend\n  entities = entities - [command_entity]\nend\narg_offset = text[...(text.index(arg))].to_utf16.size\nFormat.reset_entities(entities, arg_offset)\n"}},{"html_id":"user_from_message(message:Tourmaline::Message,services:Services):User|Nil-instance-method","name":"user_from_message","doc":"Gets the `User` with updated names from the given *message* and returns it if the message is a command, the user exists, and the user is not blacklisted","summary":"<p>Gets the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with updated names from the given <em>message</em> and returns it if the message is a command, the user exists, and the user is not blacklisted</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : User | Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handler.cr","line_number":25,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handler.cr#L25"},"def":{"name":"user_from_message","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User | ::Nil","visibility":"Public","body":"if info = message.from\nelse\n  return\nend\nif text = message.text || message.caption\n  if text.starts_with?('/')\n  else\n    return\n  end\nend\nif user = services.database.get_user(info.id.to_i64)\nelse\n  return services.relay.send_to_user(nil, info.id.to_i64, services.replies.not_in_chat)\nend\nif user.can_use_command?\nelse\n  return deny_user(user, services)\nend\nuser.update_names(info.username, info.full_name)\nuser\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/CommandPermissions","path":"PrivateParlorXT/CommandPermissions.html","kind":"enum","full_name":"PrivateParlorXT::CommandPermissions","name":"CommandPermissions","abstract":false,"ancestors":[{"html_id":"private-parlor-xt/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"private-parlor-xt/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"private-parlor-xt/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":55,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L55"}],"repository_name":"private-parlor-xt","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Users","name":"Users","value":"0"},{"id":"Upvote","name":"Upvote","value":"1"},{"id":"Downvote","name":"Downvote","value":"2"},{"id":"Promote","name":"Promote","value":"3"},{"id":"PromoteLower","name":"PromoteLower","value":"4"},{"id":"PromoteSame","name":"PromoteSame","value":"5"},{"id":"Demote","name":"Demote","value":"6"},{"id":"Sign","name":"Sign","value":"7"},{"id":"TSign","name":"TSign","value":"8"},{"id":"Reveal","name":"Reveal","value":"9"},{"id":"Spoiler","name":"Spoiler","value":"10"},{"id":"Pin","name":"Pin","value":"11"},{"id":"Unpin","name":"Unpin","value":"12"},{"id":"Ranksay","name":"Ranksay","value":"13"},{"id":"RanksayLower","name":"RanksayLower","value":"14"},{"id":"Warn","name":"Warn","value":"15"},{"id":"Delete","name":"Delete","value":"16"},{"id":"Uncooldown","name":"Uncooldown","value":"17"},{"id":"Remove","name":"Remove","value":"18"},{"id":"Purge","name":"Purge","value":"19"},{"id":"Blacklist","name":"Blacklist","value":"20"},{"id":"Whitelist","name":"Whitelist","value":"21"},{"id":"MotdSet","name":"MotdSet","value":"22"},{"id":"RankedInfo","name":"RankedInfo","value":"23"},{"id":"Unblacklist","name":"Unblacklist","value":"24"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Commands and command types which can be given to a `Rank` to permit using certain commands\n\n## Commands permitted for each type:\n\n`Users`: View the exact number of joined, left, and blacklisted users\n\n`Upvote`: Upvote messages\n\n`Downvote`: Downvote messages\n\n`Promote`: Promote users to the same rank AND/OR lower ranks (Mutually exclusive with `PromoteSame` and `PromoteLower`)\n\n`PromoteLower`: Promote users to lower ranks ONLY (Mutually exclusive with `Promote` and `PromoteSame`)\n\n`PromoteSame`: Promote users to the same rank ONLY (Mutually exclusive with `Promote` and `PromoteLower`)\n\n`Demote`: Demote users of lower rank\n\n`Sign`: Sign a message with the user's username\n\n`TSign`: Sign a message with a tripcode\n\n`Reveal`: Privately reveal username to another user\n\n`Spoiler`: Add or remove a spoiler from a media message using `SpoilerCommand`\n\n`Pin`: Pin a message to the chat\n\n`Unpin`: Unpin the a message or the recent message\n\n`Ranksay`: Sign a message with rank name (Mutually exclusive with `RanksayLower`)\n\n`RanksayLower`: Sign a message with rank name OR name of a lower rank IF that rank can ranksay (Mutually exclusive with `Ranksay`)\n\n`Warn`: Warn a message and give the user a cooldown\n\n`Delete`: Delete a message and give the user a cooldown\n\n`Uncooldown`: Remove a cooldown from a user\n\n`Remove`: Delete message without giving the user a cooldown\n\n`Purge`: Delete all messages from recently blacklisted users\n\n`Blacklist`: Ban a user from the chat\n\n`Whitelist`: Invite a user to the chat (Applicable only if registration is closed)\n\n`MotdSet`: Modify and set the MOTD/rules\n\n`RankedInfo`: Get info (OID, karma, cooldown duration) of a another user\n\n`Unblacklist`: Unban a user from the chat","summary":"<p>Commands and command types which can be given to a <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> to permit using certain commands</p>","instance_methods":[{"html_id":"blacklist?-instance-method","name":"blacklist?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":76,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L76"},"def":{"name":"blacklist?","visibility":"Public","body":"self == Blacklist"}},{"html_id":"delete?-instance-method","name":"delete?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":72,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L72"},"def":{"name":"delete?","visibility":"Public","body":"self == Delete"}},{"html_id":"demote?-instance-method","name":"demote?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":62,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L62"},"def":{"name":"demote?","visibility":"Public","body":"self == Demote"}},{"html_id":"downvote?-instance-method","name":"downvote?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":58,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L58"},"def":{"name":"downvote?","visibility":"Public","body":"self == Downvote"}},{"html_id":"motd_set?-instance-method","name":"motd_set?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":78,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L78"},"def":{"name":"motd_set?","visibility":"Public","body":"self == MotdSet"}},{"html_id":"pin?-instance-method","name":"pin?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":67,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L67"},"def":{"name":"pin?","visibility":"Public","body":"self == Pin"}},{"html_id":"promote?-instance-method","name":"promote?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":59,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L59"},"def":{"name":"promote?","visibility":"Public","body":"self == Promote"}},{"html_id":"promote_lower?-instance-method","name":"promote_lower?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":60,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L60"},"def":{"name":"promote_lower?","visibility":"Public","body":"self == PromoteLower"}},{"html_id":"promote_same?-instance-method","name":"promote_same?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":61,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L61"},"def":{"name":"promote_same?","visibility":"Public","body":"self == PromoteSame"}},{"html_id":"purge?-instance-method","name":"purge?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":75,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L75"},"def":{"name":"purge?","visibility":"Public","body":"self == Purge"}},{"html_id":"ranked_info?-instance-method","name":"ranked_info?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":79,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L79"},"def":{"name":"ranked_info?","visibility":"Public","body":"self == RankedInfo"}},{"html_id":"ranksay?-instance-method","name":"ranksay?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":69,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L69"},"def":{"name":"ranksay?","visibility":"Public","body":"self == Ranksay"}},{"html_id":"ranksay_lower?-instance-method","name":"ranksay_lower?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":70,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L70"},"def":{"name":"ranksay_lower?","visibility":"Public","body":"self == RanksayLower"}},{"html_id":"remove?-instance-method","name":"remove?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":74,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L74"},"def":{"name":"remove?","visibility":"Public","body":"self == Remove"}},{"html_id":"reveal?-instance-method","name":"reveal?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":65,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L65"},"def":{"name":"reveal?","visibility":"Public","body":"self == Reveal"}},{"html_id":"sign?-instance-method","name":"sign?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":63,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L63"},"def":{"name":"sign?","visibility":"Public","body":"self == Sign"}},{"html_id":"spoiler?-instance-method","name":"spoiler?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":66,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L66"},"def":{"name":"spoiler?","visibility":"Public","body":"self == Spoiler"}},{"html_id":"t_sign?-instance-method","name":"t_sign?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":64,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L64"},"def":{"name":"t_sign?","visibility":"Public","body":"self == TSign"}},{"html_id":"unblacklist?-instance-method","name":"unblacklist?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":80,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L80"},"def":{"name":"unblacklist?","visibility":"Public","body":"self == Unblacklist"}},{"html_id":"uncooldown?-instance-method","name":"uncooldown?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":73,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L73"},"def":{"name":"uncooldown?","visibility":"Public","body":"self == Uncooldown"}},{"html_id":"unpin?-instance-method","name":"unpin?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":68,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L68"},"def":{"name":"unpin?","visibility":"Public","body":"self == Unpin"}},{"html_id":"upvote?-instance-method","name":"upvote?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":57,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L57"},"def":{"name":"upvote?","visibility":"Public","body":"self == Upvote"}},{"html_id":"users?-instance-method","name":"users?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":56,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L56"},"def":{"name":"users?","visibility":"Public","body":"self == Users"}},{"html_id":"warn?-instance-method","name":"warn?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":71,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L71"},"def":{"name":"warn?","visibility":"Public","body":"self == Warn"}},{"html_id":"whitelist?-instance-method","name":"whitelist?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/command_permissions.cr","line_number":77,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/command_permissions.cr#L77"},"def":{"name":"whitelist?","visibility":"Public","body":"self == Whitelist"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Config","path":"PrivateParlorXT/Config.html","kind":"class","full_name":"PrivateParlorXT::Config","name":"Config","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/config/config.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L8"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A container for values deserialized from the configuration file","summary":"<p>A container for values deserialized from the configuration file</p>","constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L9"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"parse_config:Config-class-method","name":"parse_config","doc":"Deserializes the values from the config file and returns a validated `Config`","summary":"<p>Deserializes the values from the config file and returns a validated <code><a href=\"../PrivateParlorXT/Config.html\">Config</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":391,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L391"},"def":{"name":"parse_config","return_type":"Config","visibility":"Public","body":"begin\n  check_config(Config.from_yaml(File.open(\"config.yaml\")))\nrescue ex : YAML::ParseException\n  Log.error(exception: ex) do\n    \"Could not parse the given value at row #{ex.line_number}. This could be because a required value was not set or the wrong type was given.\"\n  end\n  exit\nrescue ex : File::NotFoundError | File::AccessDeniedError\n  Log.error(exception: ex) do\n    \"Could not open \\\"./config.yaml\\\". Exiting...\"\n  end\n  exit\nend"}}],"instance_methods":[{"html_id":"blacklist_contact:String|Nil-instance-method","name":"blacklist_contact","doc":"The contact string shown to blacklisted users","summary":"<p>The contact string shown to blacklisted users</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":364,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L364"},"def":{"name":"blacklist_contact","return_type":"String | ::Nil","visibility":"Public","body":"@blacklist_contact"}},{"html_id":"cooldown_base:Int32-instance-method","name":"cooldown_base","doc":"The base integer for which cooldown times are computed from","summary":"<p>The base integer for which cooldown times are computed from</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":320,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L320"},"def":{"name":"cooldown_base","return_type":"Int32","visibility":"Public","body":"@cooldown_base"}},{"html_id":"database:String-instance-method","name":"database","doc":"A file path to a SQLite datbase","summary":"<p>A file path to a SQLite datbase</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":17,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L17"},"def":{"name":"database","return_type":"String","visibility":"Public","body":"@database"}},{"html_id":"database_history:Bool|Nil-instance-method","name":"database_history","doc":"Whether or not to use the database for persisting message history","summary":"<p>Whether or not to use the database for persisting message history</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":41,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L41"},"def":{"name":"database_history","return_type":"Bool | ::Nil","visibility":"Public","body":"@database_history"}},{"html_id":"default_rank:Int32-instance-method","name":"default_rank","doc":"The value of the `Rank` a user will be set to when joining for the first time, getting demoted, or when one of the `ranks` are invalid","summary":"<p>The value of the <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> a user will be set to when joining for the first time, getting demoted, or when one of the <code><a href=\"../PrivateParlorXT/Config.html#ranks%3AHash%28Int32%2CRank%29-instance-method\">#ranks</a></code> are invalid</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":83,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L83"},"def":{"name":"default_rank","return_type":"Int32","visibility":"Public","body":"@default_rank"}},{"html_id":"default_rank=(default_rank:Int32)-instance-method","name":"default_rank=","doc":"The value of the `Rank` a user will be set to when joining for the first time, getting demoted, or when one of the `ranks` are invalid","summary":"<p>The value of the <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> a user will be set to when joining for the first time, getting demoted, or when one of the <code><a href=\"../PrivateParlorXT/Config.html#ranks%3AHash%28Int32%2CRank%29-instance-method\">#ranks</a></code> are invalid</p>","abstract":false,"args":[{"name":"default_rank","external_name":"default_rank","restriction":"Int32"}],"args_string":"(default_rank : Int32)","args_html":"(default_rank : Int32)","location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":83,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L83"},"def":{"name":"default_rank=","args":[{"name":"default_rank","external_name":"default_rank","restriction":"Int32"}],"visibility":"Public","body":"@default_rank = default_rank"}},{"html_id":"downvote_limit_interval:Int32-instance-method","name":"downvote_limit_interval","doc":"Limit a user's usage of `DownvoteHandler` for once every interval (in seconds)","summary":"<p>Limit a user's usage of <code><a href=\"../PrivateParlorXT/DownvoteHandler.html\">DownvoteHandler</a></code> for once every interval (in seconds)</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":376,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L376"},"def":{"name":"downvote_limit_interval","return_type":"Int32","visibility":"Public","body":"@downvote_limit_interval"}},{"html_id":"enable_blacklist:Array(Bool)-instance-method","name":"enable_blacklist","doc":"A 2-element array, the first element enables the `BlacklistCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/BlacklistCommand.html\">BlacklistCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":221,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L221"},"def":{"name":"enable_blacklist","return_type":"Array(Bool)","visibility":"Public","body":"@enable_blacklist"}},{"html_id":"enable_delete:Array(Bool)-instance-method","name":"enable_delete","doc":"A 2-element array, the first element enables the `DeleteCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/DeleteCommand.html\">DeleteCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":205,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L205"},"def":{"name":"enable_delete","return_type":"Array(Bool)","visibility":"Public","body":"@enable_delete"}},{"html_id":"enable_demote:Array(Bool)-instance-method","name":"enable_demote","doc":"A 2-element array, the first element enables the `DemoteCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/DemoteCommand.html\">DemoteCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":197,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L197"},"def":{"name":"enable_demote","return_type":"Array(Bool)","visibility":"Public","body":"@enable_demote"}},{"html_id":"enable_downvote:Array(Bool)-instance-method","name":"enable_downvote","doc":"A 2-element array, the first element enables the `DownvoteHandler`, the second does nothing for now as this command is not a `CommandHandler`","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/DownvoteHandler.html\">DownvoteHandler</a></code>, the second does nothing for now as this command is not a <code><a href=\"../PrivateParlorXT/CommandHandler.html\">CommandHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":189,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L189"},"def":{"name":"enable_downvote","return_type":"Array(Bool)","visibility":"Public","body":"@enable_downvote"}},{"html_id":"enable_help:Array(Bool)-instance-method","name":"enable_help","doc":"A 2-element array, the first element enables the `HelpCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/HelpCommand.html\">HelpCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":181,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L181"},"def":{"name":"enable_help","return_type":"Array(Bool)","visibility":"Public","body":"@enable_help"}},{"html_id":"enable_info:Array(Bool)-instance-method","name":"enable_info","doc":"A 2-element array, the first element enables the `InfoCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/InfoCommand.html\">InfoCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":133,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L133"},"def":{"name":"enable_info","return_type":"Array(Bool)","visibility":"Public","body":"@enable_info"}},{"html_id":"enable_karma_info:Array(Bool)-instance-method","name":"enable_karma_info","doc":"A 2-element array, the first element enables the `KarmaInfoCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/KarmaInfoCommand.html\">KarmaInfoCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":237,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L237"},"def":{"name":"enable_karma_info","return_type":"Array(Bool)","visibility":"Public","body":"@enable_karma_info"}},{"html_id":"enable_karma_sign:Array(Bool)-instance-method","name":"enable_karma_sign","doc":"A 2-element array, the first element enables the `KarmaSignCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/KarmaSignCommand.html\">KarmaSignCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":169,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L169"},"def":{"name":"enable_karma_sign","return_type":"Array(Bool)","visibility":"Public","body":"@enable_karma_sign"}},{"html_id":"enable_motd:Array(Bool)-instance-method","name":"enable_motd","doc":"A 2-element array, the first element enables the `MotdCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/MotdCommand.html\">MotdCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":177,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L177"},"def":{"name":"enable_motd","return_type":"Array(Bool)","visibility":"Public","body":"@enable_motd"}},{"html_id":"enable_pin:Array(Bool)-instance-method","name":"enable_pin","doc":"A 2-element array, the first element enables the `PinCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/PinCommand.html\">PinCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":241,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L241"},"def":{"name":"enable_pin","return_type":"Array(Bool)","visibility":"Public","body":"@enable_pin"}},{"html_id":"enable_privacy_policy:Array(Bool)-instance-method","name":"enable_privacy_policy","doc":"A 2-element array, the first element enables the `PrivacyPolicyCommand` and the second registers its `CommandDescriptions` with @BotFather\nThis field is not found in the config file by default; this command is always enabled and always registered regardless of if this field is in the configuration file","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/PrivacyPolicyCommand.html\">PrivacyPolicyCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather This field is not found in the config file by default; this command is always enabled and always registered regardless of if this field is in the configuration file</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":254,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L254"},"def":{"name":"enable_privacy_policy","return_type":"Array(Bool)","visibility":"Public","body":"@enable_privacy_policy"}},{"html_id":"enable_promote:Array(Bool)-instance-method","name":"enable_promote","doc":"A 2-element array, the first element enables the `PromoteCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/PromoteCommand.html\">PromoteCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":193,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L193"},"def":{"name":"enable_promote","return_type":"Array(Bool)","visibility":"Public","body":"@enable_promote"}},{"html_id":"enable_purge:Array(Bool)-instance-method","name":"enable_purge","doc":"A 2-element array, the first element enables the `PurgeCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/PurgeCommand.html\">PurgeCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":217,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L217"},"def":{"name":"enable_purge","return_type":"Array(Bool)","visibility":"Public","body":"@enable_purge"}},{"html_id":"enable_ranksay:Array(Bool)-instance-method","name":"enable_ranksay","doc":"A 2-element array, the first element enables the `RanksayCommand` (and all the generated rankname *say commands) and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/RanksayCommand.html\">RanksayCommand</a></code> (and all the generated rankname *say commands) and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":173,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L173"},"def":{"name":"enable_ranksay","return_type":"Array(Bool)","visibility":"Public","body":"@enable_ranksay"}},{"html_id":"enable_remove:Array(Bool)-instance-method","name":"enable_remove","doc":"A 2-element array, the first element enables the `RemoveCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/RemoveCommand.html\">RemoveCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":213,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L213"},"def":{"name":"enable_remove","return_type":"Array(Bool)","visibility":"Public","body":"@enable_remove"}},{"html_id":"enable_reveal:Array(Bool)-instance-method","name":"enable_reveal","doc":"A 2-element array, the first element enables the `RevealCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/RevealCommand.html\">RevealCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":153,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L153"},"def":{"name":"enable_reveal","return_type":"Array(Bool)","visibility":"Public","body":"@enable_reveal"}},{"html_id":"enable_sign:Array(Bool)-instance-method","name":"enable_sign","doc":"A 2-element array, the first element enables the `SignCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/SignCommand.html\">SignCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":161,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L161"},"def":{"name":"enable_sign","return_type":"Array(Bool)","visibility":"Public","body":"@enable_sign"}},{"html_id":"enable_spoiler:Array(Bool)-instance-method","name":"enable_spoiler","doc":"A 2-element array, the first element enables the `SpoilerCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/SpoilerCommand.html\">SpoilerCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":233,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L233"},"def":{"name":"enable_spoiler","return_type":"Array(Bool)","visibility":"Public","body":"@enable_spoiler"}},{"html_id":"enable_start:Array(Bool)-instance-method","name":"enable_start","doc":"A 2-element array, the first element enables the `StartCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/StartCommand.html\">StartCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":125,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L125"},"def":{"name":"enable_start","return_type":"Array(Bool)","visibility":"Public","body":"@enable_start"}},{"html_id":"enable_stats:Array(Bool)-instance-method","name":"enable_stats","doc":"A 2-element array, the first element enables the `StatsCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/StatsCommand.html\">StatsCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":249,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L249"},"def":{"name":"enable_stats","return_type":"Array(Bool)","visibility":"Public","body":"@enable_stats"}},{"html_id":"enable_stop:Array(Bool)-instance-method","name":"enable_stop","doc":"A 2-element array, the first element enables the `StopCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/StopCommand.html\">StopCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":129,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L129"},"def":{"name":"enable_stop","return_type":"Array(Bool)","visibility":"Public","body":"@enable_stop"}},{"html_id":"enable_toggle_debug:Array(Bool)-instance-method","name":"enable_toggle_debug","doc":"A 2-element array, the first element enables the `ToggleDebugCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/ToggleDebugCommand.html\">ToggleDebugCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":149,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L149"},"def":{"name":"enable_toggle_debug","return_type":"Array(Bool)","visibility":"Public","body":"@enable_toggle_debug"}},{"html_id":"enable_toggle_karma:Array(Bool)-instance-method","name":"enable_toggle_karma","doc":"A 2-element array, the first element enables the `ToggleKarmaCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/ToggleKarmaCommand.html\">ToggleKarmaCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":145,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L145"},"def":{"name":"enable_toggle_karma","return_type":"Array(Bool)","visibility":"Public","body":"@enable_toggle_karma"}},{"html_id":"enable_tripcode:Array(Bool)-instance-method","name":"enable_tripcode","doc":"A 2-element array, the first element enables the `TripcodeCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/TripcodeCommand.html\">TripcodeCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":157,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L157"},"def":{"name":"enable_tripcode","return_type":"Array(Bool)","visibility":"Public","body":"@enable_tripcode"}},{"html_id":"enable_tripsign:Array(Bool)-instance-method","name":"enable_tripsign","doc":"A 2-element array, the first element enables the `TripcodeSignCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/TripcodeSignCommand.html\">TripcodeSignCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":165,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L165"},"def":{"name":"enable_tripsign","return_type":"Array(Bool)","visibility":"Public","body":"@enable_tripsign"}},{"html_id":"enable_unblacklist:Array(Bool)-instance-method","name":"enable_unblacklist","doc":"A 2-element array, the first element enables the `UnblacklistCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/UnblacklistCommand.html\">UnblacklistCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":225,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L225"},"def":{"name":"enable_unblacklist","return_type":"Array(Bool)","visibility":"Public","body":"@enable_unblacklist"}},{"html_id":"enable_uncooldown:Array(Bool)-instance-method","name":"enable_uncooldown","doc":"A 2-element array, the first element enables the `UncooldownCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/UncooldownCommand.html\">UncooldownCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":209,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L209"},"def":{"name":"enable_uncooldown","return_type":"Array(Bool)","visibility":"Public","body":"@enable_uncooldown"}},{"html_id":"enable_unpin:Array(Bool)-instance-method","name":"enable_unpin","doc":"A 2-element array, the first element enables the `UnpinCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/UnpinCommand.html\">UnpinCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":245,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L245"},"def":{"name":"enable_unpin","return_type":"Array(Bool)","visibility":"Public","body":"@enable_unpin"}},{"html_id":"enable_upvote:Array(Bool)-instance-method","name":"enable_upvote","doc":"A 2-element array, the first element enables the `UpvoteHandler`, the second does nothing for now as this command is not a `CommandHandler`","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/UpvoteHandler.html\">UpvoteHandler</a></code>, the second does nothing for now as this command is not a <code><a href=\"../PrivateParlorXT/CommandHandler.html\">CommandHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":185,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L185"},"def":{"name":"enable_upvote","return_type":"Array(Bool)","visibility":"Public","body":"@enable_upvote"}},{"html_id":"enable_users:Array(Bool)-instance-method","name":"enable_users","doc":"A 2-element array, the first element enables the `UsersCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/UsersCommand.html\">UsersCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":137,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L137"},"def":{"name":"enable_users","return_type":"Array(Bool)","visibility":"Public","body":"@enable_users"}},{"html_id":"enable_version:Array(Bool)-instance-method","name":"enable_version","doc":"A 2-element array, the first element enables the `VersionCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/VersionCommand.html\">VersionCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":141,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L141"},"def":{"name":"enable_version","return_type":"Array(Bool)","visibility":"Public","body":"@enable_version"}},{"html_id":"enable_warn:Array(Bool)-instance-method","name":"enable_warn","doc":"A 2-element array, the first element enables the `WarnCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/WarnCommand.html\">WarnCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":201,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L201"},"def":{"name":"enable_warn","return_type":"Array(Bool)","visibility":"Public","body":"@enable_warn"}},{"html_id":"enable_whitelist:Array(Bool)-instance-method","name":"enable_whitelist","doc":"A 2-element array, the first element enables the `WhitelistCommand` and the second registers its `CommandDescriptions` with @BotFather","summary":"<p>A 2-element array, the first element enables the <code><a href=\"../PrivateParlorXT/WhitelistCommand.html\">WhitelistCommand</a></code> and the second registers its <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> with @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":229,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L229"},"def":{"name":"enable_whitelist","return_type":"Array(Bool)","visibility":"Public","body":"@enable_whitelist"}},{"html_id":"entities:Array(String)-instance-method","name":"entities","doc":"An array of `String` referring to entity types that will be removed from all messages","summary":"<p>An array of <code>String</code> referring to entity types that will be removed from all messages</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":384,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L384"},"def":{"name":"entities","return_type":"Array(String)","visibility":"Public","body":"@entities"}},{"html_id":"entities=(entities:Array(String))-instance-method","name":"entities=","doc":"An array of `String` referring to entity types that will be removed from all messages","summary":"<p>An array of <code>String</code> referring to entity types that will be removed from all messages</p>","abstract":false,"args":[{"name":"entities","external_name":"entities","restriction":"Array(String)"}],"args_string":"(entities : Array(String))","args_html":"(entities : Array(String))","location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":384,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L384"},"def":{"name":"entities=","args":[{"name":"entities","external_name":"entities","restriction":"Array(String)"}],"visibility":"Public","body":"@entities = entities"}},{"html_id":"flag_signatures:Bool|Nil-instance-method","name":"flag_signatures","doc":"Whether or not to replace tripcodes with a flag or emoji signature","summary":"<p>Whether or not to replace tripcodes with a flag or emoji signature</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":356,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L356"},"def":{"name":"flag_signatures","return_type":"Bool | ::Nil","visibility":"Public","body":"@flag_signatures"}},{"html_id":"inactivity_limit:Int32-instance-method","name":"inactivity_limit","doc":"The limit (in days) for which a user can be inactive and still receive messages","summary":"<p>The limit (in days) for which a user can be inactive and still receive messages</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":61,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L61"},"def":{"name":"inactivity_limit","return_type":"Int32","visibility":"Public","body":"@inactivity_limit"}},{"html_id":"intermediary_linked_network:Hash(String,String)|String|Nil-instance-method","name":"intermediary_linked_network","doc":"A `String` or hash of linked network strings deserialized from the config file that will be processed and used to set `linked_network`","summary":"<p>A <code>String</code> or hash of linked network strings deserialized from the config file that will be processed and used to set <code><a href=\"../PrivateParlorXT/Config.html#linked_network%3AHash%28String%2CString%29-instance-method\">#linked_network</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":65,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L65"},"def":{"name":"intermediary_linked_network","return_type":"Hash(String, String) | String | Nil","visibility":"Public","body":"@intermediary_linked_network"}},{"html_id":"intermediate_karma_levels:Hash(Int32,String)-instance-method","name":"intermediate_karma_levels","doc":"A hash of `Int32` => `String` mapping the start of a karma level to the name of that level, which will be processed into ranges for `karma_levels`","summary":"<p>A hash of <code>Int32</code> =&gt; <code>String</code> mapping the start of a karma level to the name of that level, which will be processed into ranges for <code><a href=\"../PrivateParlorXT/Config.html#karma_levels%3AHash%28Range%28Int32%2CInt32%29%2CString%29-instance-method\">#karma_levels</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":87,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L87"},"def":{"name":"intermediate_karma_levels","return_type":"Hash(Int32, String)","visibility":"Public","body":"@intermediate_karma_levels"}},{"html_id":"intermediate_valid_codepoints:Array(Array(Int32))|Nil-instance-method","name":"intermediate_valid_codepoints","doc":"An array of, what should be, 2-element arrays containing the start and end of codepoint ranges that are valid for ROBOT9000 text checks, which will be processed into ranges for `valid_codepoints`","summary":"<p>An array of, what should be, 2-element arrays containing the start and end of codepoint ranges that are valid for ROBOT9000 text checks, which will be processed into ranges for <code><a href=\"../PrivateParlorXT/Config.html#valid_codepoints%3AArray%28Range%28Int32%2CInt32%29%29-instance-method\">#valid_codepoints</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":115,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L115"},"def":{"name":"intermediate_valid_codepoints","return_type":"Array(Array(Int32)) | ::Nil","visibility":"Public","body":"@intermediate_valid_codepoints"}},{"html_id":"karma_economy:KarmaHandler|Nil-instance-method","name":"karma_economy","doc":"A `KarmaHandler`, which manages what a user can post based on how much karma he has","summary":"<p>A <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code>, which manages what a user can post based on how much karma he has</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":332,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L332"},"def":{"name":"karma_economy","return_type":"KarmaHandler | ::Nil","visibility":"Public","body":"@karma_economy"}},{"html_id":"karma_levels:Hash(Range(Int32,Int32),String)-instance-method","name":"karma_levels","doc":"A hash of `Range(Int32, Int32)` => `String` mapping a range of possible `User` karma values to the name of the karma level that is defined by that range","summary":"<p>A hash of <code>Range(Int32, Int32)</code> =&gt; <code>String</code> mapping a range of possible <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> karma values to the name of the karma level that is defined by that range</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":91,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L91"},"def":{"name":"karma_levels","return_type":"Hash(Range(Int32, Int32), String)","visibility":"Public","body":"@karma_levels"}},{"html_id":"karma_levels=(karma_levels:Hash(Range(Int32,Int32),String))-instance-method","name":"karma_levels=","doc":"A hash of `Range(Int32, Int32)` => `String` mapping a range of possible `User` karma values to the name of the karma level that is defined by that range","summary":"<p>A hash of <code>Range(Int32, Int32)</code> =&gt; <code>String</code> mapping a range of possible <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> karma values to the name of the karma level that is defined by that range</p>","abstract":false,"args":[{"name":"karma_levels","external_name":"karma_levels","restriction":"Hash(Range(Int32, Int32), String)"}],"args_string":"(karma_levels : Hash(Range(Int32, Int32), String))","args_html":"(karma_levels : Hash(Range(Int32, Int32), String))","location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":91,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L91"},"def":{"name":"karma_levels=","args":[{"name":"karma_levels","external_name":"karma_levels","restriction":"Hash(Range(Int32, Int32), String)"}],"visibility":"Public","body":"@karma_levels = karma_levels"}},{"html_id":"karma_reasons:Bool|Nil-instance-method","name":"karma_reasons","doc":"Whether or not to allow users to attach a reason to their upvote/downvote messages","summary":"<p>Whether or not to allow users to attach a reason to their upvote/downvote messages</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":53,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L53"},"def":{"name":"karma_reasons","return_type":"Bool | ::Nil","visibility":"Public","body":"@karma_reasons"}},{"html_id":"linked_network:Hash(String,String)-instance-method","name":"linked_network","doc":"A hash of `String` => `String` mapping the name of a chat to the chat's username","summary":"<p>A hash of <code>String</code> =&gt; <code>String</code> mapping the name of a chat to the chat's username</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":69,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L69"},"def":{"name":"linked_network","return_type":"Hash(String, String)","visibility":"Public","body":"@linked_network"}},{"html_id":"locale:String-instance-method","name":"locale","doc":"The language tag for Private Parlor's language/locale","summary":"<p>The language tag for Private Parlor's language/locale</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":21,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L21"},"def":{"name":"locale","return_type":"String","visibility":"Public","body":"@locale"}},{"html_id":"log_channel:String-instance-method","name":"log_channel","doc":"A Telegram ID of a channel to output bot logs to","summary":"<p>A Telegram ID of a channel to output bot logs to</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":33,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L33"},"def":{"name":"log_channel","return_type":"String","visibility":"Public","body":"@log_channel"}},{"html_id":"log_file:String|Nil-instance-method","name":"log_file","doc":"A file path to an optional log file","summary":"<p>A file path to an optional log file</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":29,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L29"},"def":{"name":"log_file","return_type":"String | ::Nil","visibility":"Public","body":"@log_file"}},{"html_id":"log_level:Log::Severity-instance-method","name":"log_level","doc":"The level of severity for log messages","summary":"<p>The level of severity for log messages</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":25,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L25"},"def":{"name":"log_level","return_type":"Log::Severity","visibility":"Public","body":"@log_level"}},{"html_id":"media_limit_period:Int32-instance-method","name":"media_limit_period","doc":"The duration (in hours) in which new users cannot send media","summary":"<p>The duration (in hours) in which new users cannot send media</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":344,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L344"},"def":{"name":"media_limit_period","return_type":"Int32","visibility":"Public","body":"@media_limit_period"}},{"html_id":"media_spoilers:Bool|Nil-instance-method","name":"media_spoilers","doc":"Whether or not to allow users to send photos, videos, or GIFs with a spoiler overlay","summary":"<p>Whether or not to allow users to send photos, videos, or GIFs with a spoiler overlay</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":45,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L45"},"def":{"name":"media_spoilers","return_type":"Bool | ::Nil","visibility":"Public","body":"@media_spoilers"}},{"html_id":"message_effects:Bool|Nil-instance-method","name":"message_effects","doc":"Whether or not to allow users to attach a message effect to their messages","summary":"<p>Whether or not to allow users to attach a message effect to their messages</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":49,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L49"},"def":{"name":"message_effects","return_type":"Bool | ::Nil","visibility":"Public","body":"@message_effects"}},{"html_id":"message_lifespan:Int32-instance-method","name":"message_lifespan","doc":"The amount of time a message can exist before expiring and being deleted from the cache","summary":"<p>The amount of time a message can exist before expiring and being deleted from the cache</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":37,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L37"},"def":{"name":"message_lifespan","return_type":"Int32","visibility":"Public","body":"@message_lifespan"}},{"html_id":"message_lifespan=(message_lifespan:Int32)-instance-method","name":"message_lifespan=","doc":"The amount of time a message can exist before expiring and being deleted from the cache","summary":"<p>The amount of time a message can exist before expiring and being deleted from the cache</p>","abstract":false,"args":[{"name":"message_lifespan","external_name":"message_lifespan","restriction":"Int32"}],"args_string":"(message_lifespan : Int32)","args_html":"(message_lifespan : Int32)","location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":37,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L37"},"def":{"name":"message_lifespan=","args":[{"name":"message_lifespan","external_name":"message_lifespan","restriction":"Int32"}],"visibility":"Public","body":"@message_lifespan = message_lifespan"}},{"html_id":"pseudonymous:Bool|Nil-instance-method","name":"pseudonymous","doc":"Whether or not to enable pseudonymous mode, which forces the use of tripcodes for all users and automatically prepends messages with the user's tripcode","summary":"<p>Whether or not to enable pseudonymous mode, which forces the use of tripcodes for all users and automatically prepends messages with the user's tripcode</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":352,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L352"},"def":{"name":"pseudonymous","return_type":"Bool | ::Nil","visibility":"Public","body":"@pseudonymous"}},{"html_id":"r9k_cooldown:Int32-instance-method","name":"r9k_cooldown","doc":"Cooldown length (in seconds) for when a user sends an unoriginal message","summary":"<p>Cooldown length (in seconds) for when a user sends an unoriginal message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":107,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L107"},"def":{"name":"r9k_cooldown","return_type":"Int32","visibility":"Public","body":"@r9k_cooldown"}},{"html_id":"r9k_warn:Bool|Nil-instance-method","name":"r9k_warn","doc":"Whether or not to give the user a warning for sending an unoriginal message and cooldown according to the number of warnings","summary":"<p>Whether or not to give the user a warning for sending an unoriginal message and cooldown according to the number of warnings</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":111,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L111"},"def":{"name":"r9k_warn","return_type":"Bool | ::Nil","visibility":"Public","body":"@r9k_warn"}},{"html_id":"ranks:Hash(Int32,Rank)-instance-method","name":"ranks","doc":"A mapping of `Rank` recognized by the bot","summary":"<p>A mapping of <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> recognized by the bot</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":73,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L73"},"def":{"name":"ranks","return_type":"Hash(Int32, Rank)","visibility":"Public","body":"@ranks"}},{"html_id":"ranks=(ranks:Hash(Int32,Rank))-instance-method","name":"ranks=","doc":"A mapping of `Rank` recognized by the bot","summary":"<p>A mapping of <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> recognized by the bot</p>","abstract":false,"args":[{"name":"ranks","external_name":"ranks","restriction":"Hash(Int32, Rank)"}],"args_string":"(ranks : Hash(Int32, Rank))","args_html":"(ranks : Hash(Int32, <a href=\"../PrivateParlorXT/Rank.html\">Rank</a>))","location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":73,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L73"},"def":{"name":"ranks=","args":[{"name":"ranks","external_name":"ranks","restriction":"Hash(Int32, Rank)"}],"visibility":"Public","body":"@ranks = ranks"}},{"html_id":"registration_open:Bool|Nil-instance-method","name":"registration_open","doc":"Whether or not registration is open, allowing new users to join","summary":"<p>Whether or not registration is open, allowing new users to join</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":348,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L348"},"def":{"name":"registration_open","return_type":"Bool | ::Nil","visibility":"Public","body":"@registration_open"}},{"html_id":"regular_forwards:Bool|Nil-instance-method","name":"regular_forwards","doc":"Whether or not to relay forwarded messages as though a `PhotoHandler`, `TextHandler`, or similar `UpdateHandler` got them","summary":"<p>Whether or not to relay forwarded messages as though a <code><a href=\"../PrivateParlorXT/PhotoHandler.html\">PhotoHandler</a></code>, <code><a href=\"../PrivateParlorXT/TextHandler.html\">TextHandler</a></code>, or similar <code><a href=\"../PrivateParlorXT/UpdateHandler.html\">UpdateHandler</a></code> got them</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":57,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L57"},"def":{"name":"regular_forwards","return_type":"Bool | ::Nil","visibility":"Public","body":"@regular_forwards"}},{"html_id":"relay_animation:Bool|Nil-instance-method","name":"relay_animation","doc":"Whether or not to relay animations/GIFs and enable the `AnimationHandler`","summary":"<p>Whether or not to relay animations/GIFs and enable the <code><a href=\"../PrivateParlorXT/AnimationHandler.html\">AnimationHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":264,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L264"},"def":{"name":"relay_animation","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_animation"}},{"html_id":"relay_audio:Bool|Nil-instance-method","name":"relay_audio","doc":"Whether or not to relay audio messages and enable the `AudioHandler`","summary":"<p>Whether or not to relay audio messages and enable the <code><a href=\"../PrivateParlorXT/AudioHandler.html\">AudioHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":268,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L268"},"def":{"name":"relay_audio","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_audio"}},{"html_id":"relay_contact:Bool|Nil-instance-method","name":"relay_contact","doc":"Whether or not to relay contacts and enable the `ContactHandler`","summary":"<p>Whether or not to relay contacts and enable the <code><a href=\"../PrivateParlorXT/ContactHandler.html\">ContactHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":316,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L316"},"def":{"name":"relay_contact","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_contact"}},{"html_id":"relay_document:Bool|Nil-instance-method","name":"relay_document","doc":"Whether or not to relay documents and files and enable the `DocumentHandler`","summary":"<p>Whether or not to relay documents and files and enable the <code><a href=\"../PrivateParlorXT/DocumentHandler.html\">DocumentHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":272,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L272"},"def":{"name":"relay_document","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_document"}},{"html_id":"relay_forwarded_message:Bool|Nil-instance-method","name":"relay_forwarded_message","doc":"Whether or not to relay forwarded messages and enable the `ForwardHandler`","summary":"<p>Whether or not to relay forwarded messages and enable the <code><a href=\"../PrivateParlorXT/ForwardHandler.html\">ForwardHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":300,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L300"},"def":{"name":"relay_forwarded_message","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_forwarded_message"}},{"html_id":"relay_location:Bool|Nil-instance-method","name":"relay_location","doc":"Whether or not to relay location messages and enable the `LocationHandler`","summary":"<p>Whether or not to relay location messages and enable the <code><a href=\"../PrivateParlorXT/LocationHandler.html\">LocationHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":312,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L312"},"def":{"name":"relay_location","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_location"}},{"html_id":"relay_media_group:Bool|Nil-instance-method","name":"relay_media_group","doc":"Whether or not to relay albums and enable the `AlbumHandler`","summary":"<p>Whether or not to relay albums and enable the <code><a href=\"../PrivateParlorXT/AlbumHandler.html\">AlbumHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":292,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L292"},"def":{"name":"relay_media_group","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_media_group"}},{"html_id":"relay_photo:Bool|Nil-instance-method","name":"relay_photo","doc":"Whether or not to relay photos and enable the `PhotoHandler`","summary":"<p>Whether or not to relay photos and enable the <code><a href=\"../PrivateParlorXT/PhotoHandler.html\">PhotoHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":288,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L288"},"def":{"name":"relay_photo","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_photo"}},{"html_id":"relay_poll:Bool|Nil-instance-method","name":"relay_poll","doc":"Whether or not to relay polls and enable the `PollHandler`","summary":"<p>Whether or not to relay polls and enable the <code><a href=\"../PrivateParlorXT/PollHandler.html\">PollHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":296,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L296"},"def":{"name":"relay_poll","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_poll"}},{"html_id":"relay_sticker:Bool|Nil-instance-method","name":"relay_sticker","doc":"Whether or not to relay stickers and enable the `StickerHandler`","summary":"<p>Whether or not to relay stickers and enable the <code><a href=\"../PrivateParlorXT/StickerHandler.html\">StickerHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":304,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L304"},"def":{"name":"relay_sticker","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_sticker"}},{"html_id":"relay_text:Bool|Nil-instance-method","name":"relay_text","doc":"Whether or not to relay text messages and enable the `TextHandler`","summary":"<p>Whether or not to relay text messages and enable the <code><a href=\"../PrivateParlorXT/TextHandler.html\">TextHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":260,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L260"},"def":{"name":"relay_text","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_text"}},{"html_id":"relay_venue:Bool|Nil-instance-method","name":"relay_venue","doc":"Whether or not to relay venues and enable the `VenueHandler`","summary":"<p>Whether or not to relay venues and enable the <code><a href=\"../PrivateParlorXT/VenueHandler.html\">VenueHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":308,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L308"},"def":{"name":"relay_venue","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_venue"}},{"html_id":"relay_video:Bool|Nil-instance-method","name":"relay_video","doc":"Whether or not to relay videos and enable the `VideoHandler`","summary":"<p>Whether or not to relay videos and enable the <code><a href=\"../PrivateParlorXT/VideoHandler.html\">VideoHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":276,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L276"},"def":{"name":"relay_video","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_video"}},{"html_id":"relay_video_note:Bool|Nil-instance-method","name":"relay_video_note","doc":"Whether or not to relay video note messages and enable the `VideoNoteHandler`","summary":"<p>Whether or not to relay video note messages and enable the <code><a href=\"../PrivateParlorXT/VideoNoteHandler.html\">VideoNoteHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":280,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L280"},"def":{"name":"relay_video_note","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_video_note"}},{"html_id":"relay_voice:Bool|Nil-instance-method","name":"relay_voice","doc":"Whether or not to relay voice messages and enable the `VoiceHandler`","summary":"<p>Whether or not to relay voice messages and enable the <code><a href=\"../PrivateParlorXT/VoiceHandler.html\">VoiceHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":284,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L284"},"def":{"name":"relay_voice","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_voice"}},{"html_id":"salt:String-instance-method","name":"salt","doc":"A `String` used to generate secure tripcodes","summary":"<p>A <code>String</code> used to generate secure tripcodes</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":388,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L388"},"def":{"name":"salt","return_type":"String","visibility":"Public","body":"@salt"}},{"html_id":"sign_limit_interval:Int32-instance-method","name":"sign_limit_interval","doc":"Limit a users' usage of `SignCommand` and `TripodeSignCommand` for once every interval (in seconds)","summary":"<p>Limit a users' usage of <code><a href=\"../PrivateParlorXT/SignCommand.html\">SignCommand</a></code> and <code>TripodeSignCommand</code> for once every interval (in seconds)</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":368,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L368"},"def":{"name":"sign_limit_interval","return_type":"Int32","visibility":"Public","body":"@sign_limit_interval"}},{"html_id":"smileys:Array(String)-instance-method","name":"smileys","doc":"An array of emoticons shown in `InfoCommand` messages that start out happy and get sadder based on the number of user warnings","summary":"<p>An array of emoticons shown in <code><a href=\"../PrivateParlorXT/InfoCommand.html\">InfoCommand</a></code> messages that start out happy and get sadder based on the number of user warnings</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":380,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L380"},"def":{"name":"smileys","return_type":"Array(String)","visibility":"Public","body":"@smileys"}},{"html_id":"smileys=(smileys:Array(String))-instance-method","name":"smileys=","doc":"An array of emoticons shown in `InfoCommand` messages that start out happy and get sadder based on the number of user warnings","summary":"<p>An array of emoticons shown in <code><a href=\"../PrivateParlorXT/InfoCommand.html\">InfoCommand</a></code> messages that start out happy and get sadder based on the number of user warnings</p>","abstract":false,"args":[{"name":"smileys","external_name":"smileys","restriction":"Array(String)"}],"args_string":"(smileys : Array(String))","args_html":"(smileys : Array(String))","location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":380,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L380"},"def":{"name":"smileys=","args":[{"name":"smileys","external_name":"smileys","restriction":"Array(String)"}],"visibility":"Public","body":"@smileys = smileys"}},{"html_id":"spam_handler:SpamHandler-instance-method","name":"spam_handler","doc":"A `SpamHandler`, which manages how much a user can post within a duration of time","summary":"<p>A <code><a href=\"../PrivateParlorXT/SpamHandler.html\">SpamHandler</a></code>, which manages how much a user can post within a duration of time</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":340,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L340"},"def":{"name":"spam_handler","return_type":"SpamHandler","visibility":"Public","body":"@spam_handler"}},{"html_id":"spam_interval:Int32-instance-method","name":"spam_interval","doc":"The amount of time (in seconds) between spam score reductions","summary":"<p>The amount of time (in seconds) between spam score reductions</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":336,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L336"},"def":{"name":"spam_interval","return_type":"Int32","visibility":"Public","body":"@spam_interval"}},{"html_id":"statistics:Bool|Nil-instance-method","name":"statistics","doc":"Whether or not to enable the recording of message statistics to be viewed later using the `StatsCommand`","summary":"<p>Whether or not to enable the recording of message statistics to be viewed later using the <code><a href=\"../PrivateParlorXT/StatsCommand.html\">StatsCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":360,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L360"},"def":{"name":"statistics","return_type":"Bool | ::Nil","visibility":"Public","body":"@statistics"}},{"html_id":"toggle_r9k_forwards:Bool|Nil-instance-method","name":"toggle_r9k_forwards","doc":"Toggle ROBOT9000 for forwards; checks the text and media for forwards if both/either `toggle_r9k_text` and/or `toggle_r9k_media` are enabled","summary":"<p>Toggle ROBOT9000 for forwards; checks the text and media for forwards if both/either <code><a href=\"../PrivateParlorXT/Config.html#toggle_r9k_text%3ABool%7CNil-instance-method\">#toggle_r9k_text</a></code> and/or <code><a href=\"../PrivateParlorXT/Config.html#toggle_r9k_media%3ABool%7CNil-instance-method\">#toggle_r9k_media</a></code> are enabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":103,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L103"},"def":{"name":"toggle_r9k_forwards","return_type":"Bool | ::Nil","visibility":"Public","body":"@toggle_r9k_forwards"}},{"html_id":"toggle_r9k_media:Bool|Nil-instance-method","name":"toggle_r9k_media","doc":"Toggle ROBOT9000 for media","summary":"<p>Toggle ROBOT9000 for media</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":99,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L99"},"def":{"name":"toggle_r9k_media","return_type":"Bool | ::Nil","visibility":"Public","body":"@toggle_r9k_media"}},{"html_id":"toggle_r9k_text:Bool|Nil-instance-method","name":"toggle_r9k_text","doc":"Toggle ROBOT9000 for text and captions","summary":"<p>Toggle ROBOT9000 for text and captions</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":95,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L95"},"def":{"name":"toggle_r9k_text","return_type":"Bool | ::Nil","visibility":"Public","body":"@toggle_r9k_text"}},{"html_id":"token:String-instance-method","name":"token","doc":"The API token obtained from @BotFather","summary":"<p>The API token obtained from @BotFather</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L13"},"def":{"name":"token","return_type":"String","visibility":"Public","body":"@token"}},{"html_id":"upvote_limit_interval:Int32-instance-method","name":"upvote_limit_interval","doc":"Limit a user's usage of `UpvoteHandler` for once every interval (in seconds)","summary":"<p>Limit a user's usage of <code><a href=\"../PrivateParlorXT/UpvoteHandler.html\">UpvoteHandler</a></code> for once every interval (in seconds)</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":372,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L372"},"def":{"name":"upvote_limit_interval","return_type":"Int32","visibility":"Public","body":"@upvote_limit_interval"}},{"html_id":"valid_codepoints:Array(Range(Int32,Int32))-instance-method","name":"valid_codepoints","doc":"An array of `Range(Int32, Int32)` containing valid codepoints for ROBOT9000 text checks; characters in text that lie outside these ranges will signal that the text is invalid. Defaults to the ASCII character range","summary":"<p>An array of <code>Range(Int32, Int32)</code> containing valid codepoints for ROBOT9000 text checks; characters in text that lie outside these ranges will signal that the text is invalid.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":119,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L119"},"def":{"name":"valid_codepoints","return_type":"Array(Range(Int32, Int32))","visibility":"Public","body":"@valid_codepoints"}},{"html_id":"valid_codepoints=(valid_codepoints:Array(Range(Int32,Int32)))-instance-method","name":"valid_codepoints=","doc":"An array of `Range(Int32, Int32)` containing valid codepoints for ROBOT9000 text checks; characters in text that lie outside these ranges will signal that the text is invalid. Defaults to the ASCII character range","summary":"<p>An array of <code>Range(Int32, Int32)</code> containing valid codepoints for ROBOT9000 text checks; characters in text that lie outside these ranges will signal that the text is invalid.</p>","abstract":false,"args":[{"name":"valid_codepoints","external_name":"valid_codepoints","restriction":"Array(Range(Int32, Int32))"}],"args_string":"(valid_codepoints : Array(Range(Int32, Int32)))","args_html":"(valid_codepoints : Array(Range(Int32, Int32)))","location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":119,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L119"},"def":{"name":"valid_codepoints=","args":[{"name":"valid_codepoints","external_name":"valid_codepoints","restriction":"Array(Range(Int32, Int32))"}],"visibility":"Public","body":"@valid_codepoints = valid_codepoints"}},{"html_id":"warn_deduction:Int32-instance-method","name":"warn_deduction","doc":"The amount of karma to remove from a user when receiving a cooldown","summary":"<p>The amount of karma to remove from a user when receiving a cooldown</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":328,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L328"},"def":{"name":"warn_deduction","return_type":"Int32","visibility":"Public","body":"@warn_deduction"}},{"html_id":"warn_lifespan:Int32-instance-method","name":"warn_lifespan","doc":"The length of time (in hours) until a warning expires","summary":"<p>The length of time (in hours) until a warning expires</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/config.cr","line_number":324,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/config.cr#L324"},"def":{"name":"warn_lifespan","return_type":"Int32","visibility":"Public","body":"@warn_lifespan"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/ContactHandler","path":"PrivateParlorXT/ContactHandler.html","kind":"class","full_name":"PrivateParlorXT::ContactHandler","name":"ContactHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/contact_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/contact_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for contact message updates","summary":"<p>A handler for contact message updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the contact message meets requirements and relays it","summary":"<p>Checks if the contact message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/contact_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/contact_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif authorized?(user, message, :Contact, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif contact = message.contact\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Contacts, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_contact(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, replies: reply_messages, effect: services.config.allow_effects ? message.effect_id : nil), contact)\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming contacts\n\nReturns `true` if the user is spamming contacts, `false` otherwise","summary":"<p>Checks if the user is spamming contacts</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/contact_handler.cr","line_number":50,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/contact_handler.cr#L50"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_contact?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a contacts message","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a contacts message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/contact_handler.cr","line_number":93,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/contact_handler.cr#L93"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_contact >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_contact)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a contacts when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for contacts is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a contacts when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/contact_handler.cr","line_number":70,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/contact_handler.cr#L70"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_contact >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_contact\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_contact.to_s, \"type\" => \"contact\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Database","path":"PrivateParlorXT/Database.html","kind":"class","full_name":"PrivateParlorXT::Database","name":"Database","abstract":true,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/database/database.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L6"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"private-parlor-xt/PrivateParlorXT/SQLiteDatabase","kind":"class","full_name":"PrivateParlorXT::SQLiteDatabase","name":"SQLiteDatabase"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A base class for `Database` implementations, used for storing and retrieving data about users","summary":"<p>A base class for <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code> implementations, used for storing and retrieving data about users</p>","constructors":[{"html_id":"new-class-method","name":"new","doc":"Creates an instance of `Database`","summary":"<p>Creates an instance of <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L8"},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"active_users(exclude:UserID):Array(UserID)-instance-method","name":"active_users","doc":"Queries the database for the most active users, ordered by highest ranking\nusers first, then most active users.\n\nUse this to exclude a user from the result (i.e., when a user does not have\ndebug mode enabled)","summary":"<p>Queries the database for the most active users, ordered by highest ranking users first, then most active users.</p>","abstract":true,"args":[{"name":"exclude","external_name":"exclude","restriction":"UserID"}],"args_string":"(exclude : UserID) : Array(UserID)","args_html":"(exclude : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Array(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>)","location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":62,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L62"},"def":{"name":"active_users","args":[{"name":"exclude","external_name":"exclude","restriction":"UserID"}],"return_type":"Array(UserID)","visibility":"Public","body":""}},{"html_id":"active_users:Array(UserID)-instance-method","name":"active_users","doc":"Queries the database for the most active users, ordered by highest ranking\nusers first, then most active users.","summary":"<p>Queries the database for the most active users, ordered by highest ranking users first, then most active users.</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":56,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L56"},"def":{"name":"active_users","return_type":"Array(UserID)","visibility":"Public","body":""}},{"html_id":"add_user(id:UserID,username:String|Nil,realname:String,rank:Int32):User|Nil-instance-method","name":"add_user","doc":"Adds a user to the database","summary":"<p>Adds a user to the database</p>","abstract":true,"args":[{"name":"id","external_name":"id","restriction":"UserID"},{"name":"username","external_name":"username","restriction":"String | ::Nil"},{"name":"realname","external_name":"realname","restriction":"String"},{"name":"rank","external_name":"rank","restriction":"Int32"}],"args_string":"(id : UserID, username : String | Nil, realname : String, rank : Int32) : User | Nil","args_html":"(id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, username : String | Nil, realname : String, rank : Int32) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":65,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L65"},"def":{"name":"add_user","args":[{"name":"id","external_name":"id","restriction":"UserID"},{"name":"username","external_name":"username","restriction":"String | ::Nil"},{"name":"realname","external_name":"realname","restriction":"String"},{"name":"rank","external_name":"rank","restriction":"Int32"}],"return_type":"User | ::Nil","visibility":"Public","body":""}},{"html_id":"blacklisted_users(time_limit:Time::Span):Array(User)-instance-method","name":"blacklisted_users","doc":"Get an array of recently blacklisted users","summary":"<p>Get an array of recently blacklisted users</p>","abstract":true,"args":[{"name":"time_limit","external_name":"time_limit","restriction":"Time::Span"}],"args_string":"(time_limit : Time::Span) : Array(User)","args_html":"(time_limit : Time::Span) : Array(<a href=\"../PrivateParlorXT/User.html\">User</a>)","location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":26,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L26"},"def":{"name":"blacklisted_users","args":[{"name":"time_limit","external_name":"time_limit","restriction":"Time::Span"}],"return_type":"Array(User)","visibility":"Public","body":""}},{"html_id":"blacklisted_users:Array(User)-instance-method","name":"blacklisted_users","doc":"Get an array of blacklisted users","summary":"<p>Get an array of blacklisted users</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":23,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L23"},"def":{"name":"blacklisted_users","return_type":"Array(User)","visibility":"Public","body":""}},{"html_id":"close-instance-method","name":"close","doc":"Close connection to the `Database`","summary":"<p>Close connection to the <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":12,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L12"},"def":{"name":"close","visibility":"Public","body":""}},{"html_id":"expire_warnings(warn_lifespan:Time::Span):Nil-instance-method","name":"expire_warnings","doc":"Queries the database for users with warnings and removes a warning\n\nIf the user still has warnings, the next time a warning is removed should\nbe the current time plus the value of *warn_lifespan*\n\nThis should be invoked as a recurring task","summary":"<p>Queries the database for users with warnings and removes a warning</p>","abstract":true,"args":[{"name":"warn_lifespan","external_name":"warn_lifespan","restriction":"Time::Span"}],"args_string":"(warn_lifespan : Time::Span) : Nil","args_html":"(warn_lifespan : Time::Span) : Nil","location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":80,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L80"},"def":{"name":"expire_warnings","args":[{"name":"warn_lifespan","external_name":"warn_lifespan","restriction":"Time::Span"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"get_user(id:UserID|Nil):User|Nil-instance-method","name":"get_user","doc":"Get user by `UserID`","summary":"<p>Get user by <code><a href=\"../PrivateParlorXT/UserID.html\">UserID</a></code></p>","abstract":true,"args":[{"name":"id","external_name":"id","restriction":"UserID | ::Nil"}],"args_string":"(id : UserID | Nil) : User | Nil","args_html":"(id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a> | Nil) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L16"},"def":{"name":"get_user","args":[{"name":"id","external_name":"id","restriction":"UserID | ::Nil"}],"return_type":"User | ::Nil","visibility":"Public","body":""}},{"html_id":"get_user_by_arg(arg:String):User|Nil-instance-method","name":"get_user_by_arg","doc":"Get user by a given arg, calling the appropriate function","summary":"<p>Get user by a given arg, calling the appropriate function</p>","abstract":false,"args":[{"name":"arg","external_name":"arg","restriction":"String"}],"args_string":"(arg : String) : User | Nil","args_html":"(arg : String) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":44,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L44"},"def":{"name":"get_user_by_arg","args":[{"name":"arg","external_name":"arg","restriction":"String"}],"return_type":"User | ::Nil","visibility":"Public","body":"if arg.size == 4\n  get_user_by_oid(arg)\nelse\n  if (val = arg.to_i64?) && (arg.matches?(/[0-9]{5,}/))\n    get_user(val)\n  else\n    get_user_by_name(arg)\n  end\nend"}},{"html_id":"get_user_by_name(username:String):User|Nil-instance-method","name":"get_user_by_name","doc":"Get user by username","summary":"<p>Get user by username</p>","abstract":true,"args":[{"name":"username","external_name":"username","restriction":"String"}],"args_string":"(username : String) : User | Nil","args_html":"(username : String) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":38,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L38"},"def":{"name":"get_user_by_name","args":[{"name":"username","external_name":"username","restriction":"String"}],"return_type":"User | ::Nil","visibility":"Public","body":""}},{"html_id":"get_user_by_oid(oid:String):User|Nil-instance-method","name":"get_user_by_oid","doc":"Get user by a four-digit obfuscated ID","summary":"<p>Get user by a four-digit obfuscated ID</p>","abstract":true,"args":[{"name":"oid","external_name":"oid","restriction":"String"}],"args_string":"(oid : String) : User | Nil","args_html":"(oid : String) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":41,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L41"},"def":{"name":"get_user_by_oid","args":[{"name":"oid","external_name":"oid","restriction":"String"}],"return_type":"User | ::Nil","visibility":"Public","body":""}},{"html_id":"inactive_users(time_limit:Time::Span):Array(User)|Nil-instance-method","name":"inactive_users","doc":"Get users that have not been active within a given time limit","summary":"<p>Get users that have not been active within a given time limit</p>","abstract":true,"args":[{"name":"time_limit","external_name":"time_limit","restriction":"Time::Span"}],"args_string":"(time_limit : Time::Span) : Array(User) | Nil","args_html":"(time_limit : Time::Span) : Array(<a href=\"../PrivateParlorXT/User.html\">User</a>) | Nil","location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":35,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L35"},"def":{"name":"inactive_users","args":[{"name":"time_limit","external_name":"time_limit","restriction":"Time::Span"}],"return_type":"Array(User) | ::Nil","visibility":"Public","body":""}},{"html_id":"invalid_rank_users(valid_ranks:Array(Int32)):Array(User)|Nil-instance-method","name":"invalid_rank_users","doc":"Get an array of users whose ranks are currently invalid","summary":"<p>Get an array of users whose ranks are currently invalid</p>","abstract":true,"args":[{"name":"valid_ranks","external_name":"valid_ranks","restriction":"Array(Int32)"}],"args_string":"(valid_ranks : Array(Int32)) : Array(User) | Nil","args_html":"(valid_ranks : Array(Int32)) : Array(<a href=\"../PrivateParlorXT/User.html\">User</a>) | Nil","location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":32,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L32"},"def":{"name":"invalid_rank_users","args":[{"name":"valid_ranks","external_name":"valid_ranks","restriction":"Array(Int32)"}],"return_type":"Array(User) | ::Nil","visibility":"Public","body":""}},{"html_id":"motd:String|Nil-instance-method","name":"motd","doc":"Gets the MOTD/rules, if they exist","summary":"<p>Gets the MOTD/rules, if they exist</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":86,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L86"},"def":{"name":"motd","return_type":"String | ::Nil","visibility":"Public","body":""}},{"html_id":"no_users?:Bool|Nil-instance-method","name":"no_users?","doc":"Returns true if there are no users in the database\nFalse otherwise","summary":"<p>Returns true if there are no users in the database False otherwise</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":72,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L72"},"def":{"name":"no_users?","return_type":"Bool | ::Nil","visibility":"Public","body":""}},{"html_id":"set_motd(text:String):Nil-instance-method","name":"set_motd","doc":"Sets the MOTD/rules to the given string","summary":"<p>Sets the MOTD/rules to the given string</p>","abstract":true,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Nil","args_html":"(text : String) : Nil","location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":83,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L83"},"def":{"name":"set_motd","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"update_user(user:User):Nil-instance-method","name":"update_user","doc":"Updates a user with new data","summary":"<p>Updates a user with new data</p>","abstract":true,"args":[{"name":"user","external_name":"user","restriction":"User"}],"args_string":"(user : User) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>) : Nil","location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":68,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L68"},"def":{"name":"update_user","args":[{"name":"user","external_name":"user","restriction":"User"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"user_counts:NamedTuple(total:Int32,left:Int32,blacklisted:Int32)-instance-method","name":"user_counts","doc":"Get the total count of users, users that have stopped the bot, and\nusers that are blacklisted","summary":"<p>Get the total count of users, users that have stopped the bot, and users that are blacklisted</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":20,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L20"},"def":{"name":"user_counts","return_type":"NamedTuple(total: Int32, left: Int32, blacklisted: Int32)","visibility":"Public","body":""}},{"html_id":"warned_users:Array(User)|Nil-instance-method","name":"warned_users","doc":"Get an array of warned users","summary":"<p>Get an array of warned users</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/database/database.cr","line_number":29,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/database.cr#L29"},"def":{"name":"warned_users","return_type":"Array(User) | ::Nil","visibility":"Public","body":""}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/DeleteCommand","path":"PrivateParlorXT/DeleteCommand.html","kind":"class","full_name":"PrivateParlorXT::DeleteCommand","name":"DeleteCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/delete_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/delete_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to delete a message and give its sender a cooldown and warning","summary":"<p>A command used to delete a message and give its sender a cooldown and warning</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Deletes the reply of the given *message* for everybody and gives a cooldown and warning to the user who sent it, if the *message* meets requirements","summary":"<p>Deletes the reply of the given <em>message</em> for everybody and gives a cooldown and warning to the user who sent it, if the <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/delete_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/delete_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Delete, services)\nelse\n  return\nend\nif reply = reply_message(user, message, services)\nelse\n  return\nend\nif reply_user = reply_user(user, reply, services)\nelse\n  return\nend\nupdate_user_activity(user, services)\noriginal_message = delete_messages(reply.message_id.to_i64, reply_user.id, reply_user.debug_enabled, services)\nduration = reply_user.cooldown(services.config.cooldown_base)\nreply_user.warn(services.config.warn_lifespan)\nreply_user.decrement_karma(services.config.warn_deduction)\nservices.database.update_user(reply_user)\nreason = Format.get_arg(message.text)\ncooldown_until = Format.time_span(duration, services.locale)\nresponse = Format.substitute_reply(services.replies.message_deleted, {\"reason\" => Format.reason(reason, services.replies), \"duration\" => cooldown_until})\nlog = Format.substitute_message(services.logs.message_deleted, {\"id\" => user.id.to_s, \"name\" => user.formatted_name, \"msid\" => original_message.to_s, \"oid\" => reply_user.obfuscated_id, \"duration\" => cooldown_until, \"reason\" => Format.reason_log(reason, services.logs)})\nif original_message\n  original_message = ReplyParameters.new(original_message)\nend\nservices.relay.send_to_user(original_message, reply_user.id, response)\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.success)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/DemoteCommand","path":"PrivateParlorXT/DemoteCommand.html","kind":"class","full_name":"PrivateParlorXT::DemoteCommand","name":"DemoteCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/demote_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/demote_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to demote a user to the default rank or a given rank","summary":"<p>A command used to demote a user to the default rank or a given rank</p>","instance_methods":[{"html_id":"demote_from_args(text:String|Nil,user:User,message:MessageID,services:Services):Nil-instance-method","name":"demote_from_args","doc":"Demotes a user given in the *text* to the default rank if only one argument (the user's identifier) was given,\nor demotes to the given rank if two arguments (the user's identifier and name/value of rank) was given","summary":"<p>Demotes a user given in the <em>text</em> to the default rank if only one argument (the user's identifier) was given, or demotes to the given rank if two arguments (the user's identifier and name/value of rank) was given</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(text : String | Nil, user : User, message : MessageID, services : Services) : Nil","args_html":"(text : String | Nil, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/demote_command.cr","line_number":62,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/demote_command.cr#L62"},"def":{"name":"demote_from_args","args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if (args = Format.get_args(text, count: 2)) && args.size > 0\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.missing_args)\nend\nif args.size == 1\n  tuple = {services.config.default_rank, services.access.ranks[services.config.default_rank]}\nelse\n  if args.size == 2\n    tuple = services.access.find_rank(args[1].downcase, args[1].to_i?)\n  end\nend\nif tuple\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, Format.substitute_reply(services.replies.no_rank_found, {\"ranks\" => services.access.rank_names(limit: user.rank).to_s}))\nend\nif demoted_user = services.database.get_user_by_arg(args[0])\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.no_user_found)\nend\nif services.access.can_demote?(tuple[0], user.rank, demoted_user.rank)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.fail)\nend\nupdate_user_activity(user, services)\ndemoted_user.set_rank(tuple[0])\nservices.database.update_user(demoted_user)\nlog = Format.substitute_message(services.logs.demoted, {\"id\" => demoted_user.id.to_s, \"name\" => demoted_user.formatted_name, \"rank\" => tuple[1].name, \"invoker\" => user.formatted_name})\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.success)\n"}},{"html_id":"demote_from_reply(arg:String|Nil,user:User,message:MessageID,reply:Tourmaline::Message,services:Services):Nil-instance-method","name":"demote_from_reply","doc":"Demotes a user who sent the *reply* message to the default rank if no *arg* was given,\nor demotes to the given rank in *arg* if one argument (name/value of rank) was given","summary":"<p>Demotes a user who sent the <em>reply</em> message to the default rank if no <em>arg</em> was given, or demotes to the given rank in <em>arg</em> if one argument (name/value of rank) was given</p>","abstract":false,"args":[{"name":"arg","external_name":"arg","restriction":"String | ::Nil"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(arg : String | Nil, user : User, message : MessageID, reply : Tourmaline::Message, services : Services) : Nil","args_html":"(arg : String | Nil, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, reply : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/demote_command.cr","line_number":24,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/demote_command.cr#L24"},"def":{"name":"demote_from_reply","args":[{"name":"arg","external_name":"arg","restriction":"String | ::Nil"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if arg\n  tuple = services.access.find_rank(arg.downcase, arg.to_i?)\nelse\n  tuple = {services.config.default_rank, services.access.ranks[services.config.default_rank]}\nend\nif tuple\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, Format.substitute_reply(services.replies.no_rank_found, {\"ranks\" => services.access.rank_names(limit: user.rank).to_s}))\nend\nif demoted_user = reply_user(user, reply, services)\nelse\n  return\nend\nif services.access.can_demote?(tuple[0], user.rank, demoted_user.rank)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.fail)\nend\nupdate_user_activity(user, services)\ndemoted_user.set_rank(tuple[0])\nservices.database.update_user(demoted_user)\nlog = Format.substitute_message(services.logs.demoted, {\"id\" => demoted_user.id.to_s, \"name\" => demoted_user.formatted_name, \"rank\" => tuple[1].name, \"invoker\" => user.formatted_name})\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.success)\n"}},{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Demotes the user described in the *message* text or demotes the sender of the message it replies to, if *message* meets requirements","summary":"<p>Demotes the user described in the <em>message</em> text or demotes the sender of the message it replies to, if <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/demote_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/demote_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Demote, services)\nelse\n  return\nend\nif reply = message.reply_to_message\n  arg = Format.get_arg(message.text)\n  demote_from_reply(arg, user, message.message_id.to_i64, reply, services)\nelse\n  demote_from_args(message.text, user, message.message_id.to_i64, services)\nend\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/DocumentHandler","path":"PrivateParlorXT/DocumentHandler.html","kind":"class","full_name":"PrivateParlorXT::DocumentHandler","name":"DocumentHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/document_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/document_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for files and document message updates","summary":"<p>A handler for files and document message updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the document message meets requirements and relays it","summary":"<p>Checks if the document message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/document_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/document_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif meets_requirements?(message)\nelse\n  return\nend\nif authorized?(user, message, :Document, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif document = message.document\nelse\n  return\nend\ncaption, entities = Format.text_and_entities(message, user, services)\nif caption\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nif unique?(user, message, services)\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Documents, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_document(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, replies: reply_messages, media: document.file_id, text: caption, entities: entities, effect: services.config.allow_effects ? message.effect_id : nil))\n"}},{"html_id":"meets_requirements?(message:Tourmaline::Message):Bool-instance-method","name":"meets_requirements?","doc":"Returns `true` if the message meets requirements\n\nReturns `false if the message does not meet requirements, when the message is\na forward, part of an album, or an animation/GIF","summary":"<p>Returns <code>true</code> if the message meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"args_string":"(message : Tourmaline::Message) : Bool","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/document_handler.cr","line_number":58,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/document_handler.cr#L58"},"def":{"name":"meets_requirements?","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"return_type":"Bool","visibility":"Public","body":"if message.forward_origin\n  return false\nend\nif message.media_group_id\n  return false\nend\nif message.animation\n  return false\nend\ntrue\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming documents\n\nReturns `true` if the user is spamming documents, `false` otherwise","summary":"<p>Checks if the user is spamming documents</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/document_handler.cr","line_number":69,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/document_handler.cr#L69"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_document?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a document","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a document</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/document_handler.cr","line_number":112,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/document_handler.cr#L112"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_document >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_document)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a document when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for documents is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a document when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/document_handler.cr","line_number":89,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/document_handler.cr#L89"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_document >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_document\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_document.to_s, \"type\" => \"document\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/DownvoteHandler","path":"PrivateParlorXT/DownvoteHandler.html","kind":"class","full_name":"PrivateParlorXT::DownvoteHandler","name":"DownvoteHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/HearsHandler","kind":"class","full_name":"PrivateParlorXT::HearsHandler","name":"HearsHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/HearsHandler","kind":"class","full_name":"PrivateParlorXT::HearsHandler","name":"HearsHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr#L8"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command-like `HearsHandler` used for downvote messages sent by other users.","summary":"<p>A command-like <code><a href=\"../PrivateParlorXT/HearsHandler.html\">HearsHandler</a></code> used for downvote messages sent by other users.</p>","instance_methods":[{"html_id":"authorized?(user:User,message:Tourmaline::Message,authority:CommandPermissions,services:Services):Bool-instance-method","name":"authorized?","doc":"Checks if the user is authorized to downvote a message\n\nReturns `true` if so, `false` otherwise","summary":"<p>Checks if the user is authorized to downvote a message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, authority : CommandPermissions, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, authority : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr","line_number":54,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr#L54"},"def":{"name":"authorized?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if services.access.authorized?(user.rank, authority)\nelse\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.fail)\n  return false\nend\ntrue\n"}},{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Downvotes the message that the given *message* replies to if it meets requirements","summary":"<p>Downvotes the message that the given <em>message</em> replies to if it meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr#L10"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Downvote, services)\nelse\n  return\nend\nif reply = reply_message(user, message, services)\nelse\n  return\nend\nif reply_user = reply_user(user, reply, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nupdate_user_activity(user, services)\nif downvote_message(user, reply_user, message, reply, services)\nelse\n  return\nend\nrecord_message_statistics(services)\nsend_replies(user, reply_user, message, reply, services)\n"}},{"html_id":"downvote_message(user:User,reply_user:User,message:Tourmaline::Message,reply:Tourmaline::Message,services:Services):Bool-instance-method","name":"downvote_message","doc":"Adds user's dowvote to message history and update reply_user's karma\nReturns false if user has already downvoted the message or user attempted\nto remove his own karma","summary":"<p>Adds user's dowvote to message history and update reply_user's karma Returns false if user has already downvoted the message or user attempted to remove his own karma</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"reply_user","external_name":"reply_user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, reply_user : User, message : Tourmaline::Message, reply : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, reply_user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, reply : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr","line_number":80,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr#L80"},"def":{"name":"downvote_message","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"reply_user","external_name":"reply_user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if user.id == reply_user.id\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.downvoted_own_message)\n  return false\nend\nif !(services.history.add_rating(reply.message_id.to_i64, user.id))\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.already_voted)\n  return false\nend\nreply_user.decrement_karma\nservices.database.update_user(reply_user)\ntrue\n"}},{"html_id":"karma_level_down(reply_user:User,reply_parameters:ReplyParameters|Nil,services:Services):Nil-instance-method","name":"karma_level_down","doc":"Checks if the user has lost a karma level when karma levels are set, and if so, queues a 'leveled down' response","summary":"<p>Checks if the user has lost a karma level when karma levels are set, and if so, queues a 'leveled down' response</p>","abstract":false,"args":[{"name":"reply_user","external_name":"reply_user","restriction":"User"},{"name":"reply_parameters","external_name":"reply_parameters","restriction":"ReplyParameters | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(reply_user : User, reply_parameters : ReplyParameters | Nil, services : Services) : Nil","args_html":"(reply_user : <a href=\"../PrivateParlorXT/User.html\">User</a>, reply_parameters : <a href=\"../PrivateParlorXT/ReplyParameters.html\">ReplyParameters</a> | Nil, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr","line_number":145,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr#L145"},"def":{"name":"karma_level_down","args":[{"name":"reply_user","external_name":"reply_user","restriction":"User"},{"name":"reply_parameters","external_name":"reply_parameters","restriction":"ReplyParameters | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if services.config.karma_levels.empty?\n  return\nend\nlast_level = (services.config.karma_levels.find({(..), \"\"}) do |range, _|\n  range === (reply_user.karma + 1)\nend)[1]\ncurrent_level = (services.config.karma_levels.find({(..), \"\"}) do |range, _|\n  range === reply_user.karma\nend)[1]\nif last_level == current_level\n  return\nend\nservices.relay.send_to_user(reply_parameters, reply_user.id, Format.substitute_message(services.replies.karma_level_down, {\"level\" => current_level}))\n"}},{"html_id":"record_message_statistics(services:Services):Nil-instance-method","name":"record_message_statistics","doc":"Records message statistics about downvotes if the `Statistics` module is enabled","summary":"<p>Records message statistics about downvotes if the <code><a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a></code> module is enabled</p>","abstract":false,"args":[{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(services : Services) : Nil","args_html":"(services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr","line_number":97,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr#L97"},"def":{"name":"record_message_statistics","args":[{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if stats = services.stats\nelse\n  return\nend\nstats.increment_downvotes\n"}},{"html_id":"send_replies(user:User,reply_user:User,message:Tourmaline::Message,reply:Tourmaline::Message,services:Services):Nil-instance-method","name":"send_replies","doc":"Queues 'gave downvote' and 'got downvoted' replies for the *user* and *reply_user*, respectively\n\nIncludes a reason for the downvote if karma reasons are enabled.","summary":"<p>Queues 'gave downvote' and 'got downvoted' replies for the <em>user</em> and <em>reply_user</em>, respectively</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"reply_user","external_name":"reply_user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, reply_user : User, message : Tourmaline::Message, reply : Tourmaline::Message, services : Services) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, reply_user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, reply : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr","line_number":106,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr#L106"},"def":{"name":"send_replies","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"reply_user","external_name":"reply_user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if services.config.karma_reasons\n  reason = Format.get_arg(message.text)\n  if reason\n    reason = truncate_karma_reason(reason)\n    services.relay.log_output(Format.substitute_message(services.logs.downvoted, {\"id\" => user.id.to_s, \"name\" => user.formatted_name, \"oid\" => reply_user.obfuscated_id, \"reason\" => reason}))\n  end\nend\ngave_downvote_reply = karma_reason(reason, services.replies.gave_downvote, services)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, gave_downvote_reply)\nif reply_user.hide_karma\nelse\n  reply_msid = services.history.receiver_message(reply.message_id.to_i64, reply_user.id)\n  if reply_msid\n    reply_parameters = ReplyParameters.new(reply_msid)\n  end\n  karma_level_down(reply_user, reply_parameters, services)\n  got_downvote_reply = karma_reason(reason, services.replies.got_downvote, services)\n  services.relay.send_to_user(reply_parameters, reply_user.id, got_downvote_reply)\nend\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming downvotes\n\nReturns `true` if the user is spamming downvotes, `false` otherwise","summary":"<p>Checks if the user is spamming downvotes</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr","line_number":66,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr#L66"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_downvote?(user.id, services.config.downvote_limit_interval)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.downvote_spam)\n  return true\nend\nfalse\n"}},{"html_id":"user_from_message(message:Tourmaline::Message,services:Services):User|Nil-instance-method","name":"user_from_message","doc":"Returns the `User` associated with the message if the `User` could be found in the `Database`.\nThis will also update the `User`'s username and realname if they have changed since the last message.\n\nReturns `nil`  if:\n  - Message has no sender\n  - `User` does not exist in the `Database`\n  - `User` cannot use a command due to being blacklisted","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> associated with the message if the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> could be found in the <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : User | Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr","line_number":37,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/downvote_handler.cr#L37"},"def":{"name":"user_from_message","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User | ::Nil","visibility":"Public","body":"if info = message.from\nelse\n  return\nend\nif user = services.database.get_user(info.id.to_i64)\nelse\n  return services.relay.send_to_user(nil, info.id.to_i64, services.replies.not_in_chat)\nend\nif user.can_use_command?\nelse\n  return deny_user(user, services)\nend\nuser.update_names(info.username, info.full_name)\nuser\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Format","path":"PrivateParlorXT/Format.html","kind":"module","full_name":"PrivateParlorXT::Format","name":"Format","abstract":false,"ancestors":[{"html_id":"private-parlor-xt/Tourmaline/Helpers","kind":"module","full_name":"Tourmaline::Helpers","name":"Helpers"}],"locations":[{"filename":"src/private-parlor-xt/format.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L6"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/Tourmaline/Helpers","kind":"module","full_name":"Tourmaline::Helpers","name":"Helpers"}],"extended_modules":[{"html_id":"private-parlor-xt/PrivateParlorXT/Format","kind":"module","full_name":"PrivateParlorXT::Format","name":"Format"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A general use module for formatting text and `Tourmaline::MessageEntity`","summary":"<p>A general use module for formatting text and <code>Tourmaline::MessageEntity</code></p>","instance_methods":[{"html_id":"allow_text?(text:String):Bool-instance-method","name":"allow_text?","doc":"Checks the content of the message *text* and determines if it should be relayed.\n\nReturns `true` if the *text* is empty or permitted, `false` if the text has mathematical alphanumeric symbols, as they contain bold and italic characters.","summary":"<p>Checks the content of the message <em>text</em> and determines if it should be relayed.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Bool","args_html":"(text : String) : Bool","location":{"filename":"src/private-parlor-xt/format.cr","line_number":273,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L273"},"def":{"name":"allow_text?","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"if text.empty?\n  true\nelse\n  if text.codepoints.any? do |codepoint|\n    (119808..120831).includes?(codepoint)\n  end\n    false\n  else\n    true\n  end\nend"}},{"html_id":"check_text(text:String,user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"check_text","doc":"Checks the given *text* for invalid characters","summary":"<p>Checks the given <em>text</em> for invalid characters</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(text : String, user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(text : String, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/format.cr","line_number":37,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L37"},"def":{"name":"check_text","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if message.preformatted?\n  return true\nend\nif r9k = services.robot9000\n  if r9k.allow_text?(text)\n  else\n    services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.rejected_message)\n    return false\n  end\nelse\n  if Format.allow_text?(text)\n  else\n    services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.rejected_message)\n    return false\n  end\nend\ntrue\n"}},{"html_id":"contact(contact:String|Nil,replies:Replies):String|Nil-instance-method","name":"contact","doc":"Format the given *contact* for blacklist contact replies","summary":"<p>Format the given <em>contact</em> for blacklist contact replies</p>","abstract":false,"args":[{"name":"contact","external_name":"contact","restriction":"String | ::Nil"},{"name":"replies","external_name":"replies","restriction":"Replies"}],"args_string":"(contact : String | Nil, replies : Replies) : String | Nil","args_html":"(contact : String | Nil, replies : <a href=\"../PrivateParlorXT/Replies.html\">Replies</a>) : String | Nil","location":{"filename":"src/private-parlor-xt/format.cr","line_number":350,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L350"},"def":{"name":"contact","args":[{"name":"contact","external_name":"contact","restriction":"String | ::Nil"},{"name":"replies","external_name":"replies","restriction":"Replies"}],"return_type":"String | ::Nil","visibility":"Public","body":"if contact\n  replies.blacklist_contact.gsub(\"{contact}\", contact)\nend"}},{"html_id":"escape_mdv2(text:String|Nil)-instance-method","name":"escape_mdv2","doc":"A simple wrapper for `Tourmaline::Helpers.escape_md` that defaults to escaping *text* according to Telegram's MarkdownV2","summary":"<p>A simple wrapper for <code>Tourmaline::Helpers.escape_md</code> that defaults to escaping <em>text</em> according to Telegram's MarkdownV2</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"}],"args_string":"(text : String | Nil)","args_html":"(text : String | Nil)","location":{"filename":"src/private-parlor-xt/format.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L16"},"def":{"name":"escape_mdv2","args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"}],"visibility":"Public","body":"String\nescape_md(text, version: 2)\n"}},{"html_id":"flag_sign(name:String,entities:Array(Tourmaline::MessageEntity)):Tuple(String,Array(Tourmaline::MessageEntity))-instance-method","name":"flag_sign","doc":"Format the flag sign header for tripcode messages when flag signs are enabled","summary":"<p>Format the flag sign header for tripcode messages when flag signs are enabled</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(name : String, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","args_html":"(name : String, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/format.cr","line_number":316,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L316"},"def":{"name":"flag_sign","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"Tuple(String, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"header = \"#{name}:\\n\"\nheader_size = header[..-3].to_utf16.size\nname_size = name.to_utf16.size\nentities = offset_entities(entities, header_size + 2)\nentities = [Tourmaline::MessageEntity.new(\"code\", 0, name_size)].concat(entities)\nreturn {header, entities}\n"}},{"html_id":"format_text(text:String,entities:Array(Tourmaline::MessageEntity),preformatted:Bool|Nil,services:Services):Tuple(String,Array(Tourmaline::MessageEntity))-instance-method","name":"format_text","doc":"Removes formatting from the given *text* and *entities*","summary":"<p>Removes formatting from the given <em>text</em> and <em>entities</em></p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"preformatted","external_name":"preformatted","restriction":"Bool | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity), preformatted : Bool | Nil, services : Services) : Tuple(String, Array(Tourmaline::MessageEntity))","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity), preformatted : Bool | Nil, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Tuple(String, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/format.cr","line_number":56,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L56"},"def":{"name":"format_text","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"preformatted","external_name":"preformatted","restriction":"Bool | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Tuple(String, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"if preformatted\nelse\n  text, entities = Format.strip_format(text, entities, services.config.entity_types, services.config.linked_network)\nend\nreturn {text, entities}\n"}},{"html_id":"generate_tripcode(tripkey:String,services:Services):Tuple(String,String)-instance-method","name":"generate_tripcode","doc":"Generate a 2channel or secure 8chan style tripcode from a given string in the format `name#pass`.\n\nReturns a named tuple containing the tripname and tripcode.\n\nUsing procedures based on code by Fredrick R. Brennan and Tinyboard Development Group\n\n8chan secure tripcode:\nCopyright (c) 2010-2014 Tinyboard Development Group\n\ngithub.com/ctrlcctrlv/infinity/blob/1535f2c976bdc503c12b5e92e605ee665e3239e7/inc/functions.php#L2755\n\n2channel tripcode:\nCopyright (c) Fredrick R. Brennan, 2020\n\ngithub.com/ctrlcctrlv/tripkeys/blob/33dcb519a8c08185aecba15eee9aa80760dddc87/doc/2ch_tripcode_annotated.pl","summary":"<p>Generate a 2channel or secure 8chan style tripcode from a given string in the format <code>name#pass</code>.</p>","abstract":false,"args":[{"name":"tripkey","external_name":"tripkey","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(tripkey : String, services : Services) : Tuple(String, String)","args_html":"(tripkey : String, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Tuple(String, String)","location":{"filename":"src/private-parlor-xt/format.cr","line_number":177,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L177"},"def":{"name":"generate_tripcode","args":[{"name":"tripkey","external_name":"tripkey","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Tuple(String, String)","visibility":"Public","body":"split = tripkey.split('#', 2)\nname = split[0]\npass = split[1]\nif services.config.flag_signatures\n  return {name, \"\"}\nend\nif !services.config.tripcode_salt.empty?\n  pass = String.new(pass.encode(\"Shift_JIS\"), \"Shift_JIS\")\n  trip = Digest::SHA1.base64digest(pass + services.config.tripcode_salt)\n  tripcode = \"!#{trip[0...10]}\"\nelse\n  character_map = {':' => 'A', ';' => 'B', '<' => 'C', '=' => 'D', '>' => 'E', '?' => 'F', '@' => 'G', '[' => 'a', '\\\\' => 'b', ']' => 'c', '^' => 'd', '_' => 'e', '`' => 'f'}\n  salt = (pass + \"H.\")[1, 2]\n  salt = salt.gsub(/[^\\.-z]/, '.')\n  salt = salt.gsub(character_map)\n  trip = String.new(LibCrypt.crypt(pass[...8], salt))\n  tripcode = \"!#{trip[-10...]}\"\nend\n{name, tripcode}\n"}},{"html_id":"get_arg(text:String|Nil):String|Nil-instance-method","name":"get_arg","doc":"Returns the argument following a given *text*, usually a command where the argument comes after the first whitespace","summary":"<p>Returns the argument following a given <em>text</em>, usually a command where the argument comes after the first whitespace</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"}],"args_string":"(text : String | Nil) : String | Nil","args_html":"(text : String | Nil) : String | Nil","location":{"filename":"src/private-parlor-xt/format.cr","line_number":284,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L284"},"def":{"name":"get_arg","args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"}],"return_type":"String | Nil","visibility":"Public","body":"if text\nelse\n  return\nend\n(text.split(2))[1]?\n"}},{"html_id":"get_args(text:String|Nil,count:Int):Array(String)|Nil-instance-method","name":"get_args","doc":"Returns *count* number of args after a given *text*, usually a command where the command precedes the first whitespace.","summary":"<p>Returns <em>count</em> number of args after a given <em>text</em>, usually a command where the command precedes the first whitespace.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"},{"name":"count","external_name":"count","restriction":"Int"}],"args_string":"(text : String | Nil, count : Int) : Array(String) | Nil","args_html":"(text : String | Nil, count : Int) : Array(String) | Nil","location":{"filename":"src/private-parlor-xt/format.cr","line_number":291,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L291"},"def":{"name":"get_args","args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"},{"name":"count","external_name":"count","restriction":"Int"}],"return_type":"Array(String) | Nil","visibility":"Public","body":"if text\nelse\n  return\nend\n(text.split(count + 1))[1..]?\n"}},{"html_id":"offset_entities(entities:Array(Tourmaline::MessageEntity),offset:Int32):Array(Tourmaline::MessageEntity)-instance-method","name":"offset_entities","doc":"Add the given *offset* to the offset of each message entity","summary":"<p>Add the given <em>offset</em> to the offset of each message entity</p>","abstract":false,"args":[{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"offset","external_name":"offset","restriction":"Int32"}],"args_string":"(entities : Array(Tourmaline::MessageEntity), offset : Int32) : Array(Tourmaline::MessageEntity)","args_html":"(entities : Array(Tourmaline::MessageEntity), offset : Int32) : Array(Tourmaline::MessageEntity)","location":{"filename":"src/private-parlor-xt/format.cr","line_number":332,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L332"},"def":{"name":"offset_entities","args":[{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"offset","external_name":"offset","restriction":"Int32"}],"return_type":"Array(Tourmaline::MessageEntity)","visibility":"Public","body":"entities.each do |entity|\n  entity.offset = entity.offset + offset\nend\nentities\n"}},{"html_id":"prepend_pseudonym(text:String,entities:Array(Tourmaline::MessageEntity),user:User,message:Tourmaline::Message,services:Services):Tuple(String|Nil,Array(Tourmaline::MessageEntity))-instance-method","name":"prepend_pseudonym","doc":"Prepend the user's tripcode to the message","summary":"<p>Prepend the user's tripcode to the message</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity), user : User, message : Tourmaline::Message, services : Services) : Tuple(String | Nil, Array(Tourmaline::MessageEntity))","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity), user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Tuple(String | Nil, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/format.cr","line_number":99,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L99"},"def":{"name":"prepend_pseudonym","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Tuple(String | ::Nil, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"if services.config.pseudonymous\nelse\n  return {text, entities}\nend\nif message.preformatted?\n  return {text, entities}\nend\nif tripcode = user.tripcode\nelse\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.no_tripcode_set)\n  return {nil, [] of Tourmaline::MessageEntity}\nend\nname, tripcode = Format.generate_tripcode(tripcode, services)\nif services.config.flag_signatures\n  header, entities = Format.flag_sign(name, entities)\nelse\n  header, entities = Format.tripcode_sign(name, tripcode, entities)\nend\nreturn {header + text, entities}\n"}},{"html_id":"reason(reason:String|Nil,replies:Replies):String|Nil-instance-method","name":"reason","doc":"Format the *reason* for system message replies","summary":"<p>Format the <em>reason</em> for system message replies</p>","abstract":false,"args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"replies","external_name":"replies","restriction":"Replies"}],"args_string":"(reason : String | Nil, replies : Replies) : String | Nil","args_html":"(reason : String | Nil, replies : <a href=\"../PrivateParlorXT/Replies.html\">Replies</a>) : String | Nil","location":{"filename":"src/private-parlor-xt/format.cr","line_number":125,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L125"},"def":{"name":"reason","args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"replies","external_name":"replies","restriction":"Replies"}],"return_type":"String | ::Nil","visibility":"Public","body":"if reason\n  \"#{replies.reason_prefix}#{reason}\"\nend"}},{"html_id":"reason_log(reason:String|Nil,logs:Logs):String|Nil-instance-method","name":"reason_log","doc":"Format the *reason* for log messages","summary":"<p>Format the <em>reason</em> for log messages</p>","abstract":false,"args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"logs","external_name":"logs","restriction":"Logs"}],"args_string":"(reason : String | Nil, logs : Logs) : String | Nil","args_html":"(reason : String | Nil, logs : <a href=\"../PrivateParlorXT/Logs.html\">Logs</a>) : String | Nil","location":{"filename":"src/private-parlor-xt/format.cr","line_number":132,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L132"},"def":{"name":"reason_log","args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"logs","external_name":"logs","restriction":"Logs"}],"return_type":"String | ::Nil","visibility":"Public","body":"if reason\n  \"#{logs.reason_prefix}#{reason}\"\nend"}},{"html_id":"remove_entities(entities:Array(Tourmaline::MessageEntity),strip_types:Array(String)):Array(Tourmaline::MessageEntity)-instance-method","name":"remove_entities","doc":"Removes message *entities* if their types are found in *strip_types*","summary":"<p>Removes message <em>entities</em> if their types are found in <em>strip_types</em></p>","abstract":false,"args":[{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"strip_types","external_name":"strip_types","restriction":"Array(String)"}],"args_string":"(entities : Array(Tourmaline::MessageEntity), strip_types : Array(String)) : Array(Tourmaline::MessageEntity)","args_html":"(entities : Array(Tourmaline::MessageEntity), strip_types : Array(String)) : Array(Tourmaline::MessageEntity)","location":{"filename":"src/private-parlor-xt/format.cr","line_number":150,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L150"},"def":{"name":"remove_entities","args":[{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"strip_types","external_name":"strip_types","restriction":"Array(String)"}],"return_type":"Array(Tourmaline::MessageEntity)","visibility":"Public","body":"stripped_entities = [] of Tourmaline::MessageEntity\nentities.each do |entity|\n  if strip_types.includes?(entity.type)\n    stripped_entities << entity\n  end\nend\nentities - stripped_entities\n"}},{"html_id":"replace_links(text:String,entities:Array(Tourmaline::MessageEntity)):String-instance-method","name":"replace_links","doc":"Replaces appends links contained in text link entities to the end of the given *text*","summary":"<p>Replaces appends links contained in text link entities to the end of the given <em>text</em></p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","location":{"filename":"src/private-parlor-xt/format.cr","line_number":223,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L223"},"def":{"name":"replace_links","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"String","visibility":"Public","body":"entities.each do |entity|\n  if (entity.type == \"text_link\") && (url = entity.url)\n    if url.starts_with?(\"tg://\")\n      next\n    end\n    if (url.includes?(\"://t.me/\")) && (url.includes?(\"?start=\"))\n      next\n    end\n    text = text + \"\\n(#{url})\"\n  end\nend\ntext\n"}},{"html_id":"reset_entities(entities:Array(Tourmaline::MessageEntity),amount:Int32):Array(Tourmaline::MessageEntity)-instance-method","name":"reset_entities","doc":"Subtract the given *amount* from the offset of each message entity","summary":"<p>Subtract the given <em>amount</em> from the offset of each message entity</p>","abstract":false,"args":[{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"amount","external_name":"amount","restriction":"Int32"}],"args_string":"(entities : Array(Tourmaline::MessageEntity), amount : Int32) : Array(Tourmaline::MessageEntity)","args_html":"(entities : Array(Tourmaline::MessageEntity), amount : Int32) : Array(Tourmaline::MessageEntity)","location":{"filename":"src/private-parlor-xt/format.cr","line_number":341,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L341"},"def":{"name":"reset_entities","args":[{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"amount","external_name":"amount","restriction":"Int32"}],"return_type":"Array(Tourmaline::MessageEntity)","visibility":"Public","body":"entities.each do |entity|\n  entity.offset = entity.offset - amount\nend\nentities\n"}},{"html_id":"strip_format(text:String,entities:Array(Tourmaline::MessageEntity),strip_types:Array(String),linked_network:Hash(String,String)):Tuple(String,Array(Tourmaline::MessageEntity))-instance-method","name":"strip_format","doc":"Resturns text and message entities with formatting stripped, such as text_links and stripped entities, and formats network links","summary":"<p>Resturns text and message entities with formatting stripped, such as text_links and stripped entities, and formats network links</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"strip_types","external_name":"strip_types","restriction":"Array(String)"},{"name":"linked_network","external_name":"linked_network","restriction":"Hash(String, String)"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity), strip_types : Array(String), linked_network : Hash(String, String)) : Tuple(String, Array(Tourmaline::MessageEntity))","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity), strip_types : Array(String), linked_network : Hash(String, String)) : Tuple(String, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/format.cr","line_number":139,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L139"},"def":{"name":"strip_format","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"strip_types","external_name":"strip_types","restriction":"Array(String)"},{"name":"linked_network","external_name":"linked_network","restriction":"Hash(String, String)"}],"return_type":"Tuple(String, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"formatted_text = replace_links(text, entities)\nvalid_entities = remove_entities(entities, strip_types)\nvalid_entities = update_network_links(formatted_text, valid_entities, linked_network)\nreturn {formatted_text, valid_entities}\n"}},{"html_id":"substitute_message(msg:String,variables:Hash(String,String|Nil)={\"\"=>\"\"}):String-instance-method","name":"substitute_message","doc":"Globally substitutes placeholders in message with the given variables","summary":"<p>Globally substitutes placeholders in message with the given variables</p>","abstract":false,"args":[{"name":"msg","external_name":"msg","restriction":"String"},{"name":"variables","default_value":"{\"\" => \"\"}","external_name":"variables","restriction":"Hash(String, String | ::Nil)"}],"args_string":"(msg : String, variables : Hash(String, String | Nil) = {\"\" => \"\"}) : String","args_html":"(msg : String, variables : Hash(String, String | Nil) = {<span class=\"s\">&quot;&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"s\">&quot;&quot;</span>}) : String","location":{"filename":"src/private-parlor-xt/format.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L22"},"def":{"name":"substitute_message","args":[{"name":"msg","external_name":"msg","restriction":"String"},{"name":"variables","default_value":"{\"\" => \"\"}","external_name":"variables","restriction":"Hash(String, String | ::Nil)"}],"return_type":"String","visibility":"Public","body":"msg.gsub(/{\\w+}/) do |match|\n  variables[match[1..-2]]?\nend"}},{"html_id":"substitute_reply(msg:String,variables:Hash(String,String|Nil)={\"\"=>\"\"}):String-instance-method","name":"substitute_reply","doc":"Globally substitutes placeholders in reply with the given variables\nExcapes placeholders according to MarkdownV2","summary":"<p>Globally substitutes placeholders in reply with the given variables Excapes placeholders according to MarkdownV2</p>","abstract":false,"args":[{"name":"msg","external_name":"msg","restriction":"String"},{"name":"variables","default_value":"{\"\" => \"\"}","external_name":"variables","restriction":"Hash(String, String | ::Nil)"}],"args_string":"(msg : String, variables : Hash(String, String | Nil) = {\"\" => \"\"}) : String","args_html":"(msg : String, variables : Hash(String, String | Nil) = {<span class=\"s\">&quot;&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"s\">&quot;&quot;</span>}) : String","location":{"filename":"src/private-parlor-xt/format.cr","line_number":30,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L30"},"def":{"name":"substitute_reply","args":[{"name":"msg","external_name":"msg","restriction":"String"},{"name":"variables","default_value":"{\"\" => \"\"}","external_name":"variables","restriction":"Hash(String, String | ::Nil)"}],"return_type":"String","visibility":"Public","body":"msg.gsub(/{\\w+}/) do |match|\n  escape_mdv2(variables[match[1..-2]]?)\nend"}},{"html_id":"text_and_entities(message:Tourmaline::Message,user:User,services:Services):Tuple(String|Nil,Array(Tourmaline::MessageEntity))-instance-method","name":"text_and_entities","doc":"Gets the text and message entities from a given *message*","summary":"<p>Gets the text and message entities from a given <em>message</em></p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, user : User, services : Services) : Tuple(String | Nil, Array(Tourmaline::MessageEntity))","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Tuple(String | Nil, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/format.cr","line_number":65,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L65"},"def":{"name":"text_and_entities","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Tuple(String | ::Nil, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"text = (message.caption || message.text) || \"\"\nentities = message.entities.empty? ? message.caption_entities : message.entities\nif message.preformatted?\n  return {text, entities}\nend\nif check_text(text, user, message, services)\nelse\n  return {nil, [] of Tourmaline::MessageEntity}\nend\ntext, entities = format_text(text, entities, message.preformatted?, services)\ntext, entities = prepend_pseudonym(text, entities, user, message, services)\nreturn {text, entities}\n"}},{"html_id":"time(time:Time|Nil,format:String):String|Nil-instance-method","name":"time","doc":"Formats a given `Time` based on the given *format*","summary":"<p>Formats a given <code>Time</code> based on the given <em>format</em></p>","abstract":false,"args":[{"name":"time","external_name":"time","restriction":"Time | ::Nil"},{"name":"format","external_name":"format","restriction":"String"}],"args_string":"(time : Time | Nil, format : String) : String | Nil","args_html":"(time : Time | Nil, format : String) : String | Nil","location":{"filename":"src/private-parlor-xt/format.cr","line_number":368,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L368"},"def":{"name":"time","args":[{"name":"time","external_name":"time","restriction":"Time | ::Nil"},{"name":"format","external_name":"format","restriction":"String"}],"return_type":"String | ::Nil","visibility":"Public","body":"if time\n  time.to_s(format)\nend"}},{"html_id":"time_span(time:Time::Span,locale:Locale):String-instance-method","name":"time_span","doc":"Format a time span using localized time units","summary":"<p>Format a time span using localized time units</p>","abstract":false,"args":[{"name":"time","external_name":"time","restriction":"Time::Span"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"args_string":"(time : Time::Span, locale : Locale) : String","args_html":"(time : Time::Span, locale : <a href=\"../PrivateParlorXT/Locale.html\">Locale</a>) : String","location":{"filename":"src/private-parlor-xt/format.cr","line_number":357,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L357"},"def":{"name":"time_span","args":[{"name":"time","external_name":"time","restriction":"Time::Span"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"return_type":"String","visibility":"Public","body":"case\nwhen time < 1.minute\n  \"#{time.to_i}#{locale.time_units[4]}\"\nwhen time < 1.hour\n  \"#{time.total_minutes.floor.to_i}#{locale.time_units[3]}\"\nwhen time < 1.day\n  \"#{time.total_hours.floor.to_i}#{locale.time_units[2]}\"\nwhen time < 1.week\n  \"#{time.total_days.floor.to_i}#{locale.time_units[1]}\"\nelse\n  \"#{time.total_weeks.floor.to_i}#{locale.time_units[0]}\"\nend"}},{"html_id":"tripcode_sign(name:String,tripcode:String,entities:Array(Tourmaline::MessageEntity)):Tuple(String,Array(Tourmaline::MessageEntity))-instance-method","name":"tripcode_sign","doc":"Format the tripcode header for tripcode signs","summary":"<p>Format the tripcode header for tripcode signs</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"tripcode","external_name":"tripcode","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(name : String, tripcode : String, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","args_html":"(name : String, tripcode : String, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/format.cr","line_number":298,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L298"},"def":{"name":"tripcode_sign","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"tripcode","external_name":"tripcode","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"Tuple(String, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"header = \"#{name} #{tripcode}:\\n\"\nheader_size = header[..-3].to_utf16.size\nname_size = name.to_utf16.size\ntripcode_size = tripcode.to_utf16.size\nentities = offset_entities(entities, header_size + 2)\nentities = [Tourmaline::MessageEntity.new(\"bold\", 0, name_size), Tourmaline::MessageEntity.new(\"code\", name_size + 1, tripcode_size)].concat(entities)\nreturn {header, entities}\n"}},{"html_id":"update_network_links(text:String,entities:Array(Tourmaline::MessageEntity),linked_network:Hash(String,String)):Array(Tourmaline::MessageEntity)-instance-method","name":"update_network_links","doc":"Returns a text link message entities corresponding to the network links in *text*, linking to their respective chats","summary":"<p>Returns a text link message entities corresponding to the network links in <em>text</em>, linking to their respective chats</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"linked_network","external_name":"linked_network","restriction":"Hash(String, String)"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity), linked_network : Hash(String, String)) : Array(Tourmaline::MessageEntity)","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity), linked_network : Hash(String, String)) : Array(Tourmaline::MessageEntity)","location":{"filename":"src/private-parlor-xt/format.cr","line_number":241,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L241"},"def":{"name":"update_network_links","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"linked_network","external_name":"linked_network","restriction":"Hash(String, String)"}],"return_type":"Array(Tourmaline::MessageEntity)","visibility":"Public","body":"offset = 0\nwhile (start_index = text.index(/>>>\\/\\w+\\//, offset)) && (start_index != nil)\n  chat_string_index = start_index + 4\n  if end_index = text.index('/', chat_string_index)\n  else\n    offset = chat_string_index\n    next\n  end\n  if chat = linked_network[text[chat_string_index...end_index]]?\n  else\n    offset = chat_string_index\n    next\n  end\n  entities << (Tourmaline::MessageEntity.new(\"text_link\", text[...start_index].to_utf16.size, text[start_index..end_index].to_utf16.size, \"tg://resolve?domain=#{chat}\"))\n  offset = end_index\nend\nentities\n"}},{"html_id":"validate_text_and_entities(message:Tourmaline::Message,user:User,services:Services):Tuple(String|Nil,Array(Tourmaline::MessageEntity))-instance-method","name":"validate_text_and_entities","doc":"Checks the text and entities from the given *message* for validity.\n\nUsed for signature commands where the text should not be formatted or given a tripcode header if pseudonymous mode is enabled","summary":"<p>Checks the text and entities from the given <em>message</em> for validity.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, user : User, services : Services) : Tuple(String | Nil, Array(Tourmaline::MessageEntity))","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Tuple(String | Nil, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/format.cr","line_number":87,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/format.cr#L87"},"def":{"name":"validate_text_and_entities","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Tuple(String | ::Nil, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"text = (message.caption || message.text) || \"\"\nentities = message.entities.empty? ? message.caption_entities : message.entities\nif check_text(text, user, message, services)\nelse\n  return {nil, [] of Tourmaline::MessageEntity}\nend\nreturn {text, entities}\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/ForwardHandler","path":"PrivateParlorXT/ForwardHandler.html","kind":"class","full_name":"PrivateParlorXT::ForwardHandler","name":"ForwardHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/forward_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/forward_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for forwarded message updates","summary":"<p>A handler for forwarded message updates</p>","instance_methods":[{"html_id":"deanonymous_poll?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"deanonymous_poll?","doc":"Returns `true` if the forwarded poll does not have anonymous voting\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the forwarded poll does not have anonymous voting</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/forward_handler.cr","line_number":60,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/forward_handler.cr#L60"},"def":{"name":"deanonymous_poll?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if (poll = message.poll) && (!poll.is_anonymous?)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.deanon_poll)\n  return true\nend\nfalse\n"}},{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the forwarded message meets requirements and relays it","summary":"<p>Checks if the forwarded message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/forward_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/forward_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Forward, services)\nelse\n  return\nend\nif deanonymous_poll?(user, message, services)\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif unique?(user, message, services)\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Forwards, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_forward(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, effect: services.config.allow_effects ? message.effect_id : nil), message.message_id.to_i64)\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming forwarded messages\n\nReturns `true` if the user is spamming forwarded messages, `false` otherwise","summary":"<p>Checks if the user is spamming forwarded messages</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/forward_handler.cr","line_number":46,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/forward_handler.cr#L46"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_forward?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a forwarded message","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a forwarded message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/forward_handler.cr","line_number":101,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/forward_handler.cr#L101"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_forwarded_message >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_forwarded_message)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a forwarded message when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for forwarded messages is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a forwarded message when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/forward_handler.cr","line_number":78,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/forward_handler.cr#L78"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_forwarded_message >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_forwarded_message\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_forwarded_message.to_s, \"type\" => \"forward\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","path":"PrivateParlorXT/Handler.html","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler","abstract":true,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handler.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handler.cr#L5"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/HearsHandler","kind":"class","full_name":"PrivateParlorXT::HearsHandler","name":"HearsHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"The base class for all message handlers","summary":"<p>The base class for all message handlers</p>","constructors":[{"html_id":"new(config:Config)-class-method","name":"new","doc":"Initializes an instance of `Handler`\n\nThe *config* can be used to modify the functionality of the handler","summary":"<p>Initializes an instance of <code><a href=\"../PrivateParlorXT/Handler.html\">Handler</a></code></p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(config : Config)","args_html":"(config : <a href=\"../PrivateParlorXT/Config.html\">Config</a>)","location":{"filename":"src/private-parlor-xt/handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handler.cr#L9"},"def":{"name":"new","args":[{"name":"config","external_name":"config","restriction":"Config"}],"visibility":"Public","body":"_ = allocate\n_.initialize(config)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"The function that describes the behavior of the `Handler`","summary":"<p>The function that describes the behavior of the <code><a href=\"../PrivateParlorXT/Handler.html\">Handler</a></code></p>","abstract":true,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handler.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handler.cr#L13"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"reply_message(user:User,message:Tourmaline::Message,services:Services):Tourmaline::Message|Nil-instance-method","name":"reply_message","doc":"Returns the given *message's* reply, if it exists","summary":"<p>Returns the given <em>message's</em> reply, if it exists</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Tourmaline::Message | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a> | Nil","location":{"filename":"src/private-parlor-xt/handler.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handler.cr#L22"},"def":{"name":"reply_message","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Tourmaline::Message | ::Nil","visibility":"Public","body":"if message.reply_to_message\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.no_reply)\nend\nmessage.reply_to_message\n"}},{"html_id":"reply_user(user:User,reply_message:Tourmaline::Message,services:Services):User|Nil-instance-method","name":"reply_user","doc":"Returns the *reply_message's* `User` if he exists and the *reply_message* is still available in the `History`","summary":"<p>Returns the <em>reply_message's</em> <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> if he exists and the <em>reply_message</em> is still available in the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"reply_message","external_name":"reply_message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, reply_message : Tourmaline::Message, services : Services) : User | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, reply_message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/handler.cr","line_number":31,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handler.cr#L31"},"def":{"name":"reply_user","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"reply_message","external_name":"reply_message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User | ::Nil","visibility":"Public","body":"reply_user_id = services.history.sender(reply_message.message_id.to_i64)\nreply_user = services.database.get_user(reply_user_id)\nif reply_user\nelse\n  return services.relay.send_to_user(ReplyParameters.new(reply_message.message_id), user.id, services.replies.not_in_cache)\nend\nreply_user\n"}},{"html_id":"unique?(user:User,message:Tourmaline::Message,services:Services,text:String|Nil=nil):Bool-instance-method","name":"unique?","doc":"Checks the given *message* for uniqueness and returns `true` if the message is unique\n\nReturns `false` if the message is unoriginal","summary":"<p>Checks the given <em>message</em> for uniqueness and returns <code>true</code> if the message is unique</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"},{"name":"text","default_value":"nil","external_name":"text","restriction":"String | ::Nil"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services, text : String | Nil = nil) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>, text : String | Nil = <span class=\"n\">nil</span>) : Bool","location":{"filename":"src/private-parlor-xt/handler.cr","line_number":46,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handler.cr#L46"},"def":{"name":"unique?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"},{"name":"text","default_value":"nil","external_name":"text","restriction":"String | ::Nil"}],"return_type":"Bool","visibility":"Public","body":"if r9k = services.robot9000\nelse\n  return true\nend\nr9k.unique_message?(user, message, services, text)\n"}},{"html_id":"update_user_activity(user:User,services:Services):Nil-instance-method","name":"update_user_activity","doc":"Updates the given *user's* last_active attribute to the current time","summary":"<p>Updates the given <em>user's</em> last_active attribute to the current time</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handler.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handler.cr#L16"},"def":{"name":"update_user_activity","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"user.set_active\nservices.database.update_user(user)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/HandlerConfig","path":"PrivateParlorXT/HandlerConfig.html","kind":"class","full_name":"PrivateParlorXT::HandlerConfig","name":"HandlerConfig","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L5"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Contains a limited set of `Config` variables that are needed for handlers","summary":"<p>Contains a limited set of <code><a href=\"../PrivateParlorXT/Config.html\">Config</a></code> variables that are needed for handlers</p>","constructors":[{"html_id":"new(config:Config)-class-method","name":"new","doc":"Creates a new instance of `HandlerConfig``","summary":"<p>Creates a new instance of `HandlerConfig``</p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(config : Config)","args_html":"(config : <a href=\"../PrivateParlorXT/Config.html\">Config</a>)","location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":64,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L64"},"def":{"name":"new","args":[{"name":"config","external_name":"config","restriction":"Config"}],"visibility":"Public","body":"_ = allocate\n_.initialize(config)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"allow_effects:Bool|Nil-instance-method","name":"allow_effects","doc":"Whether or not to allow users to send messages with a message effect animation","summary":"<p>Whether or not to allow users to send messages with a message effect animation</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":28,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L28"},"def":{"name":"allow_effects","return_type":"Bool | ::Nil","visibility":"Public","body":"@allow_effects"}},{"html_id":"allow_spoilers:Bool|Nil-instance-method","name":"allow_spoilers","doc":"Whether or not to allow users to send photos, videos, or GIFs with a spoiler overlay","summary":"<p>Whether or not to allow users to send photos, videos, or GIFs with a spoiler overlay</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":25,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L25"},"def":{"name":"allow_spoilers","return_type":"Bool | ::Nil","visibility":"Public","body":"@allow_spoilers"}},{"html_id":"blacklist_contact:String|Nil-instance-method","name":"blacklist_contact","doc":"Returns the contact string shown to blacklisted users","summary":"<p>Returns the contact string shown to blacklisted users</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L7"},"def":{"name":"blacklist_contact","return_type":"String | ::Nil","visibility":"Public","body":"@blacklist_contact"}},{"html_id":"cooldown_base:Int32-instance-method","name":"cooldown_base","doc":"The base integer for which cooldown times are computed from","summary":"<p>The base integer for which cooldown times are computed from</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":43,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L43"},"def":{"name":"cooldown_base","return_type":"Int32","visibility":"Public","body":"@cooldown_base"}},{"html_id":"default_rank:Int32-instance-method","name":"default_rank","doc":"The value of the `Rank` a user will be set to when joining for the first time or getting demoted","summary":"<p>The value of the <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> a user will be set to when joining for the first time or getting demoted</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":37,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L37"},"def":{"name":"default_rank","return_type":"Int32","visibility":"Public","body":"@default_rank"}},{"html_id":"downvote_limit_interval:Int32-instance-method","name":"downvote_limit_interval","doc":"Limit a user's usage of `DownvoteHandler` for once every interval (in seconds)","summary":"<p>Limit a user's usage of <code><a href=\"../PrivateParlorXT/DownvoteHandler.html\">DownvoteHandler</a></code> for once every interval (in seconds)</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L16"},"def":{"name":"downvote_limit_interval","return_type":"Int32","visibility":"Public","body":"@downvote_limit_interval"}},{"html_id":"entity_types:Array(String)-instance-method","name":"entity_types","doc":"An array of `String` referring to entity types that will be removed from all messages","summary":"<p>An array of <code>String</code> referring to entity types that will be removed from all messages</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":19,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L19"},"def":{"name":"entity_types","return_type":"Array(String)","visibility":"Public","body":"@entity_types"}},{"html_id":"flag_signatures:Bool|Nil-instance-method","name":"flag_signatures","doc":"Whether or not to replace tripcodes with a flag or emoji signature","summary":"<p>Whether or not to replace tripcodes with a flag or emoji signature</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":58,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L58"},"def":{"name":"flag_signatures","return_type":"Bool | ::Nil","visibility":"Public","body":"@flag_signatures"}},{"html_id":"karma_levels:Hash(Range(Int32,Int32),String)-instance-method","name":"karma_levels","doc":"A hash of `Range(Int32, Int32)` => `String` mapping a range of possible `User` karma values to the name of the karma level that is defined by that range","summary":"<p>A hash of <code>Range(Int32, Int32)</code> =&gt; <code>String</code> mapping a range of possible <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> karma values to the name of the karma level that is defined by that range</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":34,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L34"},"def":{"name":"karma_levels","return_type":"Hash(Range(Int32, Int32), String)","visibility":"Public","body":"@karma_levels"}},{"html_id":"karma_reasons:Bool|Nil-instance-method","name":"karma_reasons","doc":"Whether or not to allow users to attach a reason to their upvote/downvote messages","summary":"<p>Whether or not to allow users to attach a reason to their upvote/downvote messages</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":61,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L61"},"def":{"name":"karma_reasons","return_type":"Bool | ::Nil","visibility":"Public","body":"@karma_reasons"}},{"html_id":"linked_network:Hash(String,String)-instance-method","name":"linked_network","doc":"A hash of `String` => `String` mapping the name of a chat to the chat's username","summary":"<p>A hash of <code>String</code> =&gt; <code>String</code> mapping the name of a chat to the chat's username</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L22"},"def":{"name":"linked_network","return_type":"Hash(String, String)","visibility":"Public","body":"@linked_network"}},{"html_id":"media_limit_period:Time::Span-instance-method","name":"media_limit_period","doc":"The duration (in hours) in which new users cannot send media","summary":"<p>The duration (in hours) in which new users cannot send media</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":31,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L31"},"def":{"name":"media_limit_period","return_type":"Time::Span","visibility":"Public","body":"@media_limit_period"}},{"html_id":"pseudonymous:Bool|Nil-instance-method","name":"pseudonymous","doc":"Whether or not to enable pseudonymous mode, which forces the use of tripcodes for all users and automatically prepends messages with the user's tripcode","summary":"<p>Whether or not to enable pseudonymous mode, which forces the use of tripcodes for all users and automatically prepends messages with the user's tripcode</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":55,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L55"},"def":{"name":"pseudonymous","return_type":"Bool | ::Nil","visibility":"Public","body":"@pseudonymous"}},{"html_id":"registration_open:Bool|Nil-instance-method","name":"registration_open","doc":"Whether or not registration is open, allowing new users to join","summary":"<p>Whether or not registration is open, allowing new users to join</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":52,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L52"},"def":{"name":"registration_open","return_type":"Bool | ::Nil","visibility":"Public","body":"@registration_open"}},{"html_id":"sign_limit_interval:Int32-instance-method","name":"sign_limit_interval","doc":"Limit a users' usage of `SignCommand` and `TripodeSignCommand` for once every interval (in seconds)","summary":"<p>Limit a users' usage of <code><a href=\"../PrivateParlorXT/SignCommand.html\">SignCommand</a></code> and <code>TripodeSignCommand</code> for once every interval (in seconds)</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L10"},"def":{"name":"sign_limit_interval","return_type":"Int32","visibility":"Public","body":"@sign_limit_interval"}},{"html_id":"tripcode_salt:String-instance-method","name":"tripcode_salt","doc":"A `String` used to generate secure tripcodes","summary":"<p>A <code>String</code> used to generate secure tripcodes</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":40,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L40"},"def":{"name":"tripcode_salt","return_type":"String","visibility":"Public","body":"@tripcode_salt"}},{"html_id":"upvote_limit_interval:Int32-instance-method","name":"upvote_limit_interval","doc":"Limit a user's usage of `UpvoteHandler` for once every interval (in seconds)","summary":"<p>Limit a user's usage of <code><a href=\"../PrivateParlorXT/UpvoteHandler.html\">UpvoteHandler</a></code> for once every interval (in seconds)</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L13"},"def":{"name":"upvote_limit_interval","return_type":"Int32","visibility":"Public","body":"@upvote_limit_interval"}},{"html_id":"warn_deduction:Int32-instance-method","name":"warn_deduction","doc":"The amount of karma to remove from a user when receiving a cooldown","summary":"<p>The amount of karma to remove from a user when receiving a cooldown</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":49,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L49"},"def":{"name":"warn_deduction","return_type":"Int32","visibility":"Public","body":"@warn_deduction"}},{"html_id":"warn_lifespan:Int32-instance-method","name":"warn_lifespan","doc":"The length of time (in hours) until a warning expires","summary":"<p>The length of time (in hours) until a warning expires</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/config/handler_config.cr","line_number":46,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/config/handler_config.cr#L46"},"def":{"name":"warn_lifespan","return_type":"Int32","visibility":"Public","body":"@warn_lifespan"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Hears","path":"PrivateParlorXT/Hears.html","kind":"annotation","full_name":"PrivateParlorXT::Hears","name":"Hears","abstract":false,"locations":[{"filename":"src/private-parlor-xt/handlers/hears_handler.cr","line_number":20,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handler.cr#L20"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Annotation for Telegram hears handlers\n\n## Keys and Values:\n\n`pattern`\n:     a `StringLiteral` or `RegexLiteral` that triggers this `HearsHandler` when it is found in a message text.\n      A `RegexLiteral` will match patterns inside text, whereas a `StringLiteral` will match patterns at the start of text.\n\n`config`\n:     `StringLiteral`, the name of the `Config` member that enables this handler.\n      Handlers should be configurable, though a value is not required here to compile or be used in the program.\n\n`command`\n:     a `BoolLiteral` which determines if the `HearsHandler` functions as a command.\n      If `true`, a \"command_disabled\" reply will be sent if this handler is not toggled.","summary":"<p>Annotation for Telegram hears handlers</p>"},{"html_id":"private-parlor-xt/PrivateParlorXT/HearsHandler","path":"PrivateParlorXT/HearsHandler.html","kind":"class","full_name":"PrivateParlorXT::HearsHandler","name":"HearsHandler","abstract":true,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/hears_handler.cr","line_number":27,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handler.cr#L27"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"private-parlor-xt/PrivateParlorXT/DownvoteHandler","kind":"class","full_name":"PrivateParlorXT::DownvoteHandler","name":"DownvoteHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/UpvoteHandler","kind":"class","full_name":"PrivateParlorXT::UpvoteHandler","name":"UpvoteHandler"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A base class for handling messages whose text matches a certain pattern.\n\nHandlers that are meant to match patterns in text should inherit from this class,\nand include an `Hears` annotation to have it be usable by the bot.","summary":"<p>A base class for handling messages whose text matches a certain pattern.</p>","instance_methods":[{"html_id":"deny_user(user:User,services:Services):Nil-instance-method","name":"deny_user","doc":"Queues a system reply when the message matched is from a user who is blacklisted","summary":"<p>Queues a system reply when the message matched is from a user who is blacklisted</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/hears_handler.cr","line_number":29,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handler.cr#L29"},"def":{"name":"deny_user","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user.blacklisted?\nelse\n  return\nend\nresponse = Format.substitute_reply(services.replies.blacklisted, {\"contact\" => Format.contact(services.config.blacklist_contact, services.replies), \"reason\" => Format.reason(user.blacklist_reason, services.replies)})\nservices.relay.send_to_user(nil, user.id, response)\n"}},{"html_id":"karma_reason(reason:String|Nil,karma_reply:String,services:Services):String-instance-method","name":"karma_reason","doc":"Format the *reason* for karma related replies","summary":"<p>Format the <em>reason</em> for karma related replies</p>","abstract":false,"args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"karma_reply","external_name":"karma_reply","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(reason : String | Nil, karma_reply : String, services : Services) : String","args_html":"(reason : String | Nil, karma_reply : String, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/handlers/hears_handler.cr","line_number":48,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handler.cr#L48"},"def":{"name":"karma_reason","args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"karma_reply","external_name":"karma_reply","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"if reason\nelse\n  return Format.substitute_reply(karma_reply)\nend\nreason = reason.gsub(/\\\\+$/, \"\")\nif reason.empty?\n  return Format.substitute_reply(karma_reply)\nend\nkarma_reply = karma_reply.gsub(/{karma_reason}([[:punct:]]+(?=\\n|\\\\n))/, \"{karma_reason}\")\nreason = Format.escape_mdv2(reason)\nreason = reason.gsub(\"\\n\", \"\\n>\")\nkarma_reply.gsub(\"{karma_reason}\", services.replies.karma_reason.gsub(\"{reason}\", \"#{reason}\"))\n"}},{"html_id":"truncate_karma_reason(reason:String|Nil):String|Nil-instance-method","name":"truncate_karma_reason","doc":"Return the first 500 characters of the given *reason*","summary":"<p>Return the first 500 characters of the given <em>reason</em></p>","abstract":false,"args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"}],"args_string":"(reason : String | Nil) : String | Nil","args_html":"(reason : String | Nil) : String | Nil","location":{"filename":"src/private-parlor-xt/handlers/hears_handler.cr","line_number":41,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handler.cr#L41"},"def":{"name":"truncate_karma_reason","args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"}],"return_type":"String | ::Nil","visibility":"Public","body":"if reason\nelse\n  return\nend\nreason[0, 500]\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/HelpCommand","path":"PrivateParlorXT/HelpCommand.html","kind":"class","full_name":"PrivateParlorXT::HelpCommand","name":"HelpCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/help_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/help_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to view the commands that one can use","summary":"<p>A command used to view the commands that one can use</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Returns a message containing commands that the sender of the *message* can use","summary":"<p>Returns a message containing commands that the sender of the <em>message</em> can use</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/help_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/help_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nupdate_user_activity(user, services)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, help(user, services.access.ranks, services))\n"}},{"html_id":"help(user:User,ranks:Hash(Int32,Rank),services:Services):String-instance-method","name":"help","doc":"Returns a generated message containing the commands the user can use based on his rank.","summary":"<p>Returns a generated message containing the commands the user can use based on his rank.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"ranks","external_name":"ranks","restriction":"Hash(Int32, Rank)"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, ranks : Hash(Int32, Rank), services : Services) : String","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, ranks : Hash(Int32, <a href=\"../PrivateParlorXT/Rank.html\">Rank</a>), services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/help_command.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/help_command.cr#L22"},"def":{"name":"help","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"ranks","external_name":"ranks","restriction":"Hash(Int32, Rank)"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"ranked = {CommandPermissions::Promote => \"/promote [name/OID/ID] [rank] - #{services.descriptions.promote}\", CommandPermissions::PromoteSame => \"/promote [name/OID/ID] [rank] - #{services.descriptions.promote}\", CommandPermissions::PromoteLower => \"/promote [name/OID/ID] [rank] - #{services.descriptions.promote}\", CommandPermissions::Demote => \"/demote [name/OID/ID] [rank] - #{services.descriptions.demote}\", CommandPermissions::Ranksay => \"/#{ranks[user.rank].name.downcase}say [text] - #{services.descriptions.ranksay}\", CommandPermissions::Sign => \"/sign [text] - #{services.descriptions.sign}\", CommandPermissions::TSign => \"/tsign [text] - #{services.descriptions.tsign}\", CommandPermissions::Uncooldown => \"/uncooldown [name/OID] - #{services.descriptions.uncooldown}\", CommandPermissions::Whitelist => \"/whitelist [ID] - #{services.descriptions.whitelist}\", CommandPermissions::Purge => \"/purge - #{services.descriptions.purge}\", CommandPermissions::MotdSet => \"/motd - #{services.descriptions.motd_set}\", CommandPermissions::Unblacklist => \"/unblacklist [name/ID]  - #{services.descriptions.unblacklist}\"}\nreply_required = {CommandPermissions::Upvote => \"+1 - #{services.descriptions.upvote}\", CommandPermissions::Downvote => \"-1 - #{services.descriptions.downvote}\", CommandPermissions::Warn => \"/warn [reason] - #{services.descriptions.warn}\", CommandPermissions::Delete => \"/delete [reason] - #{services.descriptions.delete}\", CommandPermissions::Spoiler => \"/spoiler - #{services.descriptions.spoiler}\", CommandPermissions::Remove => \"/remove [reason] - #{services.descriptions.remove}\", CommandPermissions::Blacklist => \"/blacklist [reason] - #{services.descriptions.blacklist}\", CommandPermissions::RankedInfo => \"/info - #{services.descriptions.ranked_info}\", CommandPermissions::Reveal => \"/reveal - #{services.descriptions.reveal}\", CommandPermissions::Pin => \"/pin - #{services.descriptions.pin}\", CommandPermissions::Unpin => \"/unpin - #{services.descriptions.unpin}\"}\nString.build do |str|\n  str << services.replies.help_header\n  str << \"\\n\"\n  str << (Format.escape_mdv2(\"/start - #{services.descriptions.start}\\n\"))\n  str << (Format.escape_mdv2(\"/stop - #{services.descriptions.stop}\\n\"))\n  str << (Format.escape_mdv2(\"/info - #{services.descriptions.info}\\n\"))\n  str << (Format.escape_mdv2(\"/users - #{services.descriptions.users}\\n\"))\n  str << (Format.escape_mdv2(\"/version - #{services.descriptions.version}\\n\"))\n  str << (Format.escape_mdv2(\"/toggle_karma - #{services.descriptions.toggle_karma}\\n\"))\n  str << (Format.escape_mdv2(\"/toggle_debug - #{services.descriptions.toggle_debug}\\n\"))\n  str << (Format.escape_mdv2(\"/tripcode - #{services.descriptions.tripcode}\\n\"))\n  str << (Format.escape_mdv2(\"/motd - #{services.descriptions.motd}\\n\"))\n  str << (Format.escape_mdv2(\"/help - #{services.descriptions.help}\\n\"))\n  str << (Format.escape_mdv2(\"/stats - #{services.descriptions.stats}\\n\"))\n  if rank = ranks[user.rank]?\n  else\n    next\n  end\n  rank_commands = [] of String\n  reply_commands = [] of String\n  if rank.command_permissions.includes?(CommandPermissions::RanksayLower)\n    lower_ranks = ranks.select do |k, _|\n      k <= user.rank && (k != -10)\n    end\n    lower_ranks.each do |_, v|\n      ranksay_permissions = Set {CommandPermissions::Ranksay, CommandPermissions::RanksayLower}\n      if (v.command_permissions & ranksay_permissions).empty?\n      else\n        rank_commands << (Format.escape_mdv2(\"/#{services.access.ranksay(v.name)}say [text] - #{services.descriptions.ranksay}\"))\n      end\n    end\n  end\n  rank.command_permissions.each do |permission|\n    if ranked.keys.includes?(permission)\n      rank_commands << (Format.escape_mdv2(ranked[permission]))\n    else\n      if reply_required.keys.includes?(permission)\n        reply_commands << (Format.escape_mdv2(reply_required[permission]))\n      end\n    end\n  end\n  if rank_commands.empty?\n  else\n    str << \"\\n\"\n    str << (Format.substitute_reply(services.replies.help_rank_commands, {\"rank\" => rank.name}))\n    str << \"\\n\"\n    rank_commands.each do |line|\n      str << \"#{line}\\n\"\n    end\n  end\n  if reply_commands.empty?\n  else\n    str << \"\\n\"\n    str << services.replies.help_reply_commands\n    str << \"\\n\"\n    reply_commands.each do |line|\n      str << \"#{line}\\n\"\n    end\n  end\nend\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/History","path":"PrivateParlorXT/History.html","kind":"class","full_name":"PrivateParlorXT::History","name":"History","abstract":true,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/history/history.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L5"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"private-parlor-xt/PrivateParlorXT/CachedHistory","kind":"class","full_name":"PrivateParlorXT::CachedHistory","name":"CachedHistory"},{"html_id":"private-parlor-xt/PrivateParlorXT/SQLiteHistory","kind":"class","full_name":"PrivateParlorXT::SQLiteHistory","name":"SQLiteHistory"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A base class for objects that store the history of sent messages so that they can be referenced later for replies, deletions, or other commands","summary":"<p>A base class for objects that store the history of sent messages so that they can be referenced later for replies, deletions, or other commands</p>","constructors":[{"html_id":"new(lifespan:Time::Span)-class-method","name":"new","doc":"Initialize a message `History` where messages older than `lifespan` are considered expired","summary":"<p>Initialize a message <code><a href=\"../PrivateParlorXT/History.html\">History</a></code> where messages older than <code><a href=\"../PrivateParlorXT/History.html#lifespan%3ATime%3A%3ASpan-instance-method\">#lifespan</a></code> are considered expired</p>","abstract":false,"args":[{"name":"lifespan","external_name":"lifespan","restriction":"Time::Span"}],"args_string":"(lifespan : Time::Span)","args_html":"(lifespan : Time::Span)","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L10"},"def":{"name":"new","args":[{"name":"lifespan","external_name":"lifespan","restriction":"Time::Span"}],"visibility":"Public","body":"_ = allocate\n_.initialize(lifespan)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_rating(message:MessageID,user:UserID):Bool-instance-method","name":"add_rating","doc":"Adds a rating entry to the database with the given data\n\nReturns `true` if the user's rating was successfully added; `false` if the user's rating already exists.","summary":"<p>Adds a rating entry to the database with the given data</p>","abstract":true,"args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(message : MessageID, user : UserID) : Bool","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":43,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L43"},"def":{"name":"add_rating","args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":""}},{"html_id":"add_to_history(origin:MessageID,receiver:MessageID,receiver_id:UserID):Nil-instance-method","name":"add_to_history","doc":"Add a receiver message to the `History`","summary":"<p>Add a receiver message to the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":true,"args":[{"name":"origin","external_name":"origin","restriction":"MessageID"},{"name":"receiver","external_name":"receiver","restriction":"MessageID"},{"name":"receiver_id","external_name":"receiver_id","restriction":"UserID"}],"args_string":"(origin : MessageID, receiver : MessageID, receiver_id : UserID) : Nil","args_html":"(origin : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, receiver : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, receiver_id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Nil","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":23,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L23"},"def":{"name":"add_to_history","args":[{"name":"origin","external_name":"origin","restriction":"MessageID"},{"name":"receiver","external_name":"receiver","restriction":"MessageID"},{"name":"receiver_id","external_name":"receiver_id","restriction":"UserID"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"add_warning(message:MessageID):Nil-instance-method","name":"add_warning","doc":"Adds a warning to the given message","summary":"<p>Adds a warning to the given message</p>","abstract":true,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Nil","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":46,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L46"},"def":{"name":"add_warning","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"close-instance-method","name":"close","doc":"Cleanup when finished with `History`\n\nMainly applicable for implementations using a database","summary":"<p>Cleanup when finished with <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L16"},"def":{"name":"close","visibility":"Public","body":""}},{"html_id":"delete_message_group(message:MessageID):MessageID|Nil-instance-method","name":"delete_message_group","doc":"Delete a message group from the `History`","summary":"<p>Delete a message group from the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":true,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : MessageID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Nil","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":57,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L57"},"def":{"name":"delete_message_group","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"MessageID | ::Nil","visibility":"Public","body":""}},{"html_id":"expire:Nil-instance-method","name":"expire","doc":"Deletes old messages from the `History`\n\nThis should be invoked as a recurring task","summary":"<p>Deletes old messages from the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":true,"location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":62,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L62"},"def":{"name":"expire","return_type":"Nil","visibility":"Public","body":""}},{"html_id":"lifespan:Time::Span-instance-method","name":"lifespan","doc":"Returns the `Time::Span` for which a message can exist before expiring","summary":"<p>Returns the <code>Time::Span</code> for which a message can exist before expiring</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L7"},"def":{"name":"lifespan","return_type":"Time::Span","visibility":"Public","body":"@lifespan"}},{"html_id":"messages_from_user(user:UserID):Set(MessageID)-instance-method","name":"messages_from_user","doc":"Get all message IDs sent by a given user for purging messages","summary":"<p>Get all message IDs sent by a given user for purging messages</p>","abstract":true,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Set(MessageID)","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Set(<a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>)","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":38,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L38"},"def":{"name":"messages_from_user","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Set(MessageID)","visibility":"Public","body":""}},{"html_id":"new_message(sender_id:UserID,origin:MessageID):MessageID-instance-method","name":"new_message","doc":"Create a new message group and add it to the `History`","summary":"<p>Create a new message group and add it to the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":true,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"UserID"},{"name":"origin","external_name":"origin","restriction":"MessageID"}],"args_string":"(sender_id : UserID, origin : MessageID) : MessageID","args_html":"(sender_id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, origin : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":20,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L20"},"def":{"name":"new_message","args":[{"name":"sender_id","external_name":"sender_id","restriction":"UserID"},{"name":"origin","external_name":"origin","restriction":"MessageID"}],"return_type":"MessageID","visibility":"Public","body":""}},{"html_id":"origin_message(message:MessageID):MessageID|Nil-instance-method","name":"origin_message","doc":"Get the message ID of the original message associated with the given message ID","summary":"<p>Get the message ID of the original message associated with the given message ID</p>","abstract":true,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : MessageID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Nil","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":26,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L26"},"def":{"name":"origin_message","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"MessageID | ::Nil","visibility":"Public","body":""}},{"html_id":"purge_receivers(messages:Set(MessageID)):Hash(UserID,Array(MessageID))-instance-method","name":"purge_receivers","doc":"Get a hash containing an array of message IDs to delete associated with the users who received a message in the given set.\nUsed for the `PurgeCommand`\nNOTE: The returned array of message IDs should be sorted in descending order (most recent messages first)","summary":"<p>Get a hash containing an array of message IDs to delete associated with the users who received a message in the given set.</p>","abstract":true,"args":[{"name":"messages","external_name":"messages","restriction":"Set(MessageID)"}],"args_string":"(messages : Set(MessageID)) : Hash(UserID, Array(MessageID))","args_html":"(messages : Set(<a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>)) : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, Array(<a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>))","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":54,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L54"},"def":{"name":"purge_receivers","args":[{"name":"messages","external_name":"messages","restriction":"Set(MessageID)"}],"return_type":"Hash(UserID, Array(MessageID))","visibility":"Public","body":""}},{"html_id":"receiver_message(message:MessageID,receiver:UserID):MessageID|Nil-instance-method","name":"receiver_message","doc":"Get the original message ID associated with the given message ID and receiver ID","summary":"<p>Get the original message ID associated with the given message ID and receiver ID</p>","abstract":true,"args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"receiver","external_name":"receiver","restriction":"UserID"}],"args_string":"(message : MessageID, receiver : UserID) : MessageID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, receiver : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Nil","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":32,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L32"},"def":{"name":"receiver_message","args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"receiver","external_name":"receiver","restriction":"UserID"}],"return_type":"MessageID | ::Nil","visibility":"Public","body":""}},{"html_id":"receivers(message:MessageID):Hash(UserID,MessageID)-instance-method","name":"receivers","doc":"Get a hash of all users and receiver message IDs associated with the given message ID","summary":"<p>Get a hash of all users and receiver message IDs associated with the given message ID</p>","abstract":true,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : Hash(UserID, MessageID)","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>)","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":29,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L29"},"def":{"name":"receivers","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Hash(UserID, MessageID)","visibility":"Public","body":""}},{"html_id":"sender(message:MessageID):UserID|Nil-instance-method","name":"sender","doc":"Get the sender of the original message referenced by the given message ID","summary":"<p>Get the sender of the original message referenced by the given message ID</p>","abstract":true,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : UserID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a> | Nil","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":35,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L35"},"def":{"name":"sender","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"UserID | ::Nil","visibility":"Public","body":""}},{"html_id":"warned?(message:MessageID):Bool|Nil-instance-method","name":"warned?","doc":"Returns `true` if the given message was already warned; `false` or nil otherwise","summary":"<p>Returns <code>true</code> if the given message was already warned; <code>false</code> or nil otherwise</p>","abstract":true,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : Bool | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/history/history.cr","line_number":49,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/history.cr#L49"},"def":{"name":"warned?","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Bool | ::Nil","visibility":"Public","body":""}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/InfoCommand","path":"PrivateParlorXT/InfoCommand.html","kind":"class","full_name":"PrivateParlorXT::InfoCommand","name":"InfoCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/info_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/info_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to get information about one's account, or get obfuscated information about another user if one is authorized to see such information","summary":"<p>A command used to get information about one's account, or get obfuscated information about another user if one is authorized to see such information</p>","constructors":[{"html_id":"new(config:Config)-class-method","name":"new","doc":"Creates an instance of `InfoCommand`","summary":"<p>Creates an instance of <code><a href=\"../PrivateParlorXT/InfoCommand.html\">InfoCommand</a></code></p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(config : Config)","args_html":"(config : <a href=\"../PrivateParlorXT/Config.html\">Config</a>)","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/info_command.cr","line_number":12,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/info_command.cr#L12"},"def":{"name":"new","args":[{"name":"config","external_name":"config","restriction":"Config"}],"visibility":"Public","body":"_ = allocate\n_.initialize(config)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"cooldown_until(expiration:Time|Nil,services:Services):String-instance-method","name":"cooldown_until","doc":"Format the cooldown until text based on the given *expiration*","summary":"<p>Format the cooldown until text based on the given <em>expiration</em></p>","abstract":false,"args":[{"name":"expiration","external_name":"expiration","restriction":"Time | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(expiration : Time | Nil, services : Services) : String","args_html":"(expiration : Time | Nil, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/info_command.cr","line_number":75,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/info_command.cr#L75"},"def":{"name":"cooldown_until","args":[{"name":"expiration","external_name":"expiration","restriction":"Time | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"if time = Format.time(expiration, services.locale.time_format)\n  \"#{services.replies.cooldown_true} #{time}\"\nelse\n  services.replies.cooldown_false\nend"}},{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Returns a message containing information about the user's account or the user who sent the message this *message* replies to","summary":"<p>Returns a message containing information about the user's account or the user who sent the message this <em>message</em> replies to</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/info_command.cr","line_number":17,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/info_command.cr#L17"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif reply = message.reply_to_message\n  response = ranked_info(user, message, reply, services)\nelse\n  response = user_info(user, services)\nend\nif response\nelse\n  return\nend\nupdate_user_activity(user, services)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id.to_i64), user.id, response)\n"}},{"html_id":"ranked_info(user:User,message:Tourmaline::Message,reply:Tourmaline::Message,services:Services):String|Nil-instance-method","name":"ranked_info","doc":"Returns a `String` containing obfuscated information about a user the who sent the *reply*","summary":"<p>Returns a <code>String</code> containing obfuscated information about a user the who sent the <em>reply</em></p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, reply : Tourmaline::Message, services : Services) : String | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, reply : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String | Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/info_command.cr","line_number":34,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/info_command.cr#L34"},"def":{"name":"ranked_info","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String | ::Nil","visibility":"Public","body":"if authorized?(user, message, :RankedInfo, services)\nelse\n  return\nend\nif reply_user = reply_user(user, reply, services)\nelse\n  return\nend\nreply_user.remove_cooldown\nFormat.substitute_reply(services.replies.ranked_info, {\"oid\" => reply_user.obfuscated_id.to_s, \"karma\" => reply_user.obfuscated_karma.to_s, \"cooldown_until\" => cooldown_until(reply_user.cooldown_until, services)})\n"}},{"html_id":"smiley(warnings:Int32):String-instance-method","name":"smiley","doc":"Returns a smiley based on the number of given warnings","summary":"<p>Returns a smiley based on the number of given warnings</p>","abstract":false,"args":[{"name":"warnings","external_name":"warnings","restriction":"Int32"}],"args_string":"(warnings : Int32) : String","args_html":"(warnings : Int32) : String","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/info_command.cr","line_number":91,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/info_command.cr#L91"},"def":{"name":"smiley","args":[{"name":"warnings","external_name":"warnings","restriction":"Int32"}],"return_type":"String","visibility":"Public","body":"case warnings\nwhen (0..0)\n  @smileys[0]\nwhen (1..2)\n  @smileys[1]\nwhen (2..5)\n  @smileys[2]\nelse\n  @smileys[3]\nend"}},{"html_id":"user_info(user:User,services:Services):String|Nil-instance-method","name":"user_info","doc":"Returns a `String` containing information about the given *user*","summary":"<p>Returns a <code>String</code> containing information about the given <em>user</em></p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : String | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String | Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/info_command.cr","line_number":49,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/info_command.cr#L49"},"def":{"name":"user_info","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String | ::Nil","visibility":"Public","body":"karma_levels = services.config.karma_levels\nif karma_levels.empty?\n  current_level = \"\"\nelse\n  current_level = (karma_levels.find({(..), \"\"}) do |range, _|\n    range === user.karma\n  end)[1]\nend\nuser.remove_cooldown\nFormat.substitute_reply(services.replies.user_info, {\"oid\" => user.obfuscated_id.to_s, \"username\" => user.formatted_name, \"rank_val\" => user.rank.to_s, \"rank\" => services.access.rank_name(user.rank), \"karma\" => user.karma.to_s, \"karma_level\" => current_level.empty? ? nil : \"(#{current_level})\", \"warnings\" => user.warnings.to_s, \"warn_expiry\" => warn_expiry(user.warn_expiry, services), \"smiley\" => smiley(user.warnings), \"cooldown_until\" => cooldown_until(user.cooldown_until, services)})\n"}},{"html_id":"warn_expiry(expiration:Time|Nil,services:Services):String|Nil-instance-method","name":"warn_expiry","doc":"Format the warning expiration text based on the given *expiration*","summary":"<p>Format the warning expiration text based on the given <em>expiration</em></p>","abstract":false,"args":[{"name":"expiration","external_name":"expiration","restriction":"Time | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(expiration : Time | Nil, services : Services) : String | Nil","args_html":"(expiration : Time | Nil, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String | Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/info_command.cr","line_number":84,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/info_command.cr#L84"},"def":{"name":"warn_expiry","args":[{"name":"expiration","external_name":"expiration","restriction":"Time | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String | ::Nil","visibility":"Public","body":"if time = Format.time(expiration, services.locale.time_format)\n  services.replies.info_warning.gsub(\"{warn_expiry}\", \"#{time}\")\nend"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/KarmaHandler","path":"PrivateParlorXT/KarmaHandler.html","kind":"class","full_name":"PrivateParlorXT::KarmaHandler","name":"KarmaHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L8"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A module that requires users to have a certain amount of karma before sending a message\n\nEach message has a specific among of karma necessary before a message of that type can be sent.\nIf a message of that type is sent, the amount for that type will be deducted from the user's karma.","summary":"<p>A module that requires users to have a certain amount of karma before sending a message</p>","constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L9"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(cutoff_rank:Int32=10,karma_text:Int32=0,karma_animation:Int32=5,karma_audio:Int32=2,karma_document:Int32=2,karma_video:Int32=10,karma_video_note:Int32=10,karma_voice:Int32=2,karma_photo:Int32=5,karma_media_group:Int32=10,karma_poll:Int32=20,karma_forwarded_message:Int32=10,karma_sticker:Int32=2,karma_venue:Int32=10,karma_location:Int32=10,karma_contact:Int32=10)-class-method","name":"new","abstract":false,"args":[{"name":"cutoff_rank","default_value":"10","external_name":"cutoff_rank","restriction":"Int32"},{"name":"karma_text","default_value":"0","external_name":"karma_text","restriction":"Int32"},{"name":"karma_animation","default_value":"5","external_name":"karma_animation","restriction":"Int32"},{"name":"karma_audio","default_value":"2","external_name":"karma_audio","restriction":"Int32"},{"name":"karma_document","default_value":"2","external_name":"karma_document","restriction":"Int32"},{"name":"karma_video","default_value":"10","external_name":"karma_video","restriction":"Int32"},{"name":"karma_video_note","default_value":"10","external_name":"karma_video_note","restriction":"Int32"},{"name":"karma_voice","default_value":"2","external_name":"karma_voice","restriction":"Int32"},{"name":"karma_photo","default_value":"5","external_name":"karma_photo","restriction":"Int32"},{"name":"karma_media_group","default_value":"10","external_name":"karma_media_group","restriction":"Int32"},{"name":"karma_poll","default_value":"20","external_name":"karma_poll","restriction":"Int32"},{"name":"karma_forwarded_message","default_value":"10","external_name":"karma_forwarded_message","restriction":"Int32"},{"name":"karma_sticker","default_value":"2","external_name":"karma_sticker","restriction":"Int32"},{"name":"karma_venue","default_value":"10","external_name":"karma_venue","restriction":"Int32"},{"name":"karma_location","default_value":"10","external_name":"karma_location","restriction":"Int32"},{"name":"karma_contact","default_value":"10","external_name":"karma_contact","restriction":"Int32"}],"args_string":"(cutoff_rank : Int32 = 10, karma_text : Int32 = 0, karma_animation : Int32 = 5, karma_audio : Int32 = 2, karma_document : Int32 = 2, karma_video : Int32 = 10, karma_video_note : Int32 = 10, karma_voice : Int32 = 2, karma_photo : Int32 = 5, karma_media_group : Int32 = 10, karma_poll : Int32 = 20, karma_forwarded_message : Int32 = 10, karma_sticker : Int32 = 2, karma_venue : Int32 = 10, karma_location : Int32 = 10, karma_contact : Int32 = 10)","args_html":"(cutoff_rank : Int32 = <span class=\"n\">10</span>, karma_text : Int32 = <span class=\"n\">0</span>, karma_animation : Int32 = <span class=\"n\">5</span>, karma_audio : Int32 = <span class=\"n\">2</span>, karma_document : Int32 = <span class=\"n\">2</span>, karma_video : Int32 = <span class=\"n\">10</span>, karma_video_note : Int32 = <span class=\"n\">10</span>, karma_voice : Int32 = <span class=\"n\">2</span>, karma_photo : Int32 = <span class=\"n\">5</span>, karma_media_group : Int32 = <span class=\"n\">10</span>, karma_poll : Int32 = <span class=\"n\">20</span>, karma_forwarded_message : Int32 = <span class=\"n\">10</span>, karma_sticker : Int32 = <span class=\"n\">2</span>, karma_venue : Int32 = <span class=\"n\">10</span>, karma_location : Int32 = <span class=\"n\">10</span>, karma_contact : Int32 = <span class=\"n\">10</span>)","location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":75,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L75"},"def":{"name":"new","args":[{"name":"cutoff_rank","default_value":"10","external_name":"cutoff_rank","restriction":"Int32"},{"name":"karma_text","default_value":"0","external_name":"karma_text","restriction":"Int32"},{"name":"karma_animation","default_value":"5","external_name":"karma_animation","restriction":"Int32"},{"name":"karma_audio","default_value":"2","external_name":"karma_audio","restriction":"Int32"},{"name":"karma_document","default_value":"2","external_name":"karma_document","restriction":"Int32"},{"name":"karma_video","default_value":"10","external_name":"karma_video","restriction":"Int32"},{"name":"karma_video_note","default_value":"10","external_name":"karma_video_note","restriction":"Int32"},{"name":"karma_voice","default_value":"2","external_name":"karma_voice","restriction":"Int32"},{"name":"karma_photo","default_value":"5","external_name":"karma_photo","restriction":"Int32"},{"name":"karma_media_group","default_value":"10","external_name":"karma_media_group","restriction":"Int32"},{"name":"karma_poll","default_value":"20","external_name":"karma_poll","restriction":"Int32"},{"name":"karma_forwarded_message","default_value":"10","external_name":"karma_forwarded_message","restriction":"Int32"},{"name":"karma_sticker","default_value":"2","external_name":"karma_sticker","restriction":"Int32"},{"name":"karma_venue","default_value":"10","external_name":"karma_venue","restriction":"Int32"},{"name":"karma_location","default_value":"10","external_name":"karma_location","restriction":"Int32"},{"name":"karma_contact","default_value":"10","external_name":"karma_contact","restriction":"Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(cutoff_rank, karma_text, karma_animation, karma_audio, karma_document, karma_video, karma_video_note, karma_voice, karma_photo, karma_media_group, karma_poll, karma_forwarded_message, karma_sticker, karma_venue, karma_location, karma_contact)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"cutoff_rank:Int32-instance-method","name":"cutoff_rank","doc":"The value of the `Rank` at which users of this `Rank` and above do not have to spend karma to post messages","summary":"<p>The value of the <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> at which users of this <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> and above do not have to spend karma to post messages</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L13"},"def":{"name":"cutoff_rank","return_type":"Int32","visibility":"Public","body":"@cutoff_rank"}},{"html_id":"karma_animation:Int32-instance-method","name":"karma_animation","doc":"The amount of karma necessary to post a GIF","summary":"<p>The amount of karma necessary to post a GIF</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":21,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L21"},"def":{"name":"karma_animation","return_type":"Int32","visibility":"Public","body":"@karma_animation"}},{"html_id":"karma_audio:Int32-instance-method","name":"karma_audio","doc":"The amount of karma necessary to post an audio message","summary":"<p>The amount of karma necessary to post an audio message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":25,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L25"},"def":{"name":"karma_audio","return_type":"Int32","visibility":"Public","body":"@karma_audio"}},{"html_id":"karma_contact:Int32-instance-method","name":"karma_contact","doc":"The amount of karma necessary to post a contact","summary":"<p>The amount of karma necessary to post a contact</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":73,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L73"},"def":{"name":"karma_contact","return_type":"Int32","visibility":"Public","body":"@karma_contact"}},{"html_id":"karma_document:Int32-instance-method","name":"karma_document","doc":"The amount of karma necessary to post a file","summary":"<p>The amount of karma necessary to post a file</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":29,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L29"},"def":{"name":"karma_document","return_type":"Int32","visibility":"Public","body":"@karma_document"}},{"html_id":"karma_forwarded_message:Int32-instance-method","name":"karma_forwarded_message","doc":"The amount of karma necessary to post a forwarded message","summary":"<p>The amount of karma necessary to post a forwarded message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":57,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L57"},"def":{"name":"karma_forwarded_message","return_type":"Int32","visibility":"Public","body":"@karma_forwarded_message"}},{"html_id":"karma_location:Int32-instance-method","name":"karma_location","doc":"The amount of karma necessary to post a location","summary":"<p>The amount of karma necessary to post a location</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":69,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L69"},"def":{"name":"karma_location","return_type":"Int32","visibility":"Public","body":"@karma_location"}},{"html_id":"karma_media_group:Int32-instance-method","name":"karma_media_group","doc":"The amount of karma necessary to post an album","summary":"<p>The amount of karma necessary to post an album</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":49,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L49"},"def":{"name":"karma_media_group","return_type":"Int32","visibility":"Public","body":"@karma_media_group"}},{"html_id":"karma_photo:Int32-instance-method","name":"karma_photo","doc":"The amount of karma necessary to post a photo","summary":"<p>The amount of karma necessary to post a photo</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":45,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L45"},"def":{"name":"karma_photo","return_type":"Int32","visibility":"Public","body":"@karma_photo"}},{"html_id":"karma_poll:Int32-instance-method","name":"karma_poll","doc":"The amount of karma necessary to post a poll","summary":"<p>The amount of karma necessary to post a poll</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":53,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L53"},"def":{"name":"karma_poll","return_type":"Int32","visibility":"Public","body":"@karma_poll"}},{"html_id":"karma_sticker:Int32-instance-method","name":"karma_sticker","doc":"The amount of karma necessary to post a sticker","summary":"<p>The amount of karma necessary to post a sticker</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":61,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L61"},"def":{"name":"karma_sticker","return_type":"Int32","visibility":"Public","body":"@karma_sticker"}},{"html_id":"karma_text:Int32-instance-method","name":"karma_text","doc":"The amount of karma necessary to post a text message","summary":"<p>The amount of karma necessary to post a text message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":17,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L17"},"def":{"name":"karma_text","return_type":"Int32","visibility":"Public","body":"@karma_text"}},{"html_id":"karma_venue:Int32-instance-method","name":"karma_venue","doc":"The amount of karma necessary to post a venue","summary":"<p>The amount of karma necessary to post a venue</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":65,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L65"},"def":{"name":"karma_venue","return_type":"Int32","visibility":"Public","body":"@karma_venue"}},{"html_id":"karma_video:Int32-instance-method","name":"karma_video","doc":"The amount of karma necessary to post a video","summary":"<p>The amount of karma necessary to post a video</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":33,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L33"},"def":{"name":"karma_video","return_type":"Int32","visibility":"Public","body":"@karma_video"}},{"html_id":"karma_video_note:Int32-instance-method","name":"karma_video_note","doc":"The amount of karma necessary to post a video note","summary":"<p>The amount of karma necessary to post a video note</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":37,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L37"},"def":{"name":"karma_video_note","return_type":"Int32","visibility":"Public","body":"@karma_video_note"}},{"html_id":"karma_voice:Int32-instance-method","name":"karma_voice","doc":"The amount of karma necessary to post a voice message","summary":"<p>The amount of karma necessary to post a voice message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/karma_economy/karma_handler.cr","line_number":41,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/karma_economy/karma_handler.cr#L41"},"def":{"name":"karma_voice","return_type":"Int32","visibility":"Public","body":"@karma_voice"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/KarmaInfoCommand","path":"PrivateParlorXT/KarmaInfoCommand.html","kind":"class","full_name":"PrivateParlorXT::KarmaInfoCommand","name":"KarmaInfoCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/karma_info_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/karma_info_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to obtain information about one's current karma and karma level progress","summary":"<p>A command used to obtain information about one's current karma and karma level progress</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Returns a message containing the user's karma level progress if karma levels are not empty","summary":"<p>Returns a message containing the user's karma level progress if karma levels are not empty</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/karma_info_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/karma_info_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nkarma_levels = services.config.karma_levels\nif karma_levels.empty?\n  return\nend\nupdate_user_activity(user, services)\ncurrent_level = next_level = \"\"\npercentage = 0.0_f32\nlimit = 0\nlevel_keys = karma_levels.keys\nlevel_keys.each_with_index do |range, index|\n  if range === user.karma\n  else\n    next\n  end\n  current_level = karma_levels[range]\n  if range == karma_levels.last_key\n    next_level = \"???\"\n    limit = \"???\"\n    percentage = 100.0_f32\n  else\n    if range == karma_levels.first_key\n      next_range = level_keys[index + 1]\n      next_level = karma_levels[next_range]\n      limit = next_range.begin\n      range_begin = range.begin.to_i64\n      percentage = (((-range_begin) + user.karma) * 100) / ((-range_begin) + next_range.begin).to_f32\n    else\n      next_range = level_keys[index + 1]\n      next_level = karma_levels[next_range]\n      limit = next_range.begin\n      percentage = ((user.karma - range.begin) * 100) / (next_range.begin - range.begin).to_f32\n    end\n  end\nend\nresponse = Format.substitute_reply(services.replies.karma_info, {\"current_level\" => current_level, \"next_level\" => next_level, \"karma\" => user.karma.to_s, \"limit\" => limit.to_s, \"loading_bar\" => karma_loading_bar(percentage, services), \"percentage\" => percentage.format(decimal_places: 1, only_significant: true)})\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, response)\n"}},{"html_id":"karma_loading_bar(percentage:Float32,services:Services):String-instance-method","name":"karma_loading_bar","doc":"Formats a loading bar for the /karmainfo command","summary":"<p>Formats a loading bar for the /karmainfo command</p>","abstract":false,"args":[{"name":"percentage","external_name":"percentage","restriction":"Float32"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(percentage : Float32, services : Services) : String","args_html":"(percentage : Float32, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/karma_info_command.cr","line_number":63,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/karma_info_command.cr#L63"},"def":{"name":"karma_loading_bar","args":[{"name":"percentage","external_name":"percentage","restriction":"Float32"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"pips = (percentage.floor.to_i).divmod(10)\nif pips[0] != 10\n  String.build(10) do |str|\n    str << (services.locale.loading_bar[2] * pips[0])\n    if pips[1] >= 5\n      str << services.locale.loading_bar[1]\n    else\n      str << services.locale.loading_bar[0]\n    end\n    str << (services.locale.loading_bar[0] * (10 - (pips[0] + 1)))\n  end\nelse\n  services.locale.loading_bar[2] * 10\nend\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/KarmaSignCommand","path":"PrivateParlorXT/KarmaSignCommand.html","kind":"class","full_name":"PrivateParlorXT::KarmaSignCommand","name":"KarmaSignCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/karma_sign_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/karma_sign_command.cr#L9"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Processes karma sign messages before an `UpdateHandler` gets them\n\nThis handler expects the command handlers to be registered before the update handlers","summary":"<p>Processes karma sign messages before an <code><a href=\"../PrivateParlorXT/UpdateHandler.html\">UpdateHandler</a></code> gets them</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Preformats the given *message* with a karma level signature if the *message* meets requirements","summary":"<p>Preformats the given <em>message</em> with a karma level signature if the <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/karma_sign_command.cr","line_number":11,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/karma_sign_command.cr#L11"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nkarma_levels = services.config.karma_levels\nif karma_levels.empty?\n  return\nend\ntext, entities = Format.validate_text_and_entities(message, user, services)\nif text\nelse\n  return\nend\nif arg = Format.get_arg(text)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.missing_args)\nend\nif spamming?(user, message, arg, services)\n  return\nend\nif unique?(user, message, services, arg)\nelse\n  return\nend\ntext, entities = Format.format_text(text, entities, false, services)\nentities = remove_command_entity(text, entities, arg)\ncurrent_level = get_karma_level(karma_levels, user)\ntext, entities = karma_sign(current_level, arg, entities)\nif message.text\n  message.text = text\n  message.entities = entities\nelse\n  if message.caption\n    message.caption = text\n    message.caption_entities = entities\n  end\nend\nmessage.preformatted = true\n"}},{"html_id":"get_karma_level(karma_levels:Hash(Range(Int32,Int32),String),user:User):String-instance-method","name":"get_karma_level","doc":"Returns the name of the karma level whose range contains the *user's* karma","summary":"<p>Returns the name of the karma level whose range contains the <em>user's</em> karma</p>","abstract":false,"args":[{"name":"karma_levels","external_name":"karma_levels","restriction":"Hash(Range(Int32, Int32), String)"},{"name":"user","external_name":"user","restriction":"User"}],"args_string":"(karma_levels : Hash(Range(Int32, Int32), String), user : User) : String","args_html":"(karma_levels : Hash(Range(Int32, Int32), String), user : <a href=\"../PrivateParlorXT/User.html\">User</a>) : String","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/karma_sign_command.cr","line_number":70,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/karma_sign_command.cr#L70"},"def":{"name":"get_karma_level","args":[{"name":"karma_levels","external_name":"karma_levels","restriction":"Hash(Range(Int32, Int32), String)"},{"name":"user","external_name":"user","restriction":"User"}],"return_type":"String","visibility":"Public","body":"(karma_levels.find({(..), \"\"}) do |range, _|\n  range === user.karma\nend)[1]"}},{"html_id":"karma_sign(level:String,arg:String,entities:Array(Tourmaline::MessageEntity)):Tuple(String,Array(Tourmaline::MessageEntity))-instance-method","name":"karma_sign","doc":"Format the karma level sign based on the given *level* appending the signature to *arg*","summary":"<p>Format the karma level sign based on the given <em>level</em> appending the signature to <em>arg</em></p>","abstract":false,"args":[{"name":"level","external_name":"level","restriction":"String"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(level : String, arg : String, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","args_html":"(level : String, arg : String, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/karma_sign_command.cr","line_number":75,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/karma_sign_command.cr#L75"},"def":{"name":"karma_sign","args":[{"name":"level","external_name":"level","restriction":"String"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"Tuple(String, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"signature = \"t. #{level}\"\nsignature_size = signature.to_utf16.size\nentities.concat([Tourmaline::MessageEntity.new(\"bold\", arg.to_utf16.size + 1, signature_size), Tourmaline::MessageEntity.new(\"italic\", arg.to_utf16.size + 1, signature_size)])\nreturn {\"#{arg} #{signature}\", entities}\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,arg:String,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming karma level signatures\n\nReturns `true` if the user is spamming karma level signatures or unformatted text is spammy, returns `false` otherwise","summary":"<p>Checks if the user is spamming karma level signatures</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, arg : String, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, arg : String, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/karma_sign_command.cr","line_number":53,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/karma_sign_command.cr#L53"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif message.text && (spam.spammy_text?(user.id, arg))\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nif spam.spammy_sign?(user.id, services.config.sign_limit_interval)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.sign_spam)\n  return true\nend\nfalse\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Locale","path":"PrivateParlorXT/Locale.html","kind":"class","full_name":"PrivateParlorXT::Locale","name":"Locale","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/locale/locale.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/locale.cr#L8"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A container for general localization values","summary":"<p>A container for general localization values</p>","constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/private-parlor-xt/locale/locale.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/locale.cr#L9"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}}],"instance_methods":[{"html_id":"change:Array(String)-instance-method","name":"change","doc":"Returns an array of symbols for increasing and decreasing change","summary":"<p>Returns an array of symbols for increasing and decreasing change</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/locale.cr","line_number":29,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/locale.cr#L29"},"def":{"name":"change","return_type":"Array(String)","visibility":"Public","body":"@change"}},{"html_id":"loading_bar:Array(String)-instance-method","name":"loading_bar","doc":"Returns an array of pips for the loading bar from empty, partially full, to full","summary":"<p>Returns an array of pips for the loading bar from empty, partially full, to full</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/locale.cr","line_number":25,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/locale.cr#L25"},"def":{"name":"loading_bar","return_type":"Array(String)","visibility":"Public","body":"@loading_bar"}},{"html_id":"statistics_screens:Hash(Statistics::StatScreens,String)-instance-method","name":"statistics_screens","doc":"Returns hash of `Statistics::StatScreens` to `String`, where the `String` contains the localized name for that `Statistics::StatScreens`","summary":"<p>Returns hash of <code><a href=\"../PrivateParlorXT/Statistics/StatScreens.html\">Statistics::StatScreens</a></code> to <code>String</code>, where the <code>String</code> contains the localized name for that <code><a href=\"../PrivateParlorXT/Statistics/StatScreens.html\">Statistics::StatScreens</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/locale.cr","line_number":33,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/locale.cr#L33"},"def":{"name":"statistics_screens","return_type":"Hash(Statistics::StatScreens, String)","visibility":"Public","body":"@statistics_screens"}},{"html_id":"time_format:String-instance-method","name":"time_format","doc":"Returns the format for timestamps","summary":"<p>Returns the format for timestamps</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/locale.cr","line_number":17,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/locale.cr#L17"},"def":{"name":"time_format","return_type":"String","visibility":"Public","body":"@time_format"}},{"html_id":"time_units:Array(String)-instance-method","name":"time_units","doc":"Returns an array of short time units from largest unit to smallest","summary":"<p>Returns an array of short time units from largest unit to smallest</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/locale.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/locale.cr#L13"},"def":{"name":"time_units","return_type":"Array(String)","visibility":"Public","body":"@time_units"}},{"html_id":"toggle:Array(String)-instance-method","name":"toggle","doc":"Returns an array of words for when a setting is turned off or on","summary":"<p>Returns an array of words for when a setting is turned off or on</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/locale.cr","line_number":21,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/locale.cr#L21"},"def":{"name":"toggle","return_type":"Array(String)","visibility":"Public","body":"@toggle"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Localization","path":"PrivateParlorXT/Localization.html","kind":"class","full_name":"PrivateParlorXT::Localization","name":"Localization","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/locale/localization.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/localization.cr#L9"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A container used for parsing the locale file and storing deserialized localization objects","summary":"<p>A container used for parsing the locale file and storing deserialized localization objects</p>","constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/private-parlor-xt/locale/localization.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/localization.cr#L10"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"parse_locale(path:Path,language_code:String):Localization-class-method","name":"parse_locale","doc":"Parses a file corresponding to the given *language_code* from the locales folder","summary":"<p>Parses a file corresponding to the given <em>language_code</em> from the locales folder</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path"},{"name":"language_code","external_name":"language_code","restriction":"String"}],"args_string":"(path : Path, language_code : String) : Localization","args_html":"(path : Path, language_code : String) : <a href=\"../PrivateParlorXT/Localization.html\">Localization</a>","location":{"filename":"src/private-parlor-xt/locale/localization.cr","line_number":29,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/localization.cr#L29"},"def":{"name":"parse_locale","args":[{"name":"path","external_name":"path","restriction":"Path"},{"name":"language_code","external_name":"language_code","restriction":"String"}],"return_type":"Localization","visibility":"Public","body":"begin\n  Localization.from_yaml(File.open(path.join(\"#{language_code}.yaml\")))\nrescue ex : YAML::ParseException\n  Log.error(exception: ex) do\n    \"Could not parse the given value at row #{ex.line_number}. This could be because a required value was not set or the wrong type was given.\"\n  end\n  exit\nrescue ex : File::NotFoundError | File::AccessDeniedError\n  Log.error(exception: ex) do\n    \"Could not open \\\"./locales/#{language_code}.yaml\\\". Exiting...\"\n  end\n  exit\nend"}}],"instance_methods":[{"html_id":"command_descriptions:CommandDescriptions-instance-method","name":"command_descriptions","doc":"Returns the deserialized `CommandDescriptions`","summary":"<p>Returns the deserialized <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/localization.cr","line_number":26,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/localization.cr#L26"},"def":{"name":"command_descriptions","return_type":"CommandDescriptions","visibility":"Public","body":"@command_descriptions"}},{"html_id":"locale:Locale-instance-method","name":"locale","doc":"Returns the deserialized `Locale`","summary":"<p>Returns the deserialized <code><a href=\"../PrivateParlorXT/Locale.html\">Locale</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/localization.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/localization.cr#L14"},"def":{"name":"locale","return_type":"Locale","visibility":"Public","body":"@locale"}},{"html_id":"logs:Logs-instance-method","name":"logs","doc":"Returns the deserialized `Logs`","summary":"<p>Returns the deserialized <code><a href=\"../PrivateParlorXT/Logs.html\">Logs</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/localization.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/localization.cr#L22"},"def":{"name":"logs","return_type":"Logs","visibility":"Public","body":"@logs"}},{"html_id":"replies:Replies-instance-method","name":"replies","doc":"Returns the deserialized `Replies`","summary":"<p>Returns the deserialized <code><a href=\"../PrivateParlorXT/Replies.html\">Replies</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/localization.cr","line_number":18,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/localization.cr#L18"},"def":{"name":"replies","return_type":"Replies","visibility":"Public","body":"@replies"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/LocationHandler","path":"PrivateParlorXT/LocationHandler.html","kind":"class","full_name":"PrivateParlorXT::LocationHandler","name":"LocationHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/location_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/location_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for location message updates","summary":"<p>A handler for location message updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the location message meets requirements and relays it","summary":"<p>Checks if the location message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/location_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/location_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif authorized?(user, message, :Location, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif location = message.location\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Locations, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_location(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, replies: reply_messages, effect: services.config.allow_effects ? message.effect_id : nil), location)\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming location messages\n\nReturns `true` if the user is spamming location messages, `false` otherwise","summary":"<p>Checks if the user is spamming location messages</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/location_handler.cr","line_number":50,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/location_handler.cr#L50"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_location?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a location message","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a location message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/location_handler.cr","line_number":93,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/location_handler.cr#L93"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_location >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_location)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a location message when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for location messages is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a location message when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/location_handler.cr","line_number":70,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/location_handler.cr#L70"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_location >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_location\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_location.to_s, \"type\" => \"location\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Logs","path":"PrivateParlorXT/Logs.html","kind":"class","full_name":"PrivateParlorXT::Logs","name":"Logs","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L5"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A container for various log messages","summary":"<p>A container for various log messages</p>","constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L6"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}}],"instance_methods":[{"html_id":"blacklisted:String-instance-method","name":"blacklisted","doc":"When a user gets blacklisted","summary":"<p>When a user gets blacklisted</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":50,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L50"},"def":{"name":"blacklisted","return_type":"String","visibility":"Public","body":"@blacklisted"}},{"html_id":"demoted:String-instance-method","name":"demoted","doc":"When a user has been demoted","summary":"<p>When a user has been demoted</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":30,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L30"},"def":{"name":"demoted","return_type":"String","visibility":"Public","body":"@demoted"}},{"html_id":"downvoted:String-instance-method","name":"downvoted","doc":"When a user gets downvoted with a reason","summary":"<p>When a user gets downvoted with a reason</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":78,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L78"},"def":{"name":"downvoted","return_type":"String","visibility":"Public","body":"@downvoted"}},{"html_id":"force_leave:String-instance-method","name":"force_leave","doc":"When a user forcefully removed from the bot due to having blocked it","summary":"<p>When a user forcefully removed from the bot due to having blocked it</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":106,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L106"},"def":{"name":"force_leave","return_type":"String","visibility":"Public","body":"@force_leave"}},{"html_id":"joined:String-instance-method","name":"joined","doc":"When a user joins the chat","summary":"<p>When a user joins the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L14"},"def":{"name":"joined","return_type":"String","visibility":"Public","body":"@joined"}},{"html_id":"left:String-instance-method","name":"left","doc":"When a user leaves the chat","summary":"<p>When a user leaves the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L22"},"def":{"name":"left","return_type":"String","visibility":"Public","body":"@left"}},{"html_id":"message_deleted:String-instance-method","name":"message_deleted","doc":"When a message gets deleted and a user is given a cooldown","summary":"<p>When a message gets deleted and a user is given a cooldown</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":38,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L38"},"def":{"name":"message_deleted","return_type":"String","visibility":"Public","body":"@message_deleted"}},{"html_id":"message_removed:String-instance-method","name":"message_removed","doc":"When a message gets removed","summary":"<p>When a message gets removed</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":42,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L42"},"def":{"name":"message_removed","return_type":"String","visibility":"Public","body":"@message_removed"}},{"html_id":"motd_set:String-instance-method","name":"motd_set","doc":"When the motd gets reset","summary":"<p>When the motd gets reset</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":98,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L98"},"def":{"name":"motd_set","return_type":"String","visibility":"Public","body":"@motd_set"}},{"html_id":"pinned:String-instance-method","name":"pinned","doc":"When a message gets pinned to the chat","summary":"<p>When a message gets pinned to the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":86,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L86"},"def":{"name":"pinned","return_type":"String","visibility":"Public","body":"@pinned"}},{"html_id":"promoted:String-instance-method","name":"promoted","doc":"When a user has been promoted","summary":"<p>When a user has been promoted</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":26,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L26"},"def":{"name":"promoted","return_type":"String","visibility":"Public","body":"@promoted"}},{"html_id":"ranked_message:String-instance-method","name":"ranked_message","doc":"When a ranked user sends a message signed with his rank","summary":"<p>When a ranked user sends a message signed with his rank</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":102,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L102"},"def":{"name":"ranked_message","return_type":"String","visibility":"Public","body":"@ranked_message"}},{"html_id":"reason_prefix:String-instance-method","name":"reason_prefix","doc":"Format for the reason found in warn, delete, and blacklist replies","summary":"<p>Format for the reason found in warn, delete, and blacklist replies</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":62,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L62"},"def":{"name":"reason_prefix","return_type":"String","visibility":"Public","body":"@reason_prefix"}},{"html_id":"rejoined:String-instance-method","name":"rejoined","doc":"When a user rejoins the chat","summary":"<p>When a user rejoins the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":18,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L18"},"def":{"name":"rejoined","return_type":"String","visibility":"Public","body":"@rejoined"}},{"html_id":"removed_cooldown:String-instance-method","name":"removed_cooldown","doc":"When a user's cooldown gets manually removed","summary":"<p>When a user's cooldown gets manually removed</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":46,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L46"},"def":{"name":"removed_cooldown","return_type":"String","visibility":"Public","body":"@removed_cooldown"}},{"html_id":"revealed:String-instance-method","name":"revealed","doc":"When a user privately reveals his username to another user","summary":"<p>When a user privately reveals his username to another user</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":82,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L82"},"def":{"name":"revealed","return_type":"String","visibility":"Public","body":"@revealed"}},{"html_id":"spoiled:String-instance-method","name":"spoiled","doc":"When a spoiler is given a to a message's media","summary":"<p>When a spoiler is given a to a message's media</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":66,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L66"},"def":{"name":"spoiled","return_type":"String","visibility":"Public","body":"@spoiled"}},{"html_id":"start:String-instance-method","name":"start","doc":"When the bot starts","summary":"<p>When the bot starts</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L10"},"def":{"name":"start","return_type":"String","visibility":"Public","body":"@start"}},{"html_id":"unblacklisted:String-instance-method","name":"unblacklisted","doc":"When a user gets unbanned","summary":"<p>When a user gets unbanned</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":54,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L54"},"def":{"name":"unblacklisted","return_type":"String","visibility":"Public","body":"@unblacklisted"}},{"html_id":"unpinned:String-instance-method","name":"unpinned","doc":"When a message gets unpinned from the chat","summary":"<p>When a message gets unpinned from the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":90,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L90"},"def":{"name":"unpinned","return_type":"String","visibility":"Public","body":"@unpinned"}},{"html_id":"unpinned_recent:String-instance-method","name":"unpinned_recent","doc":"When the most recently pinned message gets unpinned","summary":"<p>When the most recently pinned message gets unpinned</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":94,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L94"},"def":{"name":"unpinned_recent","return_type":"String","visibility":"Public","body":"@unpinned_recent"}},{"html_id":"unspoiled:String-instance-method","name":"unspoiled","doc":"When a media spoiler is removed from a message","summary":"<p>When a media spoiler is removed from a message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":70,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L70"},"def":{"name":"unspoiled","return_type":"String","visibility":"Public","body":"@unspoiled"}},{"html_id":"upvoted:String-instance-method","name":"upvoted","doc":"When a user gets upvoted with a reason","summary":"<p>When a user gets upvoted with a reason</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":74,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L74"},"def":{"name":"upvoted","return_type":"String","visibility":"Public","body":"@upvoted"}},{"html_id":"warned:String-instance-method","name":"warned","doc":"When a user has been given a warning","summary":"<p>When a user has been given a warning</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":34,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L34"},"def":{"name":"warned","return_type":"String","visibility":"Public","body":"@warned"}},{"html_id":"whitelisted:String-instance-method","name":"whitelisted","doc":"When a user is permitted to join the chat","summary":"<p>When a user is permitted to join the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/logs.cr","line_number":58,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/logs.cr#L58"},"def":{"name":"whitelisted","return_type":"String","visibility":"Public","body":"@whitelisted"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Match","path":"PrivateParlorXT/Match.html","kind":"annotation","full_name":"PrivateParlorXT::Match","name":"Match","abstract":false,"locations":[{"filename":"src/private-parlor-xt/handlers/callback_query_handler.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/callback_query_handler.cr#L14"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Annotation for Telegram callback query handlers\n\n## Keys and Values:\n\n`pattern`\n:     a `StringLiteral` or `RegexLiteral` that triggers this `CallbackHandler` when it is found in a callback query.\n\n`config`\n:     `StringLiteral`, the name of the `Config` member that enables this handler.","summary":"<p>Annotation for Telegram callback query handlers</p>"},{"html_id":"private-parlor-xt/PrivateParlorXT/MessageID","path":"PrivateParlorXT/MessageID.html","kind":"alias","full_name":"PrivateParlorXT::MessageID","name":"MessageID","abstract":false,"locations":[{"filename":"src/private-parlor-xt/constants.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/constants.cr#L6"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":true,"aliased":"Int64","aliased_html":"Int64","const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"The ID of a Telegram message, stored as a `Int64`","summary":"<p>The ID of a Telegram message, stored as a <code>Int64</code></p>"},{"html_id":"private-parlor-xt/PrivateParlorXT/MessagePermissions","path":"PrivateParlorXT/MessagePermissions.html","kind":"enum","full_name":"PrivateParlorXT::MessagePermissions","name":"MessagePermissions","abstract":false,"ancestors":[{"html_id":"private-parlor-xt/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"private-parlor-xt/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"private-parlor-xt/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":35,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L35"}],"repository_name":"private-parlor-xt","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Text","name":"Text","value":"0"},{"id":"Animation","name":"Animation","value":"1"},{"id":"Audio","name":"Audio","value":"2"},{"id":"Document","name":"Document","value":"3"},{"id":"Video","name":"Video","value":"4"},{"id":"VideoNote","name":"VideoNote","value":"5"},{"id":"Voice","name":"Voice","value":"6"},{"id":"Photo","name":"Photo","value":"7"},{"id":"MediaGroup","name":"MediaGroup","value":"8"},{"id":"Poll","name":"Poll","value":"9"},{"id":"Forward","name":"Forward","value":"10"},{"id":"Sticker","name":"Sticker","value":"11"},{"id":"Venue","name":"Venue","value":"12"},{"id":"Location","name":"Location","value":"13"},{"id":"Contact","name":"Contact","value":"14"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Message types which can be given to a `Rank` to permit sending messages of that type\n\n## Messages permitted for each type:\n\n`Text`: Text messages without any media\n\n`Animation`: GIFs\n\n`Audio`: Audio files/messages\n\n`Document`: General files\n\n`Video`: Videos\n\n`VideoNote`: Round video/voice messages\n\n`Voice`: Voice messages\n\n`Photo`: Photos\n\n`MediaGroup`: Albums of any kind\n\n`Poll`: Polls\n\n`Forward`: Forwarded messages\n\n`Sticker`:Stickers\n\n`Venue`: Venues\n\n`Location`: Locations\n\n`Contact`: SMS contacts","summary":"<p>Message types which can be given to a <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> to permit sending messages of that type</p>","instance_methods":[{"html_id":"animation?-instance-method","name":"animation?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":37,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L37"},"def":{"name":"animation?","visibility":"Public","body":"self == Animation"}},{"html_id":"audio?-instance-method","name":"audio?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":38,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L38"},"def":{"name":"audio?","visibility":"Public","body":"self == Audio"}},{"html_id":"contact?-instance-method","name":"contact?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":50,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L50"},"def":{"name":"contact?","visibility":"Public","body":"self == Contact"}},{"html_id":"document?-instance-method","name":"document?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":39,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L39"},"def":{"name":"document?","visibility":"Public","body":"self == Document"}},{"html_id":"forward?-instance-method","name":"forward?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":46,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L46"},"def":{"name":"forward?","visibility":"Public","body":"self == Forward"}},{"html_id":"location?-instance-method","name":"location?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":49,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L49"},"def":{"name":"location?","visibility":"Public","body":"self == Location"}},{"html_id":"media_group?-instance-method","name":"media_group?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":44,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L44"},"def":{"name":"media_group?","visibility":"Public","body":"self == MediaGroup"}},{"html_id":"photo?-instance-method","name":"photo?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":43,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L43"},"def":{"name":"photo?","visibility":"Public","body":"self == Photo"}},{"html_id":"poll?-instance-method","name":"poll?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":45,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L45"},"def":{"name":"poll?","visibility":"Public","body":"self == Poll"}},{"html_id":"sticker?-instance-method","name":"sticker?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":47,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L47"},"def":{"name":"sticker?","visibility":"Public","body":"self == Sticker"}},{"html_id":"text?-instance-method","name":"text?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":36,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L36"},"def":{"name":"text?","visibility":"Public","body":"self == Text"}},{"html_id":"venue?-instance-method","name":"venue?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":48,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L48"},"def":{"name":"venue?","visibility":"Public","body":"self == Venue"}},{"html_id":"video?-instance-method","name":"video?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":40,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L40"},"def":{"name":"video?","visibility":"Public","body":"self == Video"}},{"html_id":"video_note?-instance-method","name":"video_note?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":41,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L41"},"def":{"name":"video_note?","visibility":"Public","body":"self == VideoNote"}},{"html_id":"voice?-instance-method","name":"voice?","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/message_permissions.cr","line_number":42,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/message_permissions.cr#L42"},"def":{"name":"voice?","visibility":"Public","body":"self == Voice"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/MessageProc","path":"PrivateParlorXT/MessageProc.html","kind":"alias","full_name":"PrivateParlorXT::MessageProc","name":"MessageProc","abstract":false,"locations":[{"filename":"src/private-parlor-xt/constants.cr","line_number":21,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/constants.cr#L21"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":true,"aliased":"(Proc(Int64, (Tourmaline::ReplyParameters | Nil), Array(Tourmaline::Message)) | Proc(Int64, (Tourmaline::ReplyParameters | Nil), Bool) | Proc(Int64, (Tourmaline::ReplyParameters | Nil), Tourmaline::Message))","aliased_html":"Int64, Tourmaline::ReplyParameters? -> Array(<a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>) | Int64, Tourmaline::ReplyParameters? -> Bool | Int64, Tourmaline::ReplyParameters? -> <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>","const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"The proc associated with a `QueuedMessage`\n\nA `MessageProc` can return the following types:\n  - `Tourmaline::Message`: Functions that send text messages, photos, GIFs, and similar items will return a single `Tourmaline::Message`\n  - `Array(Tourmaline::Message)`: Functions that send albums/media groups will return an array of the the sent `Tourmaline::Message`\n  - `Bool`: Functions that delete, pin, or edit messages will return a `Bool`, where `true` represents a success and `false` represents a failure.\n    A `Bool` result is currently not useful to the bot.","summary":"<p>The proc associated with a <code>QueuedMessage</code></p>"},{"html_id":"private-parlor-xt/PrivateParlorXT/MessageQueue","path":"PrivateParlorXT/MessageQueue.html","kind":"class","full_name":"PrivateParlorXT::MessageQueue","name":"MessageQueue","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/relay/queue.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queue.cr#L5"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A container for messages ready to be sent to Telegram","summary":"<p>A container for messages ready to be sent to Telegram</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/queue.cr","line_number":12,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queue.cr#L12"},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"enqueue(cached_msid:Int64|Array(Int64),sender_id:Int64|Nil,receiver_ids:Array(Int64),reply_msids:Hash(Int64,ReplyParameters),func:MessageProc):Nil-instance-method","name":"enqueue","doc":"Creates a new `QueuedMessage` and pushes it to the back of the queue.","summary":"<p>Creates a new <code><a href=\"../PrivateParlorXT/QueuedMessage.html\">QueuedMessage</a></code> and pushes it to the back of the queue.</p>","abstract":false,"args":[{"name":"cached_msid","external_name":"cached_msid","restriction":"Int64 | Array(Int64)"},{"name":"sender_id","external_name":"sender_id","restriction":"Int64 | Nil"},{"name":"receiver_ids","external_name":"receiver_ids","restriction":"Array(Int64)"},{"name":"reply_msids","external_name":"reply_msids","restriction":"Hash(Int64, ReplyParameters)"},{"name":"func","external_name":"func","restriction":"MessageProc"}],"args_string":"(cached_msid : Int64 | Array(Int64), sender_id : Int64 | Nil, receiver_ids : Array(Int64), reply_msids : Hash(Int64, ReplyParameters), func : MessageProc) : Nil","args_html":"(cached_msid : Int64 | Array(Int64), sender_id : Int64 | Nil, receiver_ids : Array(Int64), reply_msids : Hash(Int64, <a href=\"../PrivateParlorXT/ReplyParameters.html\">ReplyParameters</a>), func : <a href=\"../PrivateParlorXT/MessageProc.html\">MessageProc</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/queue.cr","line_number":27,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queue.cr#L27"},"def":{"name":"enqueue","args":[{"name":"cached_msid","external_name":"cached_msid","restriction":"Int64 | Array(Int64)"},{"name":"sender_id","external_name":"sender_id","restriction":"Int64 | Nil"},{"name":"receiver_ids","external_name":"receiver_ids","restriction":"Array(Int64)"},{"name":"reply_msids","external_name":"reply_msids","restriction":"Hash(Int64, ReplyParameters)"},{"name":"func","external_name":"func","restriction":"MessageProc"}],"return_type":"Nil","visibility":"Public","body":"@queue_mutex.synchronize do\n  receiver_ids.each do |receiver_id|\n    @queue.push(QueuedMessage.new(cached_msid, sender_id, receiver_id, reply_msids[receiver_id]?, func))\n  end\nend"}},{"html_id":"enqueue_priority(receiver_id:Int64,reply:ReplyParameters|Nil,func:MessageProc):Nil-instance-method","name":"enqueue_priority","doc":"Creates a new `QueuedMessage` and pushes it to the front of the queue.\nUseful for reply messages.","summary":"<p>Creates a new <code><a href=\"../PrivateParlorXT/QueuedMessage.html\">QueuedMessage</a></code> and pushes it to the front of the queue.</p>","abstract":false,"args":[{"name":"receiver_id","external_name":"receiver_id","restriction":"Int64"},{"name":"reply","external_name":"reply","restriction":"ReplyParameters | ::Nil"},{"name":"func","external_name":"func","restriction":"MessageProc"}],"args_string":"(receiver_id : Int64, reply : ReplyParameters | Nil, func : MessageProc) : Nil","args_html":"(receiver_id : Int64, reply : <a href=\"../PrivateParlorXT/ReplyParameters.html\">ReplyParameters</a> | Nil, func : <a href=\"../PrivateParlorXT/MessageProc.html\">MessageProc</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/queue.cr","line_number":37,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queue.cr#L37"},"def":{"name":"enqueue_priority","args":[{"name":"receiver_id","external_name":"receiver_id","restriction":"Int64"},{"name":"reply","external_name":"reply","restriction":"ReplyParameters | ::Nil"},{"name":"func","external_name":"func","restriction":"MessageProc"}],"return_type":"Nil","visibility":"Public","body":"@queue_mutex.synchronize do\n  @queue.unshift(QueuedMessage.new(nil, nil, receiver_id, reply, func))\nend"}},{"html_id":"get_message:QueuedMessage|Nil-instance-method","name":"get_message","doc":"Returns the first `QueuedMessage` in the `queue` if it is available\n\nReturns `nil` if there is no `QueuedMessage` in the `queue`","summary":"<p>Returns the first <code><a href=\"../PrivateParlorXT/QueuedMessage.html\">QueuedMessage</a></code> in the <code><a href=\"../PrivateParlorXT/MessageQueue.html#queue%3ADeque%28QueuedMessage%29-instance-method\">#queue</a></code> if it is available</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/queue.cr","line_number":46,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queue.cr#L46"},"def":{"name":"get_message","return_type":"QueuedMessage | ::Nil","visibility":"Public","body":"msg = nil\n@queue_mutex.synchronize do\n  msg = @queue.shift?\nend\nmsg\n"}},{"html_id":"queue:Deque(QueuedMessage)-instance-method","name":"queue","doc":"A double-ended queue of `QueuedMessage`; enqueued user messages are sent to the back of the queue, while system messages are sent to the front.","summary":"<p>A double-ended queue of <code><a href=\"../PrivateParlorXT/QueuedMessage.html\">QueuedMessage</a></code>; enqueued user messages are sent to the back of the queue, while system messages are sent to the front.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/queue.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queue.cr#L7"},"def":{"name":"queue","return_type":"Deque(QueuedMessage)","visibility":"Public","body":"@queue"}},{"html_id":"queue_mutex:Mutex-instance-method","name":"queue_mutex","doc":"Provides mutually exclusion for elements in the queue. Assume that it is necessary when interacting with the queue.","summary":"<p>Provides mutually exclusion for elements in the queue.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/queue.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queue.cr#L10"},"def":{"name":"queue_mutex","return_type":"Mutex","visibility":"Public","body":"@queue_mutex"}},{"html_id":"reject_messages(&):Nil-instance-method","name":"reject_messages","doc":"Removes messsages from queue based on if the given block is truthy","summary":"<p>Removes messsages from queue based on if the given block is truthy</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/queue.cr","line_number":18,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queue.cr#L18"},"def":{"name":"reject_messages","yields":1,"block_arity":1,"return_type":"Nil","visibility":"Public","body":"@queue_mutex.synchronize do\n  @queue.reject! do |msg|\n    yield msg\n  end\nend"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/MotdCommand","path":"PrivateParlorXT/MotdCommand.html","kind":"class","full_name":"PrivateParlorXT::MotdCommand","name":"MotdCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/motd_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/motd_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to view or set the bot's MOTD","summary":"<p>A command used to view or set the bot's MOTD</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Returns a message containing the MOTD/rules that were set for this bot,\nor sets the MOTD/rules to a new value if the sender of the *message* is authorized to do so","summary":"<p>Returns a message containing the MOTD/rules that were set for this bot, or sets the MOTD/rules to a new value if the sender of the <em>message</em> is authorized to do so</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/motd_command.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/motd_command.cr#L10"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif arg = Format.get_arg(message.text)\n  if authorized?(user, message, :MotdSet, services)\n  else\n    return\n  end\n  services.database.set_motd(arg)\n  log = Format.substitute_message(services.logs.motd_set, {\"id\" => user.id.to_s, \"name\" => user.formatted_name, \"text\" => arg})\n  services.relay.log_output(log)\n  response = services.replies.success\nelse\n  if motd = services.database.motd\n  else\n    return\n  end\n  response = motd\nend\nupdate_user_activity(user, services)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, response)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/On","path":"PrivateParlorXT/On.html","kind":"annotation","full_name":"PrivateParlorXT::On","name":"On","abstract":false,"locations":[{"filename":"src/private-parlor-xt/handlers/update_handler.cr","line_number":15,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handler.cr#L15"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Annotation for Telegram update handlers\n\n## Keys and Values:\n\n`update`\n:     a member of `Tourmaline::UpdateAction`\n\n`config`\n:     `String`, the name of the `Config` member that enables this handler.\n      Handlers should be configurable, though a value is not required here to compile or be used in the program.","summary":"<p>Annotation for Telegram update handlers</p>"},{"html_id":"private-parlor-xt/PrivateParlorXT/PhotoHandler","path":"PrivateParlorXT/PhotoHandler.html","kind":"class","full_name":"PrivateParlorXT::PhotoHandler","name":"PhotoHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/photo_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/photo_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for photo message updates","summary":"<p>A handler for photo message updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the photo message meets requirements and relays it","summary":"<p>Checks if the photo message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/photo_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/photo_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif meets_requirements?(message)\nelse\n  return\nend\nif authorized?(user, message, :Photo, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif photo = message.photo.last?\nelse\n  return\nend\ncaption, entities = Format.text_and_entities(message, user, services)\nif caption\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nif unique?(user, message, services)\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Photos, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_photo(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, replies: reply_messages, media: photo.file_id, text: caption, entities: entities, spoiler: services.config.allow_spoilers ? message.has_media_spoiler? : false, effect: services.config.allow_effects ? message.effect_id : nil, caption_above_media: message.show_caption_above_media?))\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming photos\n\nReturns `true` if the user is spamming photos, `false` otherwise","summary":"<p>Checks if the user is spamming photos</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/photo_handler.cr","line_number":59,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/photo_handler.cr#L59"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_photo?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a photo","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a photo</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/photo_handler.cr","line_number":102,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/photo_handler.cr#L102"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_photo >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_photo)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a photo when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for photos is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a photo when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/photo_handler.cr","line_number":79,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/photo_handler.cr#L79"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_photo >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_photo\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_photo.to_s, \"type\" => \"photo\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/PinCommand","path":"PrivateParlorXT/PinCommand.html","kind":"class","full_name":"PrivateParlorXT::PinCommand","name":"PinCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/pin_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/pin_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command for pinning messages to the chat","summary":"<p>A command for pinning messages to the chat</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Pins the message that *message* replies to if the *message* meets requirements","summary":"<p>Pins the message that <em>message</em> replies to if the <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/pin_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/pin_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Pin, services)\nelse\n  return\nend\nif reply = reply_message(user, message, services)\nelse\n  return\nend\nif services.history.sender(reply.message_id.to_i64)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.not_in_cache)\nend\nupdate_user_activity(user, services)\n(services.history.receivers(reply.message_id.to_i64)).each do |receiver, receiver_message|\n  services.relay.pin_message(receiver, receiver_message)\nend\nlog = Format.substitute_message(services.logs.pinned, {\"id\" => user.id.to_s, \"name\" => user.formatted_name, \"msid\" => reply.message_id.to_s})\nservices.relay.log_output(log)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/PollHandler","path":"PrivateParlorXT/PollHandler.html","kind":"class","full_name":"PrivateParlorXT::PollHandler","name":"PollHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/poll_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/poll_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for poll message updates","summary":"<p>A handler for poll message updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the poll meets requirements and relays it","summary":"<p>Checks if the poll meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/poll_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/poll_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif authorized?(user, message, :Poll, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif poll = message.poll\nelse\n  return\nend\nuser = spend_karma(user, services)\ncached_message = services.history.new_message(user.id, message.message_id.to_i64)\npoll_copy = services.relay.send_poll_copy(cached_message, user, services.config.allow_effects ? message.effect_id : nil, poll)\nservices.history.add_to_history(cached_message, poll_copy.message_id.to_i64, user.id)\nrecord_message_statistics(Statistics::Messages::Polls, services)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_forward(RelayParameters.new(original_message: cached_message, sender: user.id, receivers: receivers), poll_copy.message_id.to_i64)\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming polls\n\nReturns `true` if the user is spamming polls, `false` otherwise","summary":"<p>Checks if the user is spamming polls</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/poll_handler.cr","line_number":52,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/poll_handler.cr#L52"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_poll?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a poll","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a poll</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/poll_handler.cr","line_number":95,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/poll_handler.cr#L95"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_poll >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_poll)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a poll when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for polls is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a poll when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/poll_handler.cr","line_number":72,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/poll_handler.cr#L72"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_poll >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_poll\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_poll.to_s, \"type\" => \"poll\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/PrivacyPolicyCommand","path":"PrivateParlorXT/PrivacyPolicyCommand.html","kind":"class","full_name":"PrivateParlorXT::PrivacyPolicyCommand","name":"PrivacyPolicyCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/privacy_command.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/privacy_command.cr#L16"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to view the privacy policy of the bot\n\nThis command is required for all Telegram bots according to https://t.me/BotNews/96\n\nAll bots require a privacy policy that is easily accessible\nThis command is usuable by any user of the bot, regardless of if he is blacklisted, left, or neither\n\nThe Privacy Policy is defined in the locale files; if you modify the program in how it handles data, the Privacy Policy may need to be updated\n\nContact information is defined by the `blacklist_contact` configured value","summary":"<p>A command used to view the privacy policy of the bot</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Returns a message containing this bot's Privacy Policy","summary":"<p>Returns a message containing this bot's Privacy Policy</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/privacy_command.cr","line_number":18,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/privacy_command.cr#L18"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if info = message.from\nelse\n  return\nend\nif text = message.text || message.caption\n  if text.starts_with?('/')\n  else\n    return\n  end\nend\nuid = info.id.to_i64\nif user = services.database.get_user(uid)\n  update_user_activity(user, services)\nend\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), uid, Format.substitute_reply(services.replies.privacy_policy, {\"contact\" => Format.contact(services.config.blacklist_contact, services.replies)}))\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/PromoteCommand","path":"PrivateParlorXT/PromoteCommand.html","kind":"class","full_name":"PrivateParlorXT::PromoteCommand","name":"PromoteCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/promote_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/promote_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to promote a user to a given rank","summary":"<p>A command used to promote a user to a given rank</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Promotes the user described in the *message* text or promotes the sender of the message it replies to, if *message* meets requirements","summary":"<p>Promotes the user described in the <em>message</em> text or promotes the sender of the message it replies to, if <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/promote_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/promote_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authority = authorized?(user, message, services, :Promote, :PromoteLower, :PromoteSame)\nelse\n  return\nend\nif reply = message.reply_to_message\n  arg = Format.get_arg(message.text)\n  promote_from_reply(arg, authority, user, message.message_id.to_i64, reply, services)\nelse\n  promote_from_args(message.text, authority, user, message.message_id.to_i64, services)\nend\n"}},{"html_id":"promote_from_args(text:String|Nil,authority:CommandPermissions,user:User,message:MessageID,services:Services):Nil-instance-method","name":"promote_from_args","doc":"Promotes a user given in the *text* to the *user's* current rank if the rank has the `CommandPermissions::Promote` or `CommandPermissions::PromoteSame` permission\nand only one argument (the user's identifier) was given, or promotes to the given rank if the *user's* rank has the `CommandPermissions::Promote` or `CommandPermissions::PromoteLower` permission\nand two arguments (the user's identifier and name/value of rank) was given","summary":"<p>Promotes a user given in the <em>text</em> to the <em>user's</em> current rank if the rank has the <code><a href=\"../PrivateParlorXT/CommandPermissions.html#Promote\">CommandPermissions::Promote</a></code> or <code><a href=\"../PrivateParlorXT/CommandPermissions.html#PromoteSame\">CommandPermissions::PromoteSame</a></code> permission and only one argument (the user's identifier) was given, or promotes to the given rank if the <em>user's</em> rank has the <code><a href=\"../PrivateParlorXT/CommandPermissions.html#Promote\">CommandPermissions::Promote</a></code> or <code><a href=\"../PrivateParlorXT/CommandPermissions.html#PromoteLower\">CommandPermissions::PromoteLower</a></code> permission and two arguments (the user's identifier and name/value of rank) was given</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(text : String | Nil, authority : CommandPermissions, user : User, message : MessageID, services : Services) : Nil","args_html":"(text : String | Nil, authority : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a>, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/promote_command.cr","line_number":90,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/promote_command.cr#L90"},"def":{"name":"promote_from_args","args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if (args = Format.get_args(text, count: 2)) && args.size > 0\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.missing_args)\nend\nif (args.size == 1) && (authority.in?(CommandPermissions::Promote, CommandPermissions::PromoteSame))\n  tuple = {user.rank, services.access.ranks[user.rank]}\nelse\n  if args.size == 2\n    tuple = services.access.find_rank(args[1].downcase, args[1].to_i?)\n  end\nend\nif tuple\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, Format.substitute_reply(services.replies.no_rank_found, {\"ranks\" => services.access.rank_names(limit: user.rank).to_s}))\nend\nif promoted_user = services.database.get_user_by_arg(args[0])\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.no_user_found)\nend\nif services.access.can_promote?(tuple[0], user.rank, promoted_user.rank, authority)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.fail)\nend\nupdate_user_activity(user, services)\npromoted_user.set_rank(tuple[0])\nservices.database.update_user(promoted_user)\nservices.relay.send_to_user(nil, promoted_user.id, Format.substitute_reply(services.replies.promoted, {\"rank\" => tuple[1].name}))\nlog = Format.substitute_message(services.logs.promoted, {\"id\" => promoted_user.id.to_s, \"name\" => promoted_user.formatted_name, \"rank\" => tuple[1].name, \"invoker\" => user.formatted_name})\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.success)\n"}},{"html_id":"promote_from_reply(arg:String|Nil,authority:CommandPermissions,user:User,message:MessageID,reply:Tourmaline::Message,services:Services):Nil-instance-method","name":"promote_from_reply","doc":"Promotes a user who sent the *reply* message to the *user's* current rank if the rank has the `CommandPermissions::Promote` or `CommandPermissions::PromoteSame` permission\nand no *arg* was given, or promotes to the given rank in *arg* if the *user's* rank has the `CommandPermissions::Promote` or `CommandPermissions::PromoteLower` permission\nand one argument (name/value of rank) was given","summary":"<p>Promotes a user who sent the <em>reply</em> message to the <em>user's</em> current rank if the rank has the <code><a href=\"../PrivateParlorXT/CommandPermissions.html#Promote\">CommandPermissions::Promote</a></code> or <code><a href=\"../PrivateParlorXT/CommandPermissions.html#PromoteSame\">CommandPermissions::PromoteSame</a></code> permission and no <em>arg</em> was given, or promotes to the given rank in <em>arg</em> if the <em>user's</em> rank has the <code><a href=\"../PrivateParlorXT/CommandPermissions.html#Promote\">CommandPermissions::Promote</a></code> or <code><a href=\"../PrivateParlorXT/CommandPermissions.html#PromoteLower\">CommandPermissions::PromoteLower</a></code> permission and one argument (name/value of rank) was given</p>","abstract":false,"args":[{"name":"arg","external_name":"arg","restriction":"String | ::Nil"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(arg : String | Nil, authority : CommandPermissions, user : User, message : MessageID, reply : Tourmaline::Message, services : Services) : Nil","args_html":"(arg : String | Nil, authority : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a>, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, reply : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/promote_command.cr","line_number":43,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/promote_command.cr#L43"},"def":{"name":"promote_from_reply","args":[{"name":"arg","external_name":"arg","restriction":"String | ::Nil"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if arg\n  tuple = services.access.find_rank(arg.downcase, arg.to_i?)\nelse\n  if authority.in?(CommandPermissions::Promote, CommandPermissions::PromoteSame)\n  else\n    return services.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.missing_args)\n  end\n  tuple = {user.rank, services.access.ranks[user.rank]}\nend\nif tuple\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, Format.substitute_reply(services.replies.no_rank_found, {\"ranks\" => services.access.rank_names(limit: user.rank).to_s}))\nend\nif promoted_user = reply_user(user, reply, services)\nelse\n  return\nend\nif services.access.can_promote?(tuple[0], user.rank, promoted_user.rank, authority)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.fail)\nend\nupdate_user_activity(user, services)\npromoted_user.set_rank(tuple[0])\nservices.database.update_user(promoted_user)\nservices.relay.send_to_user(nil, promoted_user.id, Format.substitute_reply(services.replies.promoted, {\"rank\" => tuple[1].name}))\nlog = Format.substitute_message(services.logs.promoted, {\"id\" => promoted_user.id.to_s, \"name\" => promoted_user.formatted_name, \"rank\" => tuple[1].name, \"invoker\" => user.formatted_name})\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(message), user.id, services.replies.success)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/PurgeCommand","path":"PrivateParlorXT/PurgeCommand.html","kind":"class","full_name":"PrivateParlorXT::PurgeCommand","name":"PurgeCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/purge_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/purge_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to delete all messages sent by recently blacklisted users in one go","summary":"<p>A command used to delete all messages sent by recently blacklisted users in one go</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Deletes all messages sent by recently blacklisted users for everybody, if *message* meets requirements\n\nA possible `Tourmaline::Error::MessageCantBeDeleted` error can occur when a message's lifespan is 48 hours or greater.\nThis happens because messages older than 48 hours cannot be deleted for everybody.\nAs this function deletes messages in descending order (most recent messages are deleted first), the function will error out\nwhen deleting the oldest messages; this is intended due to Telegram API limitations.","summary":"<p>Deletes all messages sent by recently blacklisted users for everybody, if <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/purge_command.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/purge_command.cr#L14"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Purge, services)\nelse\n  return\nend\nupdate_user_activity(user, services)\nmessage_count = 0\nif banned_users = services.database.blacklisted_users(48.hours)\n  msids = Set(MessageID).new\n  banned_users.each do |banned_user|\n    msids = msids | (services.history.messages_from_user(banned_user.id))\n  end\n  hash = services.history.purge_receivers(msids)\n  hash.each do |receiver, msids_to_delete|\n    msids_to_delete.each_slice(100) do |slice|\n      services.relay.purge_messages(receiver, slice)\n    end\n  end\n  msids.each do |msid|\n    services.history.delete_message_group(msid)\n  end\n  message_count = message_count + msids.size\nend\nresponse = Format.substitute_reply(services.replies.purge_complete, {\"msgs_deleted\" => message_count.to_s})\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, response)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/QueuedMessage","path":"PrivateParlorXT/QueuedMessage.html","kind":"class","full_name":"PrivateParlorXT::QueuedMessage","name":"QueuedMessage","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/relay/queued_message.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queued_message.cr#L6"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A queued message ready to be sent to Telegram","summary":"<p>A queued message ready to be sent to Telegram</p>","constructors":[{"html_id":"new(origin:MessageID|Array(MessageID)|Nil,sender:UserID|Nil,receiver:UserID,reply:ReplyParameters|Nil,function:MessageProc)-class-method","name":"new","doc":"Creates an instance of `QueuedMessage`.","summary":"<p>Creates an instance of <code><a href=\"../PrivateParlorXT/QueuedMessage.html\">QueuedMessage</a></code>.</p>","abstract":false,"args":[{"name":"origin","external_name":"origin","restriction":"MessageID | Array(MessageID) | Nil"},{"name":"sender","external_name":"sender","restriction":"UserID | ::Nil"},{"name":"receiver","external_name":"receiver","restriction":"UserID"},{"name":"reply","external_name":"reply","restriction":"ReplyParameters | ::Nil"},{"name":"function","external_name":"function","restriction":"MessageProc"}],"args_string":"(origin : MessageID | Array(MessageID) | Nil, sender : UserID | Nil, receiver : UserID, reply : ReplyParameters | Nil, function : MessageProc)","args_html":"(origin : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Array(<a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) | Nil, sender : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a> | Nil, receiver : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, reply : <a href=\"../PrivateParlorXT/ReplyParameters.html\">ReplyParameters</a> | Nil, function : <a href=\"../PrivateParlorXT/MessageProc.html\">MessageProc</a>)","location":{"filename":"src/private-parlor-xt/relay/queued_message.cr","line_number":27,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queued_message.cr#L27"},"def":{"name":"new","args":[{"name":"origin","external_name":"origin","restriction":"MessageID | Array(MessageID) | Nil"},{"name":"sender","external_name":"sender","restriction":"UserID | ::Nil"},{"name":"receiver","external_name":"receiver","restriction":"UserID"},{"name":"reply","external_name":"reply","restriction":"ReplyParameters | ::Nil"},{"name":"function","external_name":"function","restriction":"MessageProc"}],"visibility":"Public","body":"_ = allocate\n_.initialize(origin, sender, receiver, reply, function)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"function:MessageProc-instance-method","name":"function","doc":"The proc that will run when this `QueuedMessage` is ready to be sent","summary":"<p>The proc that will run when this <code><a href=\"../PrivateParlorXT/QueuedMessage.html\">QueuedMessage</a></code> is ready to be sent</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/queued_message.cr","line_number":24,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queued_message.cr#L24"},"def":{"name":"function","return_type":"MessageProc","visibility":"Public","body":"@function"}},{"html_id":"origin:MessageID|Array(MessageID)|Nil-instance-method","name":"origin","doc":"The message ID of the message group that this `QueuedMessage` originated from","summary":"<p>The message ID of the message group that this <code><a href=\"../PrivateParlorXT/QueuedMessage.html\">QueuedMessage</a></code> originated from</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/queued_message.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queued_message.cr#L8"},"def":{"name":"origin","return_type":"MessageID | Array(MessageID) | Nil","visibility":"Public","body":"@origin"}},{"html_id":"receiver:UserID-instance-method","name":"receiver","doc":"User who will receive this `QueuedMessage`","summary":"<p>User who will receive this <code><a href=\"../PrivateParlorXT/QueuedMessage.html\">QueuedMessage</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/queued_message.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queued_message.cr#L16"},"def":{"name":"receiver","return_type":"UserID","visibility":"Public","body":"@receiver"}},{"html_id":"reply:ReplyParameters|Nil-instance-method","name":"reply","doc":"Data about the message this `QueuedMessage` replies to\n\nSet to `nil` if this `QueuedMessage` does not reply to a message","summary":"<p>Data about the message this <code><a href=\"../PrivateParlorXT/QueuedMessage.html\">QueuedMessage</a></code> replies to</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/queued_message.cr","line_number":21,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queued_message.cr#L21"},"def":{"name":"reply","return_type":"ReplyParameters | ::Nil","visibility":"Public","body":"@reply"}},{"html_id":"sender:UserID|Nil-instance-method","name":"sender","doc":"The sender of the message group from which this `QueuedMessage` originates\n\nSet to `nil` for system messages","summary":"<p>The sender of the message group from which this <code><a href=\"../PrivateParlorXT/QueuedMessage.html\">QueuedMessage</a></code> originates</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/queued_message.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/queued_message.cr#L13"},"def":{"name":"sender","return_type":"UserID | ::Nil","visibility":"Public","body":"@sender"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Rank","path":"PrivateParlorXT/Rank.html","kind":"class","full_name":"PrivateParlorXT::Rank","name":"Rank","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/ranks/rank.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/rank.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Represents a `Rank` which a user may belong to","summary":"<p>Represents a <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code> which a user may belong to</p>","constructors":[{"html_id":"new(name:String,command_permissions:Set(PrivateParlorXT::CommandPermissions),message_permissions:Set(PrivateParlorXT::MessagePermissions))-class-method","name":"new","doc":"Creates and instance of `Rank`","summary":"<p>Creates and instance of <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code></p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"::String"},{"name":"command_permissions","external_name":"command_permissions","restriction":"::Set(::PrivateParlorXT::CommandPermissions)"},{"name":"message_permissions","external_name":"message_permissions","restriction":"::Set(::PrivateParlorXT::MessagePermissions)"}],"args_string":"(name : String, command_permissions : Set(PrivateParlorXT::CommandPermissions), message_permissions : Set(PrivateParlorXT::MessagePermissions))","args_html":"(name : String, command_permissions : Set(<a href=\"../PrivateParlorXT/CommandPermissions.html\">PrivateParlorXT::CommandPermissions</a>), message_permissions : Set(<a href=\"../PrivateParlorXT/MessagePermissions.html\">PrivateParlorXT::MessagePermissions</a>))","location":{"filename":"src/private-parlor-xt/ranks/rank.cr","line_number":20,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/rank.cr#L20"},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":"::String"},{"name":"command_permissions","external_name":"command_permissions","restriction":"::Set(::PrivateParlorXT::CommandPermissions)"},{"name":"message_permissions","external_name":"message_permissions","restriction":"::Set(::PrivateParlorXT::MessagePermissions)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, command_permissions, message_permissions)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/private-parlor-xt/ranks/rank.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/rank.cr#L8"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}}],"instance_methods":[{"html_id":"command_permissions:Set(CommandPermissions)-instance-method","name":"command_permissions","doc":"The set of commands and types of commands members of this rank can use","summary":"<p>The set of commands and types of commands members of this rank can use</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/rank.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/rank.cr#L14"},"def":{"name":"command_permissions","return_type":"Set(CommandPermissions)","visibility":"Public","body":"@command_permissions"}},{"html_id":"message_permissions:Set(MessagePermissions)-instance-method","name":"message_permissions","doc":"The set of message types members of this rank can send","summary":"<p>The set of message types members of this rank can send</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/rank.cr","line_number":17,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/rank.cr#L17"},"def":{"name":"message_permissions","return_type":"Set(MessagePermissions)","visibility":"Public","body":"@message_permissions"}},{"html_id":"name:String-instance-method","name":"name","doc":"Name of this rank","summary":"<p>Name of this rank</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/ranks/rank.cr","line_number":11,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/ranks/rank.cr#L11"},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/RanksayCommand","path":"PrivateParlorXT/RanksayCommand.html","kind":"class","full_name":"PrivateParlorXT::RanksayCommand","name":"RanksayCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/ranksay_command.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/ranksay_command.cr#L10"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Processes ranksay messages before an `UpdateHandler` gets them\n\nThis handler expects the command handlers to be registered before the update handlers","summary":"<p>Processes ranksay messages before an <code><a href=\"../PrivateParlorXT/UpdateHandler.html\">UpdateHandler</a></code> gets them</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Preformats the given *message* with a rank name signature if the *message* meets requirements","summary":"<p>Preformats the given <em>message</em> with a rank name signature if the <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/ranksay_command.cr","line_number":12,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/ranksay_command.cr#L12"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif authority = authorized?(user, message, services, :Ranksay, :RanksayLower)\nelse\n  return\nend\ntext, entities = Format.validate_text_and_entities(message, user, services)\nif text\nelse\n  return\nend\nif arg = Format.get_arg(text)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.missing_args)\nend\nif spamming?(user, message, arg, services)\n  return\nend\nif rank_name = get_rank_name(text, user, message, authority, services)\nelse\n  return\nend\nif unique?(user, message, services, arg)\nelse\n  return\nend\ntext, entities = Format.format_text(text, entities, false, services)\nentities = remove_command_entity(text, entities, arg)\ntext, entities = ranksay(rank_name, arg, entities)\nif message.text\n  message.text = text\n  message.entities = entities\nelse\n  if message.caption\n    message.caption = text\n    message.caption_entities = entities\n  end\nend\nmessage.preformatted = true\nservices.relay.log_output(Format.substitute_message(services.logs.ranked_message, {\"id\" => user.id.to_s, \"name\" => user.formatted_name, \"rank\" => rank_name, \"text\" => arg}))\n"}},{"html_id":"get_rank_name(text:String,user:User,message:Tourmaline::Message,authority:CommandPermissions,services:Services):String|Nil-instance-method","name":"get_rank_name","doc":"For ranksay commands that are not initiated using \"/ranksay\" and instead uses the name of the rank followed by \"-say\"\n\nReturns the name of the `Rank` if the rank in the given *text* can ranksay\n\nReturns `nil` otherwise","summary":"<p>For ranksay commands that are not initiated using &quot;/ranksay&quot; and instead uses the name of the rank followed by &quot;-say&quot;</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(text : String, user : User, message : Tourmaline::Message, authority : CommandPermissions, services : Services) : String | Nil","args_html":"(text : String, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, authority : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String | Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/ranksay_command.cr","line_number":82,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/ranksay_command.cr#L82"},"def":{"name":"get_rank_name","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String | ::Nil","visibility":"Public","body":"if rank = (text.match(/^\\/(.+?)say\\s/)).try(&.[](1))\nelse\n  return\nend\nif rank == \"rank\"\n  parsed_rank = services.access.find_rank(rank, user.rank)\nelse\n  parsed_rank = services.access.find_rank(rank)\nend\nif parsed_rank\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.no_rank_found, {\"ranks\" => services.access.rank_names(limit: user.rank).to_s}))\nend\nparsed_rank_authority = services.access.authorized?(parsed_rank[0], :Ranksay, :RanksayLower)\nif services.access.can_ranksay?(parsed_rank[0], user.rank, authority, parsed_rank_authority)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.fail)\nend\nparsed_rank[1].name\n"}},{"html_id":"ranksay(rank:String,arg:String,entities:Array(Tourmaline::MessageEntity)):Tuple(String,Array(Tourmaline::MessageEntity))-instance-method","name":"ranksay","doc":"Format ranksay signature for the given *rank*, appending it to the given *arg*","summary":"<p>Format ranksay signature for the given <em>rank</em>, appending it to the given <em>arg</em></p>","abstract":false,"args":[{"name":"rank","external_name":"rank","restriction":"String"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(rank : String, arg : String, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","args_html":"(rank : String, arg : String, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/ranksay_command.cr","line_number":107,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/ranksay_command.cr#L107"},"def":{"name":"ranksay","args":[{"name":"rank","external_name":"rank","restriction":"String"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"Tuple(String, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"signature = \"~~#{rank}\"\nsignature_size = signature.to_utf16.size\nentities.concat([Tourmaline::MessageEntity.new(\"bold\", arg.to_utf16.size + 1, signature_size)])\nreturn {\"#{arg} #{signature}\", entities}\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,arg:String,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming rank signatures\n\nReturns `true` if the user is spamming rank signatures or unformatted text is spammy, returns `false` otherwise","summary":"<p>Checks if the user is spamming rank signatures</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, arg : String, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, arg : String, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/ranksay_command.cr","line_number":66,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/ranksay_command.cr#L66"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif message.text && (spam.spammy_text?(user.id, arg))\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/RegularForwardHandler","path":"PrivateParlorXT/RegularForwardHandler.html","kind":"class","full_name":"PrivateParlorXT::RegularForwardHandler","name":"RegularForwardHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumHelpers","kind":"module","full_name":"PrivateParlorXT::AlbumHelpers","name":"AlbumHelpers"},{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L10"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumHelpers","kind":"module","full_name":"PrivateParlorXT::AlbumHelpers","name":"AlbumHelpers"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"An alternative to the `ForwardHandler` which handles forwarded messages, but\nappends a \"Forwarded from\" header to the text/caption of the message and relays\nthe message as though it were being relayed by the `TextHandler`, `AlbumHandler`, `PhotoHandler`\nor a similar `UpdateHandler` with respect to the forwarded message's media type","summary":"<p>An alternative to the <code><a href=\"../PrivateParlorXT/ForwardHandler.html\">ForwardHandler</a></code> which handles forwarded messages, but appends a &quot;Forwarded from&quot; header to the text/caption of the message and relays the message as though it were being relayed by the <code><a href=\"../PrivateParlorXT/TextHandler.html\">TextHandler</a></code>, <code><a href=\"../PrivateParlorXT/AlbumHandler.html\">AlbumHandler</a></code>, <code><a href=\"../PrivateParlorXT/PhotoHandler.html\">PhotoHandler</a></code> or a similar <code><a href=\"../PrivateParlorXT/UpdateHandler.html\">UpdateHandler</a></code> with respect to the forwarded message's media type</p>","instance_methods":[{"html_id":"albums:Hash(String,Album)-instance-method","name":"albums","doc":"A hash of `String`, media group IDs, to `Album`, representing forwarded albums","summary":"<p>A hash of <code>String</code>, media group IDs, to <code><a href=\"../PrivateParlorXT/AlbumHelpers/Album.html\">Album</a></code>, representing forwarded albums</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L14"},"def":{"name":"albums","return_type":"Hash(String, Album)","visibility":"Public","body":"@albums"}},{"html_id":"albums=(albums:Hash(String,Album))-instance-method","name":"albums=","doc":"A hash of `String`, media group IDs, to `Album`, representing forwarded albums","summary":"<p>A hash of <code>String</code>, media group IDs, to <code><a href=\"../PrivateParlorXT/AlbumHelpers/Album.html\">Album</a></code>, representing forwarded albums</p>","abstract":false,"args":[{"name":"albums","external_name":"albums","restriction":"Hash(String, Album)"}],"args_string":"(albums : Hash(String, Album))","args_html":"(albums : Hash(String, <a href=\"../PrivateParlorXT/AlbumHelpers/Album.html\">Album</a>))","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L14"},"def":{"name":"albums=","args":[{"name":"albums","external_name":"albums","restriction":"Hash(String, Album)"}],"visibility":"Public","body":"@albums = albums"}},{"html_id":"deanonymous_poll?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"deanonymous_poll?","doc":"Returns `true` if the forwarded poll does not have anonymous voting\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the forwarded poll does not have anonymous voting</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":98,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L98"},"def":{"name":"deanonymous_poll?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if (poll = message.poll) && (!poll.is_anonymous?)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.deanon_poll)\n  return true\nend\nfalse\n"}},{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the forwarded message meets requirements and relays it","summary":"<p>Checks if the forwarded message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":17,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L17"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Forward, services)\nelse\n  return\nend\nif deanonymous_poll?(user, message, services)\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\ntext = (message.text || message.caption) || \"\"\nentities = message.entities.empty? ? message.caption_entities : message.entities\nif unique?(user, message, services)\nelse\n  return\nend\nuser = spend_karma(user, message, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nrecord_message_statistics(Statistics::Messages::Forwards, services)\nif regular_forward?(text, entities)\n  return services.relay.send_forward(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers), message.message_id.to_i64)\nend\nheader, entities = get_header(message, entities)\nif header\nelse\n  return services.relay.send_forward(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers), message.message_id.to_i64)\nend\ntext = header + text\nrelay_regular_forward(message, text, entities, new_message, user, receivers, services)\n"}},{"html_id":"forward_header(message:Tourmaline::Message,entities:Array(Tourmaline::MessageEntity)):Tuple(String|Nil,Array(Tourmaline::MessageEntity))-instance-method","name":"forward_header","doc":"Returns a 'Forwarded from' header according to the original user which the message came from","summary":"<p>Returns a 'Forwarded from' header according to the original user which the message came from</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(message : Tourmaline::Message, entities : Array(Tourmaline::MessageEntity)) : Tuple(String | Nil, Array(Tourmaline::MessageEntity))","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, entities : Array(Tourmaline::MessageEntity)) : Tuple(String | Nil, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":279,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L279"},"def":{"name":"forward_header","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"Tuple(String | ::Nil, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"if origin = message.forward_origin\nelse\n  return {nil, [] of Tourmaline::MessageEntity}\nend\nif origin.is_a?(Tourmaline::MessageOriginUser)\n  if origin.sender_user.is_bot?\n    username_forward(origin.sender_user.full_name, origin.sender_user.username, entities)\n  else\n    user_forward(origin.sender_user.full_name, origin.sender_user.id, entities)\n  end\nelse\n  if origin.is_a?(Tourmaline::MessageOriginChannel)\n    if origin.chat.username\n      username_forward(origin.chat.name, origin.chat.username, entities, origin.message_id)\n    else\n      private_channel_forward(origin.chat.name, origin.chat.id, entities, origin.message_id)\n    end\n  else\n    if origin.is_a?(Tourmaline::MessageOriginHiddenUser)\n      private_user_forward(origin.sender_user_name, entities)\n    else\n      return {nil, [] of Tourmaline::MessageEntity}\n    end\n  end\nend\n"}},{"html_id":"get_header(message:Tourmaline::Message,entities:Array(Tourmaline::MessageEntity)):Tuple(String|Nil,Array(Tourmaline::MessageEntity))-instance-method","name":"get_header","doc":"Returns the forwarded fromheader and its entities from the given *message* and *entities*","summary":"<p>Returns the forwarded fromheader and its entities from the given <em>message</em> and <em>entities</em></p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(message : Tourmaline::Message, entities : Array(Tourmaline::MessageEntity)) : Tuple(String | Nil, Array(Tourmaline::MessageEntity))","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, entities : Array(Tourmaline::MessageEntity)) : Tuple(String | Nil, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":156,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L156"},"def":{"name":"get_header","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"Tuple(String | ::Nil, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"if (album = message.media_group_id) && @albums[album]?\n  return {\"\", [] of Tourmaline::MessageEntity}\nelse\n  forward_header(message, entities)\nend"}},{"html_id":"private_channel_forward(name:String,id:Int64|Int32,entities:Array(Tourmaline::MessageEntity),msid:Int64|Int32|Nil=nil):Tuple(String,Array(Tourmaline::MessageEntity))-instance-method","name":"private_channel_forward","doc":"Returns a 'Forwarded from' header for private channels, removing the \"-100\" prefix for private channel IDs","summary":"<p>Returns a 'Forwarded from' header for private channels, removing the &quot;-100&quot; prefix for private channel IDs</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"id","external_name":"id","restriction":"Int64 | Int32"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"msid","default_value":"nil","external_name":"msid","restriction":"Int64 | Int32 | Nil"}],"args_string":"(name : String, id : Int64 | Int32, entities : Array(Tourmaline::MessageEntity), msid : Int64 | Int32 | Nil = nil) : Tuple(String, Array(Tourmaline::MessageEntity))","args_html":"(name : String, id : Int64 | Int32, entities : Array(Tourmaline::MessageEntity), msid : Int64 | Int32 | Nil = <span class=\"n\">nil</span>) : Tuple(String, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":355,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L355"},"def":{"name":"private_channel_forward","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"id","external_name":"id","restriction":"Int64 | Int32"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"msid","default_value":"nil","external_name":"msid","restriction":"Int64 | Int32 | Nil"}],"return_type":"Tuple(String, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"header = \"Forwarded from #{name}\\n\\n\"\nheader_size = header[..-3].to_utf16.size\nname_size = name.to_utf16.size\nentities = Format.offset_entities(entities, header_size + 2)\nentities = [Tourmaline::MessageEntity.new(\"bold\", 0, header_size), Tourmaline::MessageEntity.new(\"text_link\", 15, name_size, \"tg://privatepost?channel=#{id.to_s[4..]}#{if msid\n  \"&post=#{msid}\"\nend}\")].concat(entities)\nreturn {header, entities}\n"}},{"html_id":"private_user_forward(name:String,entities:Array(Tourmaline::MessageEntity)):Tuple(String,Array(Tourmaline::MessageEntity))-instance-method","name":"private_user_forward","doc":"Returns a 'Forwarded from' header for private users","summary":"<p>Returns a 'Forwarded from' header for private users</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(name : String, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","args_html":"(name : String, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":321,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L321"},"def":{"name":"private_user_forward","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"Tuple(String, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"header = \"Forwarded from #{name}\\n\\n\"\nheader_size = header[..-3].to_utf16.size\nname_size = name.to_utf16.size\nentities = Format.offset_entities(entities, header_size + 2)\nentities = [Tourmaline::MessageEntity.new(\"bold\", 0, header_size), Tourmaline::MessageEntity.new(\"italic\", 15, name_size)].concat(entities)\nreturn {header, entities}\n"}},{"html_id":"regular_forward?(text:String|Nil,entities:Array(Tourmaline::MessageEntity)):Bool|Nil-instance-method","name":"regular_forward?","doc":"Checks the text and entities for a forwarded message to determine if it\nwas relayed as a regular message\n\nReturns `true` if the forward message was relayed regularly, `nil` otherwise","summary":"<p>Checks the text and entities for a forwarded message to determine if it was relayed as a regular message</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(text : String | Nil, entities : Array(Tourmaline::MessageEntity)) : Bool | Nil","args_html":"(text : String | Nil, entities : Array(Tourmaline::MessageEntity)) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":271,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L271"},"def":{"name":"regular_forward?","args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if text\nelse\n  return\nend\nif ent = entities.first?\n  (text.starts_with?(\"Forwarded from\")) && (ent.type == \"bold\")\nend\n"}},{"html_id":"relay_regular_forward(message:Tourmaline::Message,text:String,entities:Array(Tourmaline::MessageEntity),cached_message:MessageID,user:User,receivers:Array(UserID),services:Services):Nil-instance-method","name":"relay_regular_forward","doc":"Relays the forwarded message as though it were a text message, album, photo, or similar media type","summary":"<p>Relays the forwarded message as though it were a text message, album, photo, or similar media type</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"cached_message","external_name":"cached_message","restriction":"MessageID"},{"name":"user","external_name":"user","restriction":"User"},{"name":"receivers","external_name":"receivers","restriction":"Array(UserID)"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, text : String, entities : Array(Tourmaline::MessageEntity), cached_message : MessageID, user : User, receivers : Array(UserID), services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, text : String, entities : Array(Tourmaline::MessageEntity), cached_message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, receivers : Array(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>), services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":165,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L165"},"def":{"name":"relay_regular_forward","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"cached_message","external_name":"cached_message","restriction":"MessageID"},{"name":"user","external_name":"user","restriction":"User"},{"name":"receivers","external_name":"receivers","restriction":"Array(UserID)"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if message.text\n  services.relay.send_text(RelayParameters.new(original_message: cached_message, sender: user.id, receivers: receivers, text: text, entities: entities, effect: services.config.allow_effects ? message.effect_id : nil))\nelse\n  if album = message.media_group_id\n    if input = album_input(message, text, entities)\n    else\n      return\n    end\n    relay_album(@albums, album, message.message_id.to_i64, input, user, receivers, {} of UserID => ReplyParameters, services.config.allow_effects ? message.effect_id : nil, services)\n  else\n    if file = message.animation\n      services.relay.send_animation(RelayParameters.new(original_message: cached_message, sender: user.id, receivers: receivers, media: file.file_id, text: text, entities: entities, spoiler: message.has_media_spoiler?, effect: services.config.allow_effects ? message.effect_id : nil))\n    else\n      if file = message.audio\n        services.relay.send_audio(RelayParameters.new(original_message: cached_message, sender: user.id, receivers: receivers, media: file.file_id, text: text, entities: entities, effect: services.config.allow_effects ? message.effect_id : nil))\n      else\n        if file = message.document\n          services.relay.send_document(RelayParameters.new(original_message: cached_message, sender: user.id, receivers: receivers, media: file.file_id, text: text, entities: entities, effect: services.config.allow_effects ? message.effect_id : nil))\n        else\n          if file = message.video\n            services.relay.send_video(RelayParameters.new(original_message: cached_message, sender: user.id, receivers: receivers, media: file.file_id, text: text, entities: entities, spoiler: message.has_media_spoiler?, effect: services.config.allow_effects ? message.effect_id : nil))\n          else\n            if (file = message.photo) && file.last?\n              file = file.last\n              services.relay.send_photo(RelayParameters.new(original_message: cached_message, sender: user.id, receivers: receivers, media: file.file_id, text: text, entities: entities, spoiler: message.has_media_spoiler?, effect: services.config.allow_effects ? message.effect_id : nil))\n            else\n              services.relay.send_forward(RelayParameters.new(original_message: cached_message, sender: user.id, receivers: receivers), message.message_id.to_i64)\n            end\n          end\n        end\n      end\n    end\n  end\nend"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming forwarded messages\n\nReturns `true` if the user is spamming forwarded messages, `false` otherwise","summary":"<p>Checks if the user is spamming forwarded messages</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":82,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L82"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif (album = message.media_group_id) && @albums[album]?\n  return false\nend\nif spam.spammy_forward?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,message:Tourmaline::Message,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a forwarded message","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a forwarded message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":141,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L141"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_forwarded_message >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nif (album = message.media_group_id) && @albums[album]?\n  return user\nend\nuser.decrement_karma(karma.karma_forwarded_message)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a forwarded message when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for forwarded messages is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a forwarded message when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":116,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L116"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_forwarded_message >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif (album = message.media_group_id) && @albums[album]?\n  return true\nend\nif user.karma >= karma.karma_forwarded_message\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_forwarded_message.to_s, \"type\" => \"forward\"}))\nend\ntrue\n"}},{"html_id":"user_forward(name:String,id:Int64|Int32,entities:Array(Tourmaline::MessageEntity)):Tuple(String,Array(Tourmaline::MessageEntity))-instance-method","name":"user_forward","doc":"Returns a 'Forwarded from' header for users who do not have forward privacy enabled","summary":"<p>Returns a 'Forwarded from' header for users who do not have forward privacy enabled</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"id","external_name":"id","restriction":"Int64 | Int32"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(name : String, id : Int64 | Int32, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","args_html":"(name : String, id : Int64 | Int32, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":304,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L304"},"def":{"name":"user_forward","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"id","external_name":"id","restriction":"Int64 | Int32"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"Tuple(String, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"header = \"Forwarded from #{name}\\n\\n\"\nheader_size = header[..-3].to_utf16.size\nname_size = name.to_utf16.size\nentities = Format.offset_entities(entities, header_size + 2)\nentities = [Tourmaline::MessageEntity.new(\"bold\", 0, header_size), Tourmaline::MessageEntity.new(\"text_link\", 15, name_size, \"tg://user?id=#{id}\")].concat(entities)\nreturn {header, entities}\n"}},{"html_id":"username_forward(name:String,username:String|Nil,entities:Array(Tourmaline::MessageEntity),msid:Int64|Int32|Nil=nil):Tuple(String,Array(Tourmaline::MessageEntity))-instance-method","name":"username_forward","doc":"Returns a 'Forwarded from' header for bots and public channels","summary":"<p>Returns a 'Forwarded from' header for bots and public channels</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"username","external_name":"username","restriction":"String | ::Nil"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"msid","default_value":"nil","external_name":"msid","restriction":"Int64 | Int32 | Nil"}],"args_string":"(name : String, username : String | Nil, entities : Array(Tourmaline::MessageEntity), msid : Int64 | Int32 | Nil = nil) : Tuple(String, Array(Tourmaline::MessageEntity))","args_html":"(name : String, username : String | Nil, entities : Array(Tourmaline::MessageEntity), msid : Int64 | Int32 | Nil = <span class=\"n\">nil</span>) : Tuple(String, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr","line_number":338,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/regular_forward_handler.cr#L338"},"def":{"name":"username_forward","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"username","external_name":"username","restriction":"String | ::Nil"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"msid","default_value":"nil","external_name":"msid","restriction":"Int64 | Int32 | Nil"}],"return_type":"Tuple(String, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"header = \"Forwarded from #{name}\\n\\n\"\nheader_size = header[..-3].to_utf16.size\nname_size = name.to_utf16.size\nentities = Format.offset_entities(entities, header_size + 2)\nentities = [Tourmaline::MessageEntity.new(\"bold\", 0, header_size), Tourmaline::MessageEntity.new(\"text_link\", 15, name_size, \"tg://resolve?domain=#{username}#{if msid\n  \"&post=#{msid}\"\nend}\")].concat(entities)\nreturn {header, entities}\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Relay","path":"PrivateParlorXT/Relay.html","kind":"class","full_name":"PrivateParlorXT::Relay","name":"Relay","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":58,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L58"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Handles the `MessageQueue` and sends prepared messages to Telegram","summary":"<p>Handles the <code><a href=\"../PrivateParlorXT/MessageQueue.html\">MessageQueue</a></code> and sends prepared messages to Telegram</p>","constructors":[{"html_id":"new(log_channel:String,client:Tourmaline::Client)-class-method","name":"new","abstract":false,"args":[{"name":"log_channel","external_name":"log_channel","restriction":"String"},{"name":"client","external_name":"client","restriction":"Tourmaline::Client"}],"args_string":"(log_channel : String, client : Tourmaline::Client)","args_html":"(log_channel : String, client : Tourmaline::Client)","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":68,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L68"},"def":{"name":"new","args":[{"name":"log_channel","external_name":"log_channel","restriction":"String"},{"name":"client","external_name":"client","restriction":"Tourmaline::Client"}],"visibility":"Public","body":"_ = allocate\n_.initialize(log_channel, client)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"cache_message(success:Tourmaline::Message|Array(Tourmaline::Message),message:QueuedMessage,services:Services):Nil-instance-method","name":"cache_message","doc":"Caches data from the message returned from Telegram in the message `History`","summary":"<p>Caches data from the message returned from Telegram in the message <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"args":[{"name":"success","external_name":"success","restriction":"Tourmaline::Message | Array(Tourmaline::Message)"},{"name":"message","external_name":"message","restriction":"QueuedMessage"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(success : Tourmaline::Message | Array(Tourmaline::Message), message : QueuedMessage, services : Services) : Nil","args_html":"(success : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a> | Array(<a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>), message : <a href=\"../PrivateParlorXT/QueuedMessage.html\">QueuedMessage</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":592,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L592"},"def":{"name":"cache_message","args":[{"name":"success","external_name":"success","restriction":"Tourmaline::Message | Array(Tourmaline::Message)"},{"name":"message","external_name":"message","restriction":"QueuedMessage"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"case success\nwhen Tourmaline::Message\n  services.history.add_to_history(message.origin.as(MessageID), success.message_id.to_i64, message.receiver)\nwhen Array(Tourmaline::Message)\n  sent_msids = success.map(&.message_id)\n  sent_msids.zip(message.origin.as(Array(MessageID))) do |msid, origin|\n    services.history.add_to_history(origin, msid.to_i64, message.receiver)\n  end\nend"}},{"html_id":"delete_message(receiver:UserID,message:MessageID):Nil-instance-method","name":"delete_message","doc":"Delete a *message* for *receiver*","summary":"<p>Delete a <em>message</em> for <em>receiver</em></p>","abstract":false,"args":[{"name":"receiver","external_name":"receiver","restriction":"UserID"},{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(receiver : UserID, message : MessageID) : Nil","args_html":"(receiver : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":451,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L451"},"def":{"name":"delete_message","args":[{"name":"receiver","external_name":"receiver","restriction":"UserID"},{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue_priority(receiver, ReplyParameters.new(message), ->(receiver_id : UserID, reply : ReplyParameters | ::Nil) do\n  if reply\n  else\n    return false\n  end\n  @client.delete_message(receiver_id, reply.message_id)\nend)"}},{"html_id":"edit_message_media(user:UserID,media:Tourmaline::InputMedia,message:MessageID):Nil-instance-method","name":"edit_message_media","doc":"Edit a message's media, usually used for placing a spoiler on a message","summary":"<p>Edit a message's media, usually used for placing a spoiler on a message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"media","external_name":"media","restriction":"Tourmaline::InputMedia"},{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(user : UserID, media : Tourmaline::InputMedia, message : MessageID) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, media : Tourmaline::InputMedia, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":507,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L507"},"def":{"name":"edit_message_media","args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"media","external_name":"media","restriction":"Tourmaline::InputMedia"},{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue_priority(user, ReplyParameters.new(message), ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  if reply\n  else\n    return false\n  end\n  @client.edit_message_media(media, chat_id: receiver, message_id: reply.message_id)\n  true\nend)"}},{"html_id":"edit_message_text(user:UserID,text:String,markup:Tourmaline::InlineKeyboardMarkup|Nil,message:MessageID):Nil-instance-method","name":"edit_message_text","doc":"Exit a message's text","summary":"<p>Exit a message's text</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"text","external_name":"text","restriction":"String"},{"name":"markup","external_name":"markup","restriction":"Tourmaline::InlineKeyboardMarkup | ::Nil"},{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(user : UserID, text : String, markup : Tourmaline::InlineKeyboardMarkup | Nil, message : MessageID) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, text : String, markup : Tourmaline::InlineKeyboardMarkup | Nil, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":522,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L522"},"def":{"name":"edit_message_text","args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"text","external_name":"text","restriction":"String"},{"name":"markup","external_name":"markup","restriction":"Tourmaline::InlineKeyboardMarkup | ::Nil"},{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue_priority(user, ReplyParameters.new(message), ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  if reply\n  else\n    return false\n  end\n  @client.edit_message_text(text, chat_id: receiver, message_id: reply.message_id, reply_markup: markup)\n  true\nend)"}},{"html_id":"get_chat(user:UserID):Tourmaline::ChatFullInfo|Nil-instance-method","name":"get_chat","doc":"Returns the full chat information for the given *user*","summary":"<p>Returns the full chat information for the given <em>user</em></p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Tourmaline::ChatFullInfo | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Tourmaline::ChatFullInfo | Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":77,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L77"},"def":{"name":"get_chat","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Tourmaline::ChatFullInfo | ::Nil","visibility":"Public","body":"begin\n  @client.get_chat(user)\nrescue\n  nil\nend"}},{"html_id":"log_output(text:String):Nil-instance-method","name":"log_output","doc":"Prints *text* to the log and send it to the `log_channel` if it is set","summary":"<p>Prints <em>text</em> to the log and send it to the <code>log_channel</code> if it is set</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Nil","args_html":"(text : String) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":535,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L535"},"def":{"name":"log_output","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"Log.notice do\n  text\nend\nif @log_channel.empty?\nelse\n  send_to_channel(nil, @log_channel, text)\nend\n"}},{"html_id":"pin_message(user:UserID,message:MessageID):Nil-instance-method","name":"pin_message","doc":"Pins the given *message* to the chat","summary":"<p>Pins the given <em>message</em> to the chat</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(user : UserID, message : MessageID) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":474,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L474"},"def":{"name":"pin_message","args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue_priority(user, ReplyParameters.new(message), ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  if reply\n  else\n    return false\n  end\n  @client.pin_chat_message(receiver, message_id: reply.message_id)\nend)"}},{"html_id":"purge_messages(receiver:UserID,messages:Array(MessageID)):Nil-instance-method","name":"purge_messages","doc":"Bulk dellete *messages* for a given *receiver*","summary":"<p>Bulk dellete <em>messages</em> for a given <em>receiver</em></p>","abstract":false,"args":[{"name":"receiver","external_name":"receiver","restriction":"UserID"},{"name":"messages","external_name":"messages","restriction":"Array(MessageID)"}],"args_string":"(receiver : UserID, messages : Array(MessageID)) : Nil","args_html":"(receiver : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, messages : Array(<a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>)) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":463,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L463"},"def":{"name":"purge_messages","args":[{"name":"receiver","external_name":"receiver","restriction":"UserID"},{"name":"messages","external_name":"messages","restriction":"Array(MessageID)"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue_priority(receiver, nil, ->(receiver_id : UserID, _reply : ReplyParameters | ::Nil) do\n  @client.delete_messages(receiver_id, messages)\nend)"}},{"html_id":"reject_blacklisted_messages(user:UserID):Nil-instance-method","name":"reject_blacklisted_messages","doc":"Remove messages from the queue that are sent by or addressed to *user*","summary":"<p>Remove messages from the queue that are sent by or addressed to <em>user</em></p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":437,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L437"},"def":{"name":"reject_blacklisted_messages","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Nil","visibility":"Public","body":"@queue.reject_messages do |msg|\n  (msg.receiver == user) || (msg.sender == user)\nend"}},{"html_id":"reject_inactive_user_messages(user:UserID):Nil-instance-method","name":"reject_inactive_user_messages","doc":"Remove messages from the queue that are addressed to *user*","summary":"<p>Remove messages from the queue that are addressed to <em>user</em></p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":444,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L444"},"def":{"name":"reject_inactive_user_messages","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Nil","visibility":"Public","body":"@queue.reject_messages do |msg|\n  msg.receiver == user\nend"}},{"html_id":"relay_message(message:QueuedMessage,services:Services):Tourmaline::Message|Array(Tourmaline::Message)|Nil-instance-method","name":"relay_message","doc":"Calls the proc associated with the given message.\n\nReturns a `Tourmaline::Message` when sending messages that are not albums\nReturns an array of `Tourmaline::Message` for sent albums\nReturns nil on sending a system message, Telegram giving us a boolean,\nor encountering an error","summary":"<p>Calls the proc associated with the given message.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"QueuedMessage"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : QueuedMessage, services : Services) : Tourmaline::Message | Array(Tourmaline::Message) | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/QueuedMessage.html\">QueuedMessage</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a> | Array(<a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>) | Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":559,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L559"},"def":{"name":"relay_message","args":[{"name":"message","external_name":"message","restriction":"QueuedMessage"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Tourmaline::Message | Array(Tourmaline::Message) | Nil","visibility":"Public","body":"begin\n  success = message.function.call(message.receiver, message.reply)\n  if message.origin\n  else\n    return\n  end\n  if success.is_a?(Bool)\n    return\n  end\n  success\nrescue Tourmaline::Error::BotBlocked | Tourmaline::Error::UserDeactivated\n  if user = services.database.get_user(message.receiver)\n    user.set_left\n    services.database.update_user(user)\n    log = Format.substitute_message(services.logs.force_leave, {\"id\" => user.id.to_s, \"name\" => user.formatted_name})\n    log_output(log)\n  end\n  reject_inactive_user_messages(message.receiver)\nrescue ex : Tourmaline::Error::ChatNotFound\n  if message.origin\n    Log.error(exception: ex) do\n      \"Error occured when relaying message.\"\n    end\n  end\nrescue ex : Tourmaline::Error::RetryAfter\n  Log.error(exception: ex) do\n    \"Error occured when relaying message.\"\n  end\n  sleep(ex.seconds.seconds)\n  relay_message(message, services)\nrescue ex\n  Log.error(exception: ex) do\n    \"Error occured when relaying message.\"\n  end\nend"}},{"html_id":"send_album(params:AlbumHelpers::AlbumRelayParameters):Nil-instance-method","name":"send_album","doc":"Queues an album with the given *params*","summary":"<p>Queues an album with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"AlbumHelpers::AlbumRelayParameters"}],"args_string":"(params : AlbumHelpers::AlbumRelayParameters) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/AlbumHelpers/AlbumRelayParameters.html\">AlbumHelpers::AlbumRelayParameters</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":354,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L354"},"def":{"name":"send_album","args":[{"name":"params","external_name":"params","restriction":"AlbumHelpers::AlbumRelayParameters"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.origins, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_media_group(receiver, params.media, message_effect_id: params.effect, reply_parameters: reply)\nend)"}},{"html_id":"send_animation(params:RelayParameters):Nil-instance-method","name":"send_animation","doc":"Queues a GIF with the given *params*","summary":"<p>Queues a GIF with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"args_string":"(params : RelayParameters) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":172,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L172"},"def":{"name":"send_animation","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_animation(receiver, params.media, caption: params.text, parse_mode: Tourmaline::ParseMode::None, caption_entities: params.entities, has_spoiler: params.spoiler, message_effect_id: params.effect, show_caption_above_media: params.caption_above_media, reply_parameters: reply)\nend)"}},{"html_id":"send_audio(params:RelayParameters):Nil-instance-method","name":"send_audio","doc":"Queues an audio message with the given *params*","summary":"<p>Queues an audio message with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"args_string":"(params : RelayParameters) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":218,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L218"},"def":{"name":"send_audio","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_audio(receiver, params.media, caption: params.text, parse_mode: Tourmaline::ParseMode::None, caption_entities: params.entities, message_effect_id: params.effect, reply_parameters: reply)\nend)"}},{"html_id":"send_contact(params:RelayParameters,contact:Tourmaline::Contact):Nil-instance-method","name":"send_contact","doc":"Queues a `Tourmaline::Contact` with the given *params*","summary":"<p>Queues a <code>Tourmaline::Contact</code> with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"},{"name":"contact","external_name":"contact","restriction":"Tourmaline::Contact"}],"args_string":"(params : RelayParameters, contact : Tourmaline::Contact) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>, contact : Tourmaline::Contact) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":416,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L416"},"def":{"name":"send_contact","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"},{"name":"contact","external_name":"contact","restriction":"Tourmaline::Contact"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_contact(receiver, phone_number: contact.phone_number, first_name: contact.first_name, last_name: contact.last_name, vcard: contact.vcard, message_effect_id: params.effect, reply_parameters: reply)\nend)"}},{"html_id":"send_document(params:RelayParameters):Nil-instance-method","name":"send_document","doc":"Queues a document with the given *params*","summary":"<p>Queues a document with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"args_string":"(params : RelayParameters) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":260,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L260"},"def":{"name":"send_document","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_document(receiver, params.media, caption: params.text, parse_mode: Tourmaline::ParseMode::None, caption_entities: params.entities, message_effect_id: params.effect, reply_parameters: reply)\nend)"}},{"html_id":"send_forward(params:RelayParameters,message:MessageID):Nil-instance-method","name":"send_forward","doc":"Queues a forwarded message with the given *params*","summary":"<p>Queues a forwarded message with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"},{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(params : RelayParameters, message : MessageID) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":301,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L301"},"def":{"name":"send_forward","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"},{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, _reply : ReplyParameters | ::Nil) do\n  @client.forward_message(receiver, params.sender, message)\nend)"}},{"html_id":"send_location(params:RelayParameters,location:Tourmaline::Location):Nil-instance-method","name":"send_location","doc":"Queues a `Tourmaline::Location` with the given *params*","summary":"<p>Queues a <code>Tourmaline::Location</code> with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"},{"name":"location","external_name":"location","restriction":"Tourmaline::Location"}],"args_string":"(params : RelayParameters, location : Tourmaline::Location) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>, location : Tourmaline::Location) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":397,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L397"},"def":{"name":"send_location","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"},{"name":"location","external_name":"location","restriction":"Tourmaline::Location"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_location(receiver, latitude: location.latitude, longitude: location.longitude, message_effect_id: params.effect, reply_parameters: reply)\nend)"}},{"html_id":"send_message(services:Services):Bool|Nil-instance-method","name":"send_message","doc":"Takes a message from the queue and sends it.\n\nReturns true if queue is empty","summary":"<p>Takes a message from the queue and sends it.</p>","abstract":false,"args":[{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(services : Services) : Bool | Nil","args_html":"(services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":545,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L545"},"def":{"name":"send_message","args":[{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if msg = @queue.get_message\nelse\n  return true\nend\nif success = relay_message(msg, services)\nelse\n  return\nend\ncache_message(success, msg, services)\n"}},{"html_id":"send_photo(params:RelayParameters):Nil-instance-method","name":"send_photo","doc":"Queues a photo with the given *params*","summary":"<p>Queues a photo with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"args_string":"(params : RelayParameters) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":149,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L149"},"def":{"name":"send_photo","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_photo(receiver, params.media, caption: params.text, parse_mode: Tourmaline::ParseMode::None, caption_entities: params.entities, has_spoiler: params.spoiler, message_effect_id: params.effect, show_caption_above_media: params.caption_above_media, reply_parameters: reply)\nend)"}},{"html_id":"send_poll_copy(reply:MessageID,user:User,effect:String|Nil,poll:Tourmaline::Poll):Tourmaline::Message-instance-method","name":"send_poll_copy","doc":"Sends a `Tourmaline::Poll` with the given parameters found in *poll*","summary":"<p>Sends a <code>Tourmaline::Poll</code> with the given parameters found in <em>poll</em></p>","abstract":false,"args":[{"name":"reply","external_name":"reply","restriction":"MessageID"},{"name":"user","external_name":"user","restriction":"User"},{"name":"effect","external_name":"effect","restriction":"String | ::Nil"},{"name":"poll","external_name":"poll","restriction":"Tourmaline::Poll"}],"args_string":"(reply : MessageID, user : User, effect : String | Nil, poll : Tourmaline::Poll) : Tourmaline::Message","args_html":"(reply : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, effect : String | Nil, poll : Tourmaline::Poll) : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":281,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L281"},"def":{"name":"send_poll_copy","args":[{"name":"reply","external_name":"reply","restriction":"MessageID"},{"name":"user","external_name":"user","restriction":"User"},{"name":"effect","external_name":"effect","restriction":"String | ::Nil"},{"name":"poll","external_name":"poll","restriction":"Tourmaline::Poll"}],"return_type":"Tourmaline::Message","visibility":"Public","body":"@client.send_poll(user.id, question: poll.question, options: poll.options.map do |option|\n  Tourmaline::InputPollOption.new(option.text, text_entities: option.text_entities)\nend, is_anonymous: true, type: poll.type, allows_multiple_answers: poll.allows_multiple_answers?, correct_option_id: poll.correct_option_id, explanation: poll.explanation, explanation_entities: poll.explanation_entities, open_period: poll.open_period, message_effect_id: effect, reply_parameters: ReplyParameters.new(reply))"}},{"html_id":"send_sticker(params:RelayParameters):Nil-instance-method","name":"send_sticker","doc":"Queues a sticker with the given *params*","summary":"<p>Queues a sticker with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"args_string":"(params : RelayParameters) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":336,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L336"},"def":{"name":"send_sticker","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_sticker(receiver, params.media, message_effect_id: params.effect, reply_parameters: reply)\nend)"}},{"html_id":"send_text(params:RelayParameters):Nil-instance-method","name":"send_text","doc":"Queues a text message with the given *params*","summary":"<p>Queues a text message with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"args_string":"(params : RelayParameters) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":128,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L128"},"def":{"name":"send_text","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_message(receiver, params.text, parse_mode: nil, entities: params.entities, message_effect_id: params.effect, link_preview_options: params.link_preview_options, reply_parameters: reply)\nend)"}},{"html_id":"send_to_channel(reply_message:MessageID|Nil,channel:String,text:String):Nil-instance-method","name":"send_to_channel","doc":"Relay a message to the log channel.","summary":"<p>Relay a message to the log channel.</p>","abstract":false,"args":[{"name":"reply_message","external_name":"reply_message","restriction":"MessageID | ::Nil"},{"name":"channel","external_name":"channel","restriction":"String"},{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(reply_message : MessageID | Nil, channel : String, text : String) : Nil","args_html":"(reply_message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Nil, channel : String, text : String) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":111,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L111"},"def":{"name":"send_to_channel","args":[{"name":"reply_message","external_name":"reply_message","restriction":"MessageID | ::Nil"},{"name":"channel","external_name":"channel","restriction":"String"},{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"if id = channel.to_i64?\nelse\n  return\nend\n@queue.enqueue_priority(id, nil, ->(receiver : UserID, _reply : ReplyParameters | ::Nil) do\n  @client.send_message(receiver, text, parse_mode: nil)\nend)\n"}},{"html_id":"send_to_user(reply_message:ReplyParameters|Nil,user:UserID,text:String,reply_markup:Tourmaline::InlineKeyboardMarkup|Nil=nil):Nil-instance-method","name":"send_to_user","doc":"Relay a message to a single user. Used for system messages.","summary":"<p>Relay a message to a single user.</p>","abstract":false,"args":[{"name":"reply_message","external_name":"reply_message","restriction":"ReplyParameters | ::Nil"},{"name":"user","external_name":"user","restriction":"UserID"},{"name":"text","external_name":"text","restriction":"String"},{"name":"reply_markup","default_value":"nil","external_name":"reply_markup","restriction":"Tourmaline::InlineKeyboardMarkup | ::Nil"}],"args_string":"(reply_message : ReplyParameters | Nil, user : UserID, text : String, reply_markup : Tourmaline::InlineKeyboardMarkup | Nil = nil) : Nil","args_html":"(reply_message : <a href=\"../PrivateParlorXT/ReplyParameters.html\">ReplyParameters</a> | Nil, user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, text : String, reply_markup : Tourmaline::InlineKeyboardMarkup | Nil = <span class=\"n\">nil</span>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":94,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L94"},"def":{"name":"send_to_user","args":[{"name":"reply_message","external_name":"reply_message","restriction":"ReplyParameters | ::Nil"},{"name":"user","external_name":"user","restriction":"UserID"},{"name":"text","external_name":"text","restriction":"String"},{"name":"reply_markup","default_value":"nil","external_name":"reply_markup","restriction":"Tourmaline::InlineKeyboardMarkup | ::Nil"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue_priority(user, reply_message, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_message(receiver, text, link_preview_options: Tourmaline::LinkPreviewOptions.new, reply_parameters: reply, reply_markup: reply_markup)\nend)"}},{"html_id":"send_venue(params:RelayParameters,venue:Tourmaline::Venue):Nil-instance-method","name":"send_venue","doc":"Queues a `Tourmaline::Venue` with the given *params*","summary":"<p>Queues a <code>Tourmaline::Venue</code> with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"},{"name":"venue","external_name":"venue","restriction":"Tourmaline::Venue"}],"args_string":"(params : RelayParameters, venue : Tourmaline::Venue) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>, venue : Tourmaline::Venue) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":372,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L372"},"def":{"name":"send_venue","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"},{"name":"venue","external_name":"venue","restriction":"Tourmaline::Venue"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_venue(receiver, latitude: venue.location.latitude, longitude: venue.location.longitude, title: venue.title, address: venue.address, foursquare_id: venue.foursquare_id, foursquare_type: venue.foursquare_type, google_place_id: venue.google_place_id, google_place_type: venue.google_place_type, message_effect_id: params.effect, reply_parameters: reply)\nend)"}},{"html_id":"send_video(params:RelayParameters):Nil-instance-method","name":"send_video","doc":"Queues a video with the given *params*","summary":"<p>Queues a video with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"args_string":"(params : RelayParameters) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":195,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L195"},"def":{"name":"send_video","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_video(receiver, params.media, caption: params.text, parse_mode: Tourmaline::ParseMode::None, caption_entities: params.entities, has_spoiler: params.spoiler, message_effect_id: params.effect, show_caption_above_media: params.caption_above_media, reply_parameters: reply)\nend)"}},{"html_id":"send_video_note(params:RelayParameters):Nil-instance-method","name":"send_video_note","doc":"Queues a video note with the given *params*","summary":"<p>Queues a video note with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"args_string":"(params : RelayParameters) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":318,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L318"},"def":{"name":"send_video_note","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_video_note(receiver, params.media, message_effect_id: params.effect, reply_parameters: reply)\nend)"}},{"html_id":"send_voice(params:RelayParameters):Nil-instance-method","name":"send_voice","doc":"Queues a voice message with the given *params*","summary":"<p>Queues a voice message with the given <em>params</em></p>","abstract":false,"args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"args_string":"(params : RelayParameters) : Nil","args_html":"(params : <a href=\"../PrivateParlorXT/RelayParameters.html\">RelayParameters</a>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":239,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L239"},"def":{"name":"send_voice","args":[{"name":"params","external_name":"params","restriction":"RelayParameters"}],"return_type":"Nil","visibility":"Public","body":"@queue.enqueue(params.original_message, params.sender, params.receivers, params.replies, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  @client.send_voice(receiver, params.media, caption: params.text, parse_mode: Tourmaline::ParseMode::None, caption_entities: params.entities, message_effect_id: params.effect, reply_parameters: reply)\nend)"}},{"html_id":"set_log_channel(channel_id:String):Nil-instance-method","name":"set_log_channel","doc":"Set the log chanel ID to *channel_id*","summary":"<p>Set the log chanel ID to <em>channel_id</em></p>","abstract":false,"args":[{"name":"channel_id","external_name":"channel_id","restriction":"String"}],"args_string":"(channel_id : String) : Nil","args_html":"(channel_id : String) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":72,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L72"},"def":{"name":"set_log_channel","args":[{"name":"channel_id","external_name":"channel_id","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"@log_channel = channel_id"}},{"html_id":"start_polling-instance-method","name":"start_polling","doc":"Start polling Telegram for updates","summary":"<p>Start polling Telegram for updates</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":84,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L84"},"def":{"name":"start_polling","visibility":"Public","body":"@client.poll"}},{"html_id":"stop_polling-instance-method","name":"stop_polling","doc":"Stop polling Telegram for updates","summary":"<p>Stop polling Telegram for updates</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":89,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L89"},"def":{"name":"stop_polling","visibility":"Public","body":"@client.stop"}},{"html_id":"unpin_message(user:UserID,message:MessageID|Nil=nil):Nil-instance-method","name":"unpin_message","doc":"Unpins the most recent message from the chat, or unpins the given *message*","summary":"<p>Unpins the most recent message from the chat, or unpins the given <em>message</em></p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"message","default_value":"nil","external_name":"message","restriction":"MessageID | ::Nil"}],"args_string":"(user : UserID, message : MessageID | Nil = nil) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Nil = <span class=\"n\">nil</span>) : Nil","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":486,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L486"},"def":{"name":"unpin_message","args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"message","default_value":"nil","external_name":"message","restriction":"MessageID | ::Nil"}],"return_type":"Nil","visibility":"Public","body":"if message\n  message = ReplyParameters.new(message)\nelse\n  message = nil\nend\n@queue.enqueue_priority(user, message, ->(receiver : UserID, reply : ReplyParameters | ::Nil) do\n  if reply\n    @client.unpin_chat_message(receiver, message_id: reply.message_id)\n  else\n    @client.unpin_chat_message(receiver, nil)\n  end\nend)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/RelayParameters","path":"PrivateParlorXT/RelayParameters.html","kind":"class","full_name":"PrivateParlorXT::RelayParameters","name":"RelayParameters","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A container used for storing values necessary for Tourmaline send message methods","summary":"<p>A container used for storing values necessary for Tourmaline send message methods</p>","constructors":[{"html_id":"new(original_message:MessageID,sender:UserID,receivers:Array(UserID),replies:Hash(UserID,ReplyParameters)={}ofUserID=>ReplyParameters,text:String=\"\",entities:Array(Tourmaline::MessageEntity)|Nil=nil,link_preview_options:Tourmaline::LinkPreviewOptions|Nil=nil,media:String=\"\",spoiler:Bool|Nil=nil,effect:String|Nil=nil,caption_above_media:Bool|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"original_message","external_name":"original_message","restriction":"MessageID"},{"name":"sender","external_name":"sender","restriction":"UserID"},{"name":"receivers","external_name":"receivers","restriction":"Array(UserID)"},{"name":"replies","default_value":"{} of UserID => ReplyParameters","external_name":"replies","restriction":"Hash(UserID, ReplyParameters)"},{"name":"text","default_value":"\"\"","external_name":"text","restriction":"String"},{"name":"entities","default_value":"nil","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity) | ::Nil"},{"name":"link_preview_options","default_value":"nil","external_name":"link_preview_options","restriction":"Tourmaline::LinkPreviewOptions | ::Nil"},{"name":"media","default_value":"\"\"","external_name":"media","restriction":"String"},{"name":"spoiler","default_value":"nil","external_name":"spoiler","restriction":"Bool | ::Nil"},{"name":"effect","default_value":"nil","external_name":"effect","restriction":"String | ::Nil"},{"name":"caption_above_media","default_value":"nil","external_name":"caption_above_media","restriction":"Bool | ::Nil"}],"args_string":"(original_message : MessageID, sender : UserID, receivers : Array(UserID), replies : Hash(UserID, ReplyParameters) = {} of UserID => ReplyParameters, text : String = \"\", entities : Array(Tourmaline::MessageEntity) | Nil = nil, link_preview_options : Tourmaline::LinkPreviewOptions | Nil = nil, media : String = \"\", spoiler : Bool | Nil = nil, effect : String | Nil = nil, caption_above_media : Bool | Nil = nil)","args_html":"(original_message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, sender : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, receivers : Array(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>), replies : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, <a href=\"../PrivateParlorXT/ReplyParameters.html\">ReplyParameters</a>) = {} <span class=\"k\">of</span> <span class=\"t\">UserID</span> <span class=\"o\">=&gt;</span> <span class=\"t\">ReplyParameters</span>, text : String = <span class=\"s\">&quot;&quot;</span>, entities : Array(Tourmaline::MessageEntity) | Nil = <span class=\"n\">nil</span>, link_preview_options : Tourmaline::LinkPreviewOptions | Nil = <span class=\"n\">nil</span>, media : String = <span class=\"s\">&quot;&quot;</span>, spoiler : Bool | Nil = <span class=\"n\">nil</span>, effect : String | Nil = <span class=\"n\">nil</span>, caption_above_media : Bool | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":41,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L41"},"def":{"name":"new","args":[{"name":"original_message","external_name":"original_message","restriction":"MessageID"},{"name":"sender","external_name":"sender","restriction":"UserID"},{"name":"receivers","external_name":"receivers","restriction":"Array(UserID)"},{"name":"replies","default_value":"{} of UserID => ReplyParameters","external_name":"replies","restriction":"Hash(UserID, ReplyParameters)"},{"name":"text","default_value":"\"\"","external_name":"text","restriction":"String"},{"name":"entities","default_value":"nil","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity) | ::Nil"},{"name":"link_preview_options","default_value":"nil","external_name":"link_preview_options","restriction":"Tourmaline::LinkPreviewOptions | ::Nil"},{"name":"media","default_value":"\"\"","external_name":"media","restriction":"String"},{"name":"spoiler","default_value":"nil","external_name":"spoiler","restriction":"Bool | ::Nil"},{"name":"effect","default_value":"nil","external_name":"effect","restriction":"String | ::Nil"},{"name":"caption_above_media","default_value":"nil","external_name":"caption_above_media","restriction":"Bool | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(original_message, sender, receivers, replies, text, entities, link_preview_options, media, spoiler, effect, caption_above_media)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"caption_above_media:Bool|Nil-instance-method","name":"caption_above_media","doc":"Set to `true` if the message caption of photos, videos, or animations should be above the media, `false` or `nil` if the captoin should be below","summary":"<p>Set to <code>true</code> if the message caption of photos, videos, or animations should be above the media, <code>false</code> or <code>nil</code> if the captoin should be below</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":39,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L39"},"def":{"name":"caption_above_media","return_type":"Bool | ::Nil","visibility":"Public","body":"@caption_above_media"}},{"html_id":"effect:String|Nil-instance-method","name":"effect","doc":"ID of the message effect that should be attached to this message","summary":"<p>ID of the message effect that should be attached to this message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":36,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L36"},"def":{"name":"effect","return_type":"String | ::Nil","visibility":"Public","body":"@effect"}},{"html_id":"entities:Array(Tourmaline::MessageEntity)|Nil-instance-method","name":"entities","doc":"The message entities for this message","summary":"<p>The message entities for this message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":24,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L24"},"def":{"name":"entities","return_type":"Array(Tourmaline::MessageEntity) | ::Nil","visibility":"Public","body":"@entities"}},{"html_id":"link_preview_options:Tourmaline::LinkPreviewOptions|Nil-instance-method","name":"link_preview_options","doc":"Determines how the link in the text will be displayed","summary":"<p>Determines how the link in the text will be displayed</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":27,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L27"},"def":{"name":"link_preview_options","return_type":"Tourmaline::LinkPreviewOptions | ::Nil","visibility":"Public","body":"@link_preview_options"}},{"html_id":"media:String-instance-method","name":"media","doc":"A media file id","summary":"<p>A media file id</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":30,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L30"},"def":{"name":"media","return_type":"String","visibility":"Public","body":"@media"}},{"html_id":"original_message:MessageID-instance-method","name":"original_message","doc":"The message group `MessageID`","summary":"<p>The message group <code><a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L9"},"def":{"name":"original_message","return_type":"MessageID","visibility":"Public","body":"@original_message"}},{"html_id":"receivers:Array(UserID)-instance-method","name":"receivers","doc":"Array of `UserID` who will receive this message","summary":"<p>Array of <code><a href=\"../PrivateParlorXT/UserID.html\">UserID</a></code> who will receive this message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":15,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L15"},"def":{"name":"receivers","return_type":"Array(UserID)","visibility":"Public","body":"@receivers"}},{"html_id":"replies:Hash(UserID,ReplyParameters)-instance-method","name":"replies","doc":"A Hash of `UserID` to `ReplyParameters`, containing the message ID for that user's message which this message will reply to","summary":"<p>A Hash of <code><a href=\"../PrivateParlorXT/UserID.html\">UserID</a></code> to <code><a href=\"../PrivateParlorXT/ReplyParameters.html\">ReplyParameters</a></code>, containing the message ID for that user's message which this message will reply to</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":18,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L18"},"def":{"name":"replies","return_type":"Hash(UserID, ReplyParameters)","visibility":"Public","body":"@replies"}},{"html_id":"sender:UserID-instance-method","name":"sender","doc":"`UserID` of the user who sent this message","summary":"<p><code><a href=\"../PrivateParlorXT/UserID.html\">UserID</a></code> of the user who sent this message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":12,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L12"},"def":{"name":"sender","return_type":"UserID","visibility":"Public","body":"@sender"}},{"html_id":"spoiler:Bool|Nil-instance-method","name":"spoiler","doc":"Set to `true` if the message media should be spoiled, `false` or `nil` if message's media should not have a spoiler","summary":"<p>Set to <code>true</code> if the message media should be spoiled, <code>false</code> or <code>nil</code> if message's media should not have a spoiler</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":33,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L33"},"def":{"name":"spoiler","return_type":"Bool | ::Nil","visibility":"Public","body":"@spoiler"}},{"html_id":"text:String-instance-method","name":"text","doc":"The text or caption of this message","summary":"<p>The text or caption of this message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/relay/relay.cr","line_number":21,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/relay/relay.cr#L21"},"def":{"name":"text","return_type":"String","visibility":"Public","body":"@text"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/RemoveCommand","path":"PrivateParlorXT/RemoveCommand.html","kind":"class","full_name":"PrivateParlorXT::RemoveCommand","name":"RemoveCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/remove_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/remove_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to delete a message without giving a cooldown and warning","summary":"<p>A command used to delete a message without giving a cooldown and warning</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Deletes the reply of the given *message* for everybody without given a cooldown and warning to the user who sent it, if the *message* meets requirements","summary":"<p>Deletes the reply of the given <em>message</em> for everybody without given a cooldown and warning to the user who sent it, if the <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/remove_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/remove_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Remove, services)\nelse\n  return\nend\nif reply = reply_message(user, message, services)\nelse\n  return\nend\nif reply_user = reply_user(user, reply, services)\nelse\n  return\nend\nupdate_user_activity(user, services)\noriginal_message = delete_messages(reply.message_id.to_i64, reply_user.id, reply_user.debug_enabled, services)\nreason = Format.get_arg(message.text)\nresponse = Format.substitute_reply(services.replies.message_removed, {\"reason\" => Format.reason(reason, services.replies)})\nlog = Format.substitute_message(services.logs.message_removed, {\"id\" => user.id.to_s, \"name\" => user.formatted_name, \"msid\" => original_message.to_s, \"oid\" => reply_user.obfuscated_id, \"reason\" => Format.reason_log(reason, services.logs)})\nif original_message\n  original_message = ReplyParameters.new(original_message)\nend\nservices.relay.send_to_user(original_message, reply_user.id, response)\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.success)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Replies","path":"PrivateParlorXT/Replies.html","kind":"class","full_name":"PrivateParlorXT::Replies","name":"Replies","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L5"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A container for various system message replies","summary":"<p>A container for various system message replies</p>","constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L6"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}}],"instance_methods":[{"html_id":"added_to_chat:String-instance-method","name":"added_to_chat","doc":"When the user is whitelisted","summary":"<p>When the user is whitelisted</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":34,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L34"},"def":{"name":"added_to_chat","return_type":"String","visibility":"Public","body":"@added_to_chat"}},{"html_id":"already_in_chat:String-instance-method","name":"already_in_chat","doc":"When the user attempts to join, but has not left and is still in the chat","summary":"<p>When the user attempts to join, but has not left and is still in the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":26,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L26"},"def":{"name":"already_in_chat","return_type":"String","visibility":"Public","body":"@already_in_chat"}},{"html_id":"already_voted:String-instance-method","name":"already_voted","doc":"When the user attempts to upvote/downvote a message he already upvoted or downvoted","summary":"<p>When the user attempts to upvote/downvote a message he already upvoted or downvoted</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":134,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L134"},"def":{"name":"already_voted","return_type":"String","visibility":"Public","body":"@already_voted"}},{"html_id":"already_warned:String-instance-method","name":"already_warned","doc":"When the invoker attempts to warn a message with `WarnCommand` that was already warned","summary":"<p>When the invoker attempts to warn a message with <code><a href=\"../PrivateParlorXT/WarnCommand.html\">WarnCommand</a></code> that was already warned</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":166,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L166"},"def":{"name":"already_warned","return_type":"String","visibility":"Public","body":"@already_warned"}},{"html_id":"already_whitelisted:String-instance-method","name":"already_whitelisted","doc":"When the invoker attempts to whitelist a user who is already in the chat","summary":"<p>When the invoker attempts to whitelist a user who is already in the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":38,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L38"},"def":{"name":"already_whitelisted","return_type":"String","visibility":"Public","body":"@already_whitelisted"}},{"html_id":"blacklist_contact:String-instance-method","name":"blacklist_contact","doc":"Format for the contact in `blacklisted` replies","summary":"<p>Format for the contact in <code><a href=\"../PrivateParlorXT/Replies.html#blacklisted%3AString-instance-method\">#blacklisted</a></code> replies</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":290,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L290"},"def":{"name":"blacklist_contact","return_type":"String","visibility":"Public","body":"@blacklist_contact"}},{"html_id":"blacklisted:String-instance-method","name":"blacklisted","doc":"When the user has been blacklisted","summary":"<p>When the user has been blacklisted</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":286,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L286"},"def":{"name":"blacklisted","return_type":"String","visibility":"Public","body":"@blacklisted"}},{"html_id":"command_disabled:String-instance-method","name":"command_disabled","doc":"When the invoker attempts to us a command that is disabled","summary":"<p>When the invoker attempts to us a command that is disabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":62,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L62"},"def":{"name":"command_disabled","return_type":"String","visibility":"Public","body":"@command_disabled"}},{"html_id":"config_stats:String-instance-method","name":"config_stats","doc":"Message containing general bot information when `Statistics` are enabled","summary":"<p>Message containing general bot information when <code><a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a></code> are enabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":306,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L306"},"def":{"name":"config_stats","return_type":"String","visibility":"Public","body":"@config_stats"}},{"html_id":"cooldown_false:String-instance-method","name":"cooldown_false","doc":"Format for `user_info` when the user is not cooldowned","summary":"<p>Format for <code><a href=\"../PrivateParlorXT/Replies.html#user_info%3AString-instance-method\">#user_info</a></code> when the user is not cooldowned</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":242,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L242"},"def":{"name":"cooldown_false","return_type":"String","visibility":"Public","body":"@cooldown_false"}},{"html_id":"cooldown_given:String-instance-method","name":"cooldown_given","doc":"When the user is given a cooldown","summary":"<p>When the user is given a cooldown</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":266,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L266"},"def":{"name":"cooldown_given","return_type":"String","visibility":"Public","body":"@cooldown_given"}},{"html_id":"cooldown_true:String-instance-method","name":"cooldown_true","doc":"Format for `user_info` when the user is cooldowned","summary":"<p>Format for <code><a href=\"../PrivateParlorXT/Replies.html#user_info%3AString-instance-method\">#user_info</a></code> when the user is cooldowned</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":238,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L238"},"def":{"name":"cooldown_true","return_type":"String","visibility":"Public","body":"@cooldown_true"}},{"html_id":"deanon_poll:String-instance-method","name":"deanon_poll","doc":"When the user attempts to send a poll that does not have anonymous voting","summary":"<p>When the user attempts to send a poll that does not have anonymous voting</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":54,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L54"},"def":{"name":"deanon_poll","return_type":"String","visibility":"Public","body":"@deanon_poll"}},{"html_id":"downvote_spam:String-instance-method","name":"downvote_spam","doc":"When the user is downvoting too often","summary":"<p>When the user is downvoting too often</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":190,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L190"},"def":{"name":"downvote_spam","return_type":"String","visibility":"Public","body":"@downvote_spam"}},{"html_id":"downvoted_own_message:String-instance-method","name":"downvoted_own_message","doc":"When the user attempts to downvote his own message","summary":"<p>When the user attempts to downvote his own message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":146,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L146"},"def":{"name":"downvoted_own_message","return_type":"String","visibility":"Public","body":"@downvoted_own_message"}},{"html_id":"fail:String-instance-method","name":"fail","doc":"When the command fails","summary":"<p>When the command fails</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":346,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L346"},"def":{"name":"fail","return_type":"String","visibility":"Public","body":"@fail"}},{"html_id":"flag_sign_format:String-instance-method","name":"flag_sign_format","doc":"Message containing the format for setting flag signs","summary":"<p>Message containing the format for setting flag signs</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":198,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L198"},"def":{"name":"flag_sign_format","return_type":"String","visibility":"Public","body":"@flag_sign_format"}},{"html_id":"flag_sign_set_format:String-instance-method","name":"flag_sign_set_format","doc":"The layout for flat sign headers","summary":"<p>The layout for flat sign headers</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":210,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L210"},"def":{"name":"flag_sign_set_format","return_type":"String","visibility":"Public","body":"@flag_sign_set_format"}},{"html_id":"full_user_stats:String-instance-method","name":"full_user_stats","doc":"Message containing totals of joined, left, and blacklisted users when `Statistics` are enabled","summary":"<p>Message containing totals of joined, left, and blacklisted users when <code><a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a></code> are enabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":314,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L314"},"def":{"name":"full_user_stats","return_type":"String","visibility":"Public","body":"@full_user_stats"}},{"html_id":"gave_downvote:String-instance-method","name":"gave_downvote","doc":"When the user gives a downvote","summary":"<p>When the user gives a downvote</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":138,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L138"},"def":{"name":"gave_downvote","return_type":"String","visibility":"Public","body":"@gave_downvote"}},{"html_id":"gave_upvote:String-instance-method","name":"gave_upvote","doc":"When the user gives an upvote","summary":"<p>When the user gives an upvote</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":122,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L122"},"def":{"name":"gave_upvote","return_type":"String","visibility":"Public","body":"@gave_upvote"}},{"html_id":"got_downvote:String-instance-method","name":"got_downvote","doc":"When the user receives a downvote","summary":"<p>When the user receives a downvote</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":142,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L142"},"def":{"name":"got_downvote","return_type":"String","visibility":"Public","body":"@got_downvote"}},{"html_id":"got_upvote:String-instance-method","name":"got_upvote","doc":"When the user receives an upvote","summary":"<p>When the user receives an upvote</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":126,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L126"},"def":{"name":"got_upvote","return_type":"String","visibility":"Public","body":"@got_upvote"}},{"html_id":"help_header:String-instance-method","name":"help_header","doc":"The header displayed at the top of every `HelpCommand` reply","summary":"<p>The header displayed at the top of every <code><a href=\"../PrivateParlorXT/HelpCommand.html\">HelpCommand</a></code> reply</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":98,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L98"},"def":{"name":"help_header","return_type":"String","visibility":"Public","body":"@help_header"}},{"html_id":"help_rank_commands:String-instance-method","name":"help_rank_commands","doc":"Header shown in the `HelpCommand` reply containing the name of the user's `Rank`","summary":"<p>Header shown in the <code><a href=\"../PrivateParlorXT/HelpCommand.html\">HelpCommand</a></code> reply containing the name of the user's <code><a href=\"../PrivateParlorXT/Rank.html\">Rank</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":102,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L102"},"def":{"name":"help_rank_commands","return_type":"String","visibility":"Public","body":"@help_rank_commands"}},{"html_id":"help_reply_commands:String-instance-method","name":"help_reply_commands","doc":"Header in the `HelpCommand` below which contains the commands that require a reply","summary":"<p>Header in the <code><a href=\"../PrivateParlorXT/HelpCommand.html\">HelpCommand</a></code> below which contains the commands that require a reply</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":106,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L106"},"def":{"name":"help_reply_commands","return_type":"String","visibility":"Public","body":"@help_reply_commands"}},{"html_id":"inactive:String-instance-method","name":"inactive","doc":"When the user has been kicked due to inactivity","summary":"<p>When the user has been kicked due to inactivity</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":302,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L302"},"def":{"name":"inactive","return_type":"String","visibility":"Public","body":"@inactive"}},{"html_id":"info_warning:String-instance-method","name":"info_warning","doc":"Format for `user_info` when the user has a warning","summary":"<p>Format for <code><a href=\"../PrivateParlorXT/Replies.html#user_info%3AString-instance-method\">#user_info</a></code> when the user has a warning</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":230,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L230"},"def":{"name":"info_warning","return_type":"String","visibility":"Public","body":"@info_warning"}},{"html_id":"insufficient_karma:String-instance-method","name":"insufficient_karma","doc":"When the user has insufficient karma to send a message when using the `KarmaHandler`","summary":"<p>When the user has insufficient karma to send a message when using the <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":162,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L162"},"def":{"name":"insufficient_karma","return_type":"String","visibility":"Public","body":"@insufficient_karma"}},{"html_id":"invalid_tripcode_format:String-instance-method","name":"invalid_tripcode_format","doc":"When the user attempts to set a tripcode with the wrong format","summary":"<p>When the user attempts to set a tripcode with the wrong format</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":202,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L202"},"def":{"name":"invalid_tripcode_format","return_type":"String","visibility":"Public","body":"@invalid_tripcode_format"}},{"html_id":"joined:String-instance-method","name":"joined","doc":"Sent when the user has joined the chat","summary":"<p>Sent when the user has joined the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L10"},"def":{"name":"joined","return_type":"String","visibility":"Public","body":"@joined"}},{"html_id":"joined_pseudonym:String-instance-method","name":"joined_pseudonym","doc":"Sent when the user has joined the chat, and prompts the user to set a tripcode","summary":"<p>Sent when the user has joined the chat, and prompts the user to set a tripcode</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L14"},"def":{"name":"joined_pseudonym","return_type":"String","visibility":"Public","body":"@joined_pseudonym"}},{"html_id":"karma_info:String-instance-method","name":"karma_info","doc":"Message containing information about the user's karma and karma level progress","summary":"<p>Message containing information about the user's karma and karma level progress</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":150,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L150"},"def":{"name":"karma_info","return_type":"String","visibility":"Public","body":"@karma_info"}},{"html_id":"karma_level_down:String-instance-method","name":"karma_level_down","doc":"When the user loses a karma level","summary":"<p>When the user loses a karma level</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":158,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L158"},"def":{"name":"karma_level_down","return_type":"String","visibility":"Public","body":"@karma_level_down"}},{"html_id":"karma_level_stats:String-instance-method","name":"karma_level_stats","doc":"Message containing totals for each karma level when `Statistics` are enabled","summary":"<p>Message containing totals for each karma level when <code><a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a></code> are enabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":326,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L326"},"def":{"name":"karma_level_stats","return_type":"String","visibility":"Public","body":"@karma_level_stats"}},{"html_id":"karma_level_up:String-instance-method","name":"karma_level_up","doc":"When the user gains a karma level","summary":"<p>When the user gains a karma level</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":154,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L154"},"def":{"name":"karma_level_up","return_type":"String","visibility":"Public","body":"@karma_level_up"}},{"html_id":"karma_reason:String-instance-method","name":"karma_reason","doc":"The formatting for a karma reason","summary":"<p>The formatting for a karma reason</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":118,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L118"},"def":{"name":"karma_reason","return_type":"String","visibility":"Public","body":"@karma_reason"}},{"html_id":"karma_stats:String-instance-method","name":"karma_stats","doc":"Message containing totals of upvotes and downvotes when `Statistics` are enabled","summary":"<p>Message containing totals of upvotes and downvotes when <code><a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a></code> are enabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":322,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L322"},"def":{"name":"karma_stats","return_type":"String","visibility":"Public","body":"@karma_stats"}},{"html_id":"left:String-instance-method","name":"left","doc":"When the user leaves the chat","summary":"<p>When the user leaves the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L22"},"def":{"name":"left","return_type":"String","visibility":"Public","body":"@left"}},{"html_id":"media_disabled:String-instance-method","name":"media_disabled","doc":"When the user attempts to send a message type that is disabled","summary":"<p>When the user attempts to send a message type that is disabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":66,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L66"},"def":{"name":"media_disabled","return_type":"String","visibility":"Public","body":"@media_disabled"}},{"html_id":"media_limit:String-instance-method","name":"media_limit","doc":"When the user cannot chat right now due to being too new when the media limit is enabled","summary":"<p>When the user cannot chat right now due to being too new when the media limit is enabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":282,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L282"},"def":{"name":"media_limit","return_type":"String","visibility":"Public","body":"@media_limit"}},{"html_id":"message_deleted:String-instance-method","name":"message_deleted","doc":"When one of the user's messages was deleted","summary":"<p>When one of the user's messages was deleted</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":254,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L254"},"def":{"name":"message_deleted","return_type":"String","visibility":"Public","body":"@message_deleted"}},{"html_id":"message_removed:String-instance-method","name":"message_removed","doc":"When one of the user's messages was removed","summary":"<p>When one of the user's messages was removed</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":258,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L258"},"def":{"name":"message_removed","return_type":"String","visibility":"Public","body":"@message_removed"}},{"html_id":"message_stats:String-instance-method","name":"message_stats","doc":"Message containing totals of different message types when `Statistics` are enabled","summary":"<p>Message containing totals of different message types when <code><a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a></code> are enabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":310,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L310"},"def":{"name":"message_stats","return_type":"String","visibility":"Public","body":"@message_stats"}},{"html_id":"missing_args:String-instance-method","name":"missing_args","doc":"When the invoker uses a command without the required arguments","summary":"<p>When the invoker uses a command without the required arguments</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":58,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L58"},"def":{"name":"missing_args","return_type":"String","visibility":"Public","body":"@missing_args"}},{"html_id":"no_rank_found:String-instance-method","name":"no_rank_found","doc":"When the rank searched for could not be found from the given name","summary":"<p>When the rank searched for could not be found from the given name</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":90,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L90"},"def":{"name":"no_rank_found","return_type":"String","visibility":"Public","body":"@no_rank_found"}},{"html_id":"no_reply:String-instance-method","name":"no_reply","doc":"When the invoker uses a command that requires a reply but does not reply to a message","summary":"<p>When the invoker uses a command that requires a reply but does not reply to a message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":70,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L70"},"def":{"name":"no_reply","return_type":"String","visibility":"Public","body":"@no_reply"}},{"html_id":"no_stats_available:String-instance-method","name":"no_stats_available","doc":"When there are no `Statistics` available","summary":"<p>When there are no <code><a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a></code> available</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":334,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L334"},"def":{"name":"no_stats_available","return_type":"String","visibility":"Public","body":"@no_stats_available"}},{"html_id":"no_tripcode_set:String-instance-method","name":"no_tripcode_set","doc":"When the user attempts to sign with a tripcode without having set a tripcode","summary":"<p>When the user attempts to sign with a tripcode without having set a tripcode</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":78,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L78"},"def":{"name":"no_tripcode_set","return_type":"String","visibility":"Public","body":"@no_tripcode_set"}},{"html_id":"no_user_found:String-instance-method","name":"no_user_found","doc":"When the user searched for could not be found from the given name","summary":"<p>When the user searched for could not be found from the given name</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":82,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L82"},"def":{"name":"no_user_found","return_type":"String","visibility":"Public","body":"@no_user_found"}},{"html_id":"no_user_oid_found:String-instance-method","name":"no_user_oid_found","doc":"When the user searched for could not be found from the given OID","summary":"<p>When the user searched for could not be found from the given OID</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":86,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L86"},"def":{"name":"no_user_oid_found","return_type":"String","visibility":"Public","body":"@no_user_oid_found"}},{"html_id":"not_in_cache:String-instance-method","name":"not_in_cache","doc":"When the user attempts ot reply to a message that is not in the message `History` anymore","summary":"<p>When the user attempts ot reply to a message that is not in the message <code><a href=\"../PrivateParlorXT/History.html\">History</a></code> anymore</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":74,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L74"},"def":{"name":"not_in_cache","return_type":"String","visibility":"Public","body":"@not_in_cache"}},{"html_id":"not_in_chat:String-instance-method","name":"not_in_chat","doc":"When the user attempts to chat, but cannot as he hasn't joined the chat","summary":"<p>When the user attempts to chat, but cannot as he hasn't joined the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":42,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L42"},"def":{"name":"not_in_chat","return_type":"String","visibility":"Public","body":"@not_in_chat"}},{"html_id":"not_in_cooldown:String-instance-method","name":"not_in_cooldown","doc":"When the invoker attempts to remove a cooldown from a user who is not cooldowned","summary":"<p>When the invoker attempts to remove a cooldown from a user who is not cooldowned</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":46,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L46"},"def":{"name":"not_in_cooldown","return_type":"String","visibility":"Public","body":"@not_in_cooldown"}},{"html_id":"on_cooldown:String-instance-method","name":"on_cooldown","doc":"When the user is on cooldown and cannot speak at this time","summary":"<p>When the user is on cooldown and cannot speak at this time</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":270,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L270"},"def":{"name":"on_cooldown","return_type":"String","visibility":"Public","body":"@on_cooldown"}},{"html_id":"privacy_policy:String-instance-method","name":"privacy_policy","doc":"The privacy policy of this bot","summary":"<p>The privacy policy of this bot</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":338,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L338"},"def":{"name":"privacy_policy","return_type":"String","visibility":"Public","body":"@privacy_policy"}},{"html_id":"private_sign:String-instance-method","name":"private_sign","doc":"When the user cannot sign his message due to having forward privacy enabled","summary":"<p>When the user cannot sign his message due to having forward privacy enabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":170,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L170"},"def":{"name":"private_sign","return_type":"String","visibility":"Public","body":"@private_sign"}},{"html_id":"promoted:String-instance-method","name":"promoted","doc":"When the user has been promoted to a new rank","summary":"<p>When the user has been promoted to a new rank</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":94,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L94"},"def":{"name":"promoted","return_type":"String","visibility":"Public","body":"@promoted"}},{"html_id":"purge_complete:String-instance-method","name":"purge_complete","doc":"Message returned after invoking `PurgeCommand`","summary":"<p>Message returned after invoking <code><a href=\"../PrivateParlorXT/PurgeCommand.html\">PurgeCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":298,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L298"},"def":{"name":"purge_complete","return_type":"String","visibility":"Public","body":"@purge_complete"}},{"html_id":"r9k_cooldown:String-instance-method","name":"r9k_cooldown","doc":"When the user sends an unoriginal message and is cooldowned when `Robot9000` is enabled","summary":"<p>When the user sends an unoriginal message and is cooldowned when <code><a href=\"../PrivateParlorXT/Robot9000.html\">Robot9000</a></code> is enabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":278,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L278"},"def":{"name":"r9k_cooldown","return_type":"String","visibility":"Public","body":"@r9k_cooldown"}},{"html_id":"ranked_info:String-instance-method","name":"ranked_info","doc":"Message containing information about another user","summary":"<p>Message containing information about another user</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":234,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L234"},"def":{"name":"ranked_info","return_type":"String","visibility":"Public","body":"@ranked_info"}},{"html_id":"reason_prefix:String-instance-method","name":"reason_prefix","doc":"Format for the reason found in warn, delete, and blacklist replies","summary":"<p>Format for the reason found in warn, delete, and blacklist replies</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":262,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L262"},"def":{"name":"reason_prefix","return_type":"String","visibility":"Public","body":"@reason_prefix"}},{"html_id":"registration_closed:String-instance-method","name":"registration_closed","doc":"When the user attempts to join but cannot due to registrations being closed","summary":"<p>When the user attempts to join but cannot due to registrations being closed</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":30,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L30"},"def":{"name":"registration_closed","return_type":"String","visibility":"Public","body":"@registration_closed"}},{"html_id":"rejected_message:String-instance-method","name":"rejected_message","doc":"When the user sends a message that has invalid characters in the text","summary":"<p>When the user sends a message that has invalid characters in the text</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":50,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L50"},"def":{"name":"rejected_message","return_type":"String","visibility":"Public","body":"@rejected_message"}},{"html_id":"rejoined:String-instance-method","name":"rejoined","doc":"When the user rejoins the chat after having left","summary":"<p>When the user rejoins the chat after having left</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":18,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L18"},"def":{"name":"rejoined","return_type":"String","visibility":"Public","body":"@rejoined"}},{"html_id":"robot9000_stats:String-instance-method","name":"robot9000_stats","doc":"Message containing totals for unique and unoriginal messages when `Statistics` are enabled","summary":"<p>Message containing totals for unique and unoriginal messages when <code><a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a></code> are enabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":330,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L330"},"def":{"name":"robot9000_stats","return_type":"String","visibility":"Public","body":"@robot9000_stats"}},{"html_id":"sign_spam:String-instance-method","name":"sign_spam","doc":"When the user is signing messages too often","summary":"<p>When the user is signing messages too often</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":182,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L182"},"def":{"name":"sign_spam","return_type":"String","visibility":"Public","body":"@sign_spam"}},{"html_id":"spamming:String-instance-method","name":"spamming","doc":"When the user is spamming and cannot chat at this time","summary":"<p>When the user is spamming and cannot chat at this time</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":178,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L178"},"def":{"name":"spamming","return_type":"String","visibility":"Public","body":"@spamming"}},{"html_id":"success:String-instance-method","name":"success","doc":"When the command executed successfully","summary":"<p>When the command executed successfully</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":342,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L342"},"def":{"name":"success","return_type":"String","visibility":"Public","body":"@success"}},{"html_id":"toggle_debug:String-instance-method","name":"toggle_debug","doc":"Message shown when the user enables or disables debug mode","summary":"<p>Message shown when the user enables or disables debug mode</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":114,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L114"},"def":{"name":"toggle_debug","return_type":"String","visibility":"Public","body":"@toggle_debug"}},{"html_id":"toggle_karma:String-instance-method","name":"toggle_karma","doc":"Message shown when the user enables or disables karma notifications","summary":"<p>Message shown when the user enables or disables karma notifications</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":110,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L110"},"def":{"name":"toggle_karma","return_type":"String","visibility":"Public","body":"@toggle_karma"}},{"html_id":"tripcode_format:String-instance-method","name":"tripcode_format","doc":"Message containing the format for setting tripcodes","summary":"<p>Message containing the format for setting tripcodes</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":194,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L194"},"def":{"name":"tripcode_format","return_type":"String","visibility":"Public","body":"@tripcode_format"}},{"html_id":"tripcode_info:String-instance-method","name":"tripcode_info","doc":"Message containing the user's current tripcode","summary":"<p>Message containing the user's current tripcode</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":218,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L218"},"def":{"name":"tripcode_info","return_type":"String","visibility":"Public","body":"@tripcode_info"}},{"html_id":"tripcode_set:String-instance-method","name":"tripcode_set","doc":"Message containing the set tripcode and how it will be displayed","summary":"<p>Message containing the set tripcode and how it will be displayed</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":214,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L214"},"def":{"name":"tripcode_set","return_type":"String","visibility":"Public","body":"@tripcode_set"}},{"html_id":"tripcode_set_format:String-instance-method","name":"tripcode_set_format","doc":"The layout for tripcode headers","summary":"<p>The layout for tripcode headers</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":206,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L206"},"def":{"name":"tripcode_set_format","return_type":"String","visibility":"Public","body":"@tripcode_set_format"}},{"html_id":"tripcode_unset:String-instance-method","name":"tripcode_unset","doc":"Message telling the user that his tripcode is not set","summary":"<p>Message telling the user that his tripcode is not set</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":222,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L222"},"def":{"name":"tripcode_unset","return_type":"String","visibility":"Public","body":"@tripcode_unset"}},{"html_id":"unblacklisted:String-instance-method","name":"unblacklisted","doc":"When the user has been unbanned","summary":"<p>When the user has been unbanned</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":294,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L294"},"def":{"name":"unblacklisted","return_type":"String","visibility":"Public","body":"@unblacklisted"}},{"html_id":"unoriginal_message:String-instance-method","name":"unoriginal_message","doc":"When the user sends an unorginal message when `Robot9000` is enabled","summary":"<p>When the user sends an unorginal message when <code><a href=\"../PrivateParlorXT/Robot9000.html\">Robot9000</a></code> is enabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":274,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L274"},"def":{"name":"unoriginal_message","return_type":"String","visibility":"Public","body":"@unoriginal_message"}},{"html_id":"upvote_spam:String-instance-method","name":"upvote_spam","doc":"When the user is upvoting too often","summary":"<p>When the user is upvoting too often</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":186,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L186"},"def":{"name":"upvote_spam","return_type":"String","visibility":"Public","body":"@upvote_spam"}},{"html_id":"upvoted_own_message:String-instance-method","name":"upvoted_own_message","doc":"When the user attempts to upvote his own message","summary":"<p>When the user attempts to upvote his own message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":130,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L130"},"def":{"name":"upvoted_own_message","return_type":"String","visibility":"Public","body":"@upvoted_own_message"}},{"html_id":"user_count:String-instance-method","name":"user_count","doc":"Message containing the total number of users","summary":"<p>Message containing the total number of users</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":246,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L246"},"def":{"name":"user_count","return_type":"String","visibility":"Public","body":"@user_count"}},{"html_id":"user_count_full:String-instance-method","name":"user_count_full","doc":"Message containing the total number of joined, left, and blacklisted users","summary":"<p>Message containing the total number of joined, left, and blacklisted users</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":250,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L250"},"def":{"name":"user_count_full","return_type":"String","visibility":"Public","body":"@user_count_full"}},{"html_id":"user_info:String-instance-method","name":"user_info","doc":"Message containing information about the user","summary":"<p>Message containing information about the user</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":226,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L226"},"def":{"name":"user_info","return_type":"String","visibility":"Public","body":"@user_info"}},{"html_id":"user_stats:String-instance-method","name":"user_stats","doc":"Message containing user totals when `Statistics` are enabled","summary":"<p>Message containing user totals when <code><a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a></code> are enabled</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":318,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L318"},"def":{"name":"user_stats","return_type":"String","visibility":"Public","body":"@user_stats"}},{"html_id":"username_reveal:String-instance-method","name":"username_reveal","doc":"Message privately sent to a user when another user reveal's his username","summary":"<p>Message privately sent to a user when another user reveal's his username</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/locale/replies.cr","line_number":174,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/locale/replies.cr#L174"},"def":{"name":"username_reveal","return_type":"String","visibility":"Public","body":"@username_reveal"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/ReplyParameters","path":"PrivateParlorXT/ReplyParameters.html","kind":"alias","full_name":"PrivateParlorXT::ReplyParameters","name":"ReplyParameters","abstract":false,"locations":[{"filename":"src/private-parlor-xt/constants.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/constants.cr#L9"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":true,"aliased":"Tourmaline::ReplyParameters","aliased_html":"Tourmaline::ReplyParameters","const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Simple alias for `Tourmaline::ReplyParameters`","summary":"<p>Simple alias for <code>Tourmaline::ReplyParameters</code></p>"},{"html_id":"private-parlor-xt/PrivateParlorXT/RespondsTo","path":"PrivateParlorXT/RespondsTo.html","kind":"annotation","full_name":"PrivateParlorXT::RespondsTo","name":"RespondsTo","abstract":false,"locations":[{"filename":"src/private-parlor-xt/handlers/command_handler.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handler.cr#L16"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Annotation for Telegram command handlers\n\n## Keys and Values:\n\n`command`\n:     A `StringLiteral` or an array of `StringLiteral` containing the text that will activate the handler when the text follows a forward slash '/'.\n      If using an array of `StringLiteral` to define aliases, the first element in the array will be used for `CommandDescriptions` and registering the command description with BotFather.\n\n`config`\n:     `String`, the name of the `Config` member that enables this handler.\n      Handlers should be configurable, though a value is not required here to compile or be used in the program.","summary":"<p>Annotation for Telegram command handlers</p>"},{"html_id":"private-parlor-xt/PrivateParlorXT/RevealCommand","path":"PrivateParlorXT/RevealCommand.html","kind":"class","full_name":"PrivateParlorXT::RevealCommand","name":"RevealCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/reveal_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/reveal_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to privately reveal one's username to another user.","summary":"<p>A command used to privately reveal one's username to another user.</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Privately sends the *message* sender's username signature to the sender of the message this *message* replies to, if the *message* meets requirements","summary":"<p>Privately sends the <em>message</em> sender's username signature to the sender of the message this <em>message</em> replies to, if the <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/reveal_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/reveal_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Reveal, services)\nelse\n  return\nend\nif (chat = services.relay.get_chat(user.id)) && chat.has_private_forwards?\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.private_sign)\nend\nif reply = reply_message(user, message, services)\nelse\n  return\nend\nif reply_user = reply_user(user, reply, services)\nelse\n  return\nend\nif reply_user.id == user.id\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.fail)\nend\nif (spam = services.spam) && (spam.spammy_sign?(user.id, services.config.sign_limit_interval))\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.sign_spam)\nend\nupdate_user_activity(user, services)\nreceiver_message = services.history.receiver_message(reply.message_id.to_i64, reply_user.id)\nresponse = user_reveal(user.id, user.formatted_name, services.replies)\nif receiver_message\n  receiver_message = ReplyParameters.new(receiver_message)\nend\nservices.relay.send_to_user(receiver_message, reply_user.id, response)\nlog = Format.substitute_message(services.logs.revealed, {\"sender_id\" => user.id.to_s, \"sender\" => user.formatted_name, \"receiver_id\" => reply_user.id.to_s, \"receiver\" => reply_user.formatted_name, \"msid\" => reply.message_id.to_s})\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.success)\n"}},{"html_id":"user_reveal(id:UserID,name:String,replies:Replies):String-instance-method","name":"user_reveal","doc":"Returns a link to a given user's account, for reveal messages","summary":"<p>Returns a link to a given user's account, for reveal messages</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"UserID"},{"name":"name","external_name":"name","restriction":"String"},{"name":"replies","external_name":"replies","restriction":"Replies"}],"args_string":"(id : UserID, name : String, replies : Replies) : String","args_html":"(id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, name : String, replies : <a href=\"../PrivateParlorXT/Replies.html\">Replies</a>) : String","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/reveal_command.cr","line_number":56,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/reveal_command.cr#L56"},"def":{"name":"user_reveal","args":[{"name":"id","external_name":"id","restriction":"UserID"},{"name":"name","external_name":"name","restriction":"String"},{"name":"replies","external_name":"replies","restriction":"Replies"}],"return_type":"String","visibility":"Public","body":"replies.username_reveal.gsub(\"{username}\", \"[#{Format.escape_mdv2(name)}](tg://user?id=#{id})\")"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Robot9000","path":"PrivateParlorXT/Robot9000.html","kind":"class","full_name":"PrivateParlorXT::Robot9000","name":"Robot9000","abstract":true,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L13"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"private-parlor-xt/PrivateParlorXT/SQLiteRobot9000","kind":"class","full_name":"PrivateParlorXT::SQLiteRobot9000","name":"SQLiteRobot9000"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A base class for ROBOT9000 implementations\n\nROBOT9000 is an algorithm by Randall Munroe designed to reduce noise in large chats and\nencourage original content.\n\nROBOT9000 will prevent users from repeating information that has already been posted before.\nWhen a user's post is considered unoriginal, the post will not be sent and the user will be cooldowned.\n\nSubclasses of this type should use a `Database` to store and query unique texts and media IDs","summary":"<p>A base class for ROBOT9000 implementations</p>","instance_methods":[{"html_id":"add_file_id(id:String):Nil-instance-method","name":"add_file_id","doc":"Stores the file *id* to be referenced later","summary":"<p>Stores the file <em>id</em> to be referenced later</p>","abstract":true,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String) : Nil","args_html":"(id : String) : Nil","location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":142,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L142"},"def":{"name":"add_file_id","args":[{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"add_line(text:String):Nil-instance-method","name":"add_line","doc":"Stores the stripped line of *text* to be referenced later","summary":"<p>Stores the stripped line of <em>text</em> to be referenced later</p>","abstract":true,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Nil","args_html":"(text : String) : Nil","location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":135,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L135"},"def":{"name":"add_line","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"allow_text?(text:String):Bool-instance-method","name":"allow_text?","doc":"Returns `true` if the given *text* has valid codepoints or is empty\n\nReturns `false` if any character/codepoint in the given *text* is not found in `valid_codepoints`","summary":"<p>Returns <code>true</code> if the given <em>text</em> has valid codepoints or is empty</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Bool","args_html":"(text : String) : Bool","location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":66,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L66"},"def":{"name":"allow_text?","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"if text.empty?\n  return true\nend\nif text.codepoints.any? do |codepoint|\n  @valid_codepoints.none? do |range|\n    range.includes?(codepoint)\n  end\nend\n  return false\nend\ntrue\n"}},{"html_id":"check_forwards?:Bool|Nil-instance-method","name":"check_forwards?","doc":"Returns `true` if this module should check forwards for uniqueness\n\nIf true, this module should also check for unique text or media if `check_text` or `check_media` is toggled, respectively.\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if this module should check forwards for uniqueness</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":36,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L36"},"def":{"name":"check_forwards?","return_type":"Bool | ::Nil","visibility":"Public","body":"@check_forwards"}},{"html_id":"check_media?:Bool|Nil-instance-method","name":"check_media?","doc":"Returns `true` if this module should check media (photos, audio, videos, etc.) for uniqueness\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if this module should check media (photos, audio, videos, etc.) for uniqueness</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":29,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L29"},"def":{"name":"check_media?","return_type":"Bool | ::Nil","visibility":"Public","body":"@check_media"}},{"html_id":"check_text?:Bool|Nil-instance-method","name":"check_text?","doc":"Returns `true` if this module should check text for uniqueness\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if this module should check text for uniqueness</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":24,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L24"},"def":{"name":"check_text?","return_type":"Bool | ::Nil","visibility":"Public","body":"@check_text"}},{"html_id":"cooldown:Int32-instance-method","name":"cooldown","doc":"Returns the cooldown duration for unoriginal messages","summary":"<p>Returns the cooldown duration for unoriginal messages</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":46,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L46"},"def":{"name":"cooldown","return_type":"Int32","visibility":"Public","body":"@cooldown"}},{"html_id":"media_file_id(message:Tourmaline::Message):String|Nil-instance-method","name":"media_file_id","doc":"Returns a `String` containing the unique file ID from the given *message*","summary":"<p>Returns a <code>String</code> containing the unique file ID from the given <em>message</em></p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"args_string":"(message : Tourmaline::Message) : String | Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>) : String | Nil","location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":114,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L114"},"def":{"name":"media_file_id","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"return_type":"String | ::Nil","visibility":"Public","body":"if media = message.animation\nelse\n  if media = message.audio\n  else\n    if media = message.document\n    else\n      if media = message.video\n      else\n        if media = message.video_note\n        else\n          if media = message.voice\n          else\n            if media = message.photo.last?\n            else\n              if media = message.sticker\n              else\n                return\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend\nmedia.file_unique_id\n"}},{"html_id":"remove_links(text:String,entities:Array(Tourmaline::MessageEntity)):String-instance-method","name":"remove_links","doc":"Returns a `String` containing the given *text* with URLs removed","summary":"<p>Returns a <code>String</code> containing the given <em>text</em> with URLs removed</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":49,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L49"},"def":{"name":"remove_links","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"String","visibility":"Public","body":"string = text.to_utf16.to_a\nentities.reverse.each do |entity|\n  if entity.type == \"url\"\n    string.delete_at(entity.offset, entity.length)\n  end\nend\nutf = Slice(UInt16).new(string.size) do |i|\n  string[i]\nend\nString.from_utf16(utf)\n"}},{"html_id":"strip_text(text:String,entities:Array(Tourmaline::MessageEntity)):String-instance-method","name":"strip_text","doc":"Returns a `String` containing the given *text* in lower case with the following elements removed:\n  - Links/URLS\n  - Commands\n  - Usernames\n  - Sequences of 3 or more repeating characters (digits can repeat)\n  - Network links/Back links (i.e., \">>>/foo/\")\n  - Punctuation and the em-dash\n  - Repeating spaces and newlines\n  - Trailing and leading whitespace","summary":"<p>Returns a <code>String</code> containing the given <em>text</em> in lower case with the following elements removed:   - Links/URLS   - Commands   - Usernames   - Sequences of 3 or more repeating characters (digits can repeat)   - Network links/Back links (i.e., &quot;&gt;&gt;&gt;/foo/&quot;)   - Punctuation and the em-dash   - Repeating spaces and newlines   - Trailing and leading whitespace</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":87,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L87"},"def":{"name":"strip_text","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"String","visibility":"Public","body":"text = remove_links(text, entities)\ntext = text.downcase\ntext = text.gsub(/\\/\\w+\\s/, \"\")\ntext = text.gsub(/\\s@\\w+\\s/, \" \")\ntext = text.gsub(/(?![\\d])(\\w|\\w{1,})\\1{2,}/) do |_, match|\n  match[1]\nend\ntext = text.gsub(/>>>\\/\\w+\\//, \"\")\ntext = text.gsub(/[[:punct:]]|—/, \"\")\ntext = text.gsub(/\\s{2,}|\\n/, \" \")\ntext.strip\n"}},{"html_id":"unique_media(user:User,message:Tourmaline::Message,services:Services,file_id:String):String|Nil-instance-method","name":"unique_media","doc":"Returns the *file_id* if the *message*'s media is unique\n\nReturns `nil` if the *message*'s media is not unique, and cooldowns the sender if configured to do so","summary":"<p>Returns the <em>file_id</em> if the <em>message</em>'s media is unique</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"},{"name":"file_id","external_name":"file_id","restriction":"String"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services, file_id : String) : String | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>, file_id : String) : String | Nil","location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":204,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L204"},"def":{"name":"unique_media","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"},{"name":"file_id","external_name":"file_id","restriction":"String"}],"return_type":"String | ::Nil","visibility":"Public","body":"if unoriginal_media?(file_id)\n  if stats = services.stats\n    stats.increment_unoriginal_media\n  end\n  return unoriginal_message(user, message, services)\nend\nfile_id\n"}},{"html_id":"unique_message?(user:User,message:Tourmaline::Message,services:Services,text:String|Nil=nil):Bool-instance-method","name":"unique_message?","doc":"Checks the *message* for uniqueness and returns `true` if:\n  - Message is preformatted (message already checked)\n  - Message is a forward, but this `Robot9000` is not configured to check forwards for uniqueness\n  - No media file ID could be found when checking message media\n  - Message is unique\n\nReturns `false` if the message does not pass the `text_check` or the `media_check`; *message* is unoriginal\n\nThe unique text and/or file_id will be stored to flag future messages of the same kind as unoriginal","summary":"<p>Checks the <em>message</em> for uniqueness and returns <code>true</code> if:   - Message is preformatted (message already checked)   - Message is a forward, but this <code><a href=\"../PrivateParlorXT/Robot9000.html\">Robot9000</a></code> is not configured to check forwards for uniqueness   - No media file ID could be found when checking message media   - Message is unique</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"},{"name":"text","default_value":"nil","external_name":"text","restriction":"String | ::Nil"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services, text : String | Nil = nil) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>, text : String | Nil = <span class=\"n\">nil</span>) : Bool","location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":153,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L153"},"def":{"name":"unique_message?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"},{"name":"text","default_value":"nil","external_name":"text","restriction":"String | ::Nil"}],"return_type":"Bool","visibility":"Public","body":"if message.preformatted?\n  return true\nend\nif message.forward_origin && (!@check_forwards)\n  return true\nend\nif @check_text\n  if text\n  else\n    text = (message.text || message.caption) || \"\"\n  end\n  entities = message.caption_entities.empty? ? message.entities : message.caption_entities\n  stripped_text = strip_text(text, entities)\n  if unique_text = unique_text(user, message, services, stripped_text)\n  else\n    return false\n  end\nend\nif @check_media\n  if file_id = media_file_id(message)\n  else\n    return true\n  end\n  if unique_media = unique_media(user, message, services, file_id)\n  else\n    return false\n  end\nend\nif unique_text\n  add_line(unique_text)\nend\nif unique_media\n  add_file_id(unique_media)\nend\ntrue\n"}},{"html_id":"unique_text(user:User,message:Tourmaline::Message,services:Services,text:String):String|Nil-instance-method","name":"unique_text","doc":"Returns the *text* if the *message*'s text or caption is unique\n\nReturns `nil` if the *message*'s text or caption is not unique, and cooldowns the sender if configured to do so","summary":"<p>Returns the <em>text</em> if the <em>message</em>'s text or caption is unique</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"},{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services, text : String) : String | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>, text : String) : String | Nil","location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":189,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L189"},"def":{"name":"unique_text","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"},{"name":"text","external_name":"text","restriction":"String"}],"return_type":"String | ::Nil","visibility":"Public","body":"if unoriginal_text?(text)\n  if stats = services.stats\n    stats.increment_unoriginal_text\n  end\n  return unoriginal_message(user, message, services)\nend\ntext\n"}},{"html_id":"unoriginal_media?(id:String):Bool|Nil-instance-method","name":"unoriginal_media?","doc":"Returns `true` if the given file id has been sent before\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the given file id has been sent before Returns <code>false</code> otherwise</p>","abstract":true,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String) : Bool | Nil","args_html":"(id : String) : Bool | Nil","location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":139,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L139"},"def":{"name":"unoriginal_media?","args":[{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Bool | ::Nil","visibility":"Public","body":""}},{"html_id":"unoriginal_message(user:User,message:Tourmaline::Message,services:Services):Nil-instance-method","name":"unoriginal_message","doc":"Queues a message telling the *user* that the *message* was unoriginal, and cooldowns the *user* if configured to do so","summary":"<p>Queues a message telling the <em>user</em> that the <em>message</em> was unoriginal, and cooldowns the <em>user</em> if configured to do so</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":217,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L217"},"def":{"name":"unoriginal_message","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if @cooldown > 0\n  duration = user.cooldown(@cooldown.seconds)\n  services.database.update_user(user)\n  response = Format.substitute_reply(services.replies.r9k_cooldown, {\"duration\" => Format.time_span(duration, services.locale)})\nelse\n  if @warn_user\n    duration = user.cooldown(services.config.cooldown_base)\n    user.warn(services.config.warn_lifespan)\n    services.database.update_user(user)\n    response = Format.substitute_reply(services.replies.r9k_cooldown, {\"duration\" => Format.time_span(duration, services.locale)})\n  else\n    response = services.replies.unoriginal_message\n  end\nend\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, response)\n"}},{"html_id":"unoriginal_text?(text:String):Bool|Nil-instance-method","name":"unoriginal_text?","doc":"Returns `true` if the given text has been sent before\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the given text has been sent before Returns <code>false</code> otherwise</p>","abstract":true,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Bool | Nil","args_html":"(text : String) : Bool | Nil","location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":132,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L132"},"def":{"name":"unoriginal_text?","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Bool | ::Nil","visibility":"Public","body":""}},{"html_id":"warn_user?:Bool|Nil-instance-method","name":"warn_user?","doc":"Returns `true` if this module should give the user a warning for unoriginal messages\n\nIf true, the unoriginal message cooldown should scale with user warnings\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if this module should give the user a warning for unoriginal messages</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/robot9000/robot9000.cr","line_number":43,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/robot9000.cr#L43"},"def":{"name":"warn_user?","return_type":"Bool | ::Nil","visibility":"Public","body":"@warn_user"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Services","path":"PrivateParlorXT/Services.html","kind":"class","full_name":"PrivateParlorXT::Services","name":"Services","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/services.cr","line_number":12,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L12"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Container for all objects needed for handlers","summary":"<p>Container for all objects needed for handlers</p>","constructors":[{"html_id":"new(config:HandlerConfig,locale:Locale,replies:Replies,logs:Logs,descriptions:CommandDescriptions,database:Database,history:History,access:AuthorizedRanks,relay:Relay,spam:SpamHandler|Nil=nil,robot9000:Robot9000|Nil=nil,karma:KarmaHandler|Nil=nil,stats:Statistics|Nil=nil)-class-method","name":"new","doc":"Creates an instance of `Services`.\n\n## Arguments:\n\n`config`\n:     `HandlerConfig` object with a limited set of configuration values to be used in subclasses of `Handler` and `CallbackHandler`\n\n`locale`\n:     `Locale`, general localized values from a locale file\n\n`replies`\n:     `Replies`, system message replies from a locale file\n\n`logs`\n:     `Logs`, log messages from a locale file\n\n`command_descriptions`\n:     `CommandDescriptions`, descriptions for commands from a locale file\n\n`database`\n:     `Database` object\n\n`history`\n:     message `History` object\n\n`access`\n:     `AuthorizedRanks` module used to ensure authorized use of commands and messages\n\n`relay`\n:     `Relay` object for queueing messages and sending them to Telegram\n\n`spam`\n:     `SpamHandler` object preventing message spam, if this module is toggled\n\n`robot9000`\n:     `Robot9000` object ensure message uniqueness, if this module is toggled\n\n`karma`\n:     `KarmaHandler` object that requires users to have karma in order to send messages, if this module is toggled\n\n`stats`\n:     `Statistics` object that records data about the bot, if this module is toggled","summary":"<p>Creates an instance of <code><a href=\"../PrivateParlorXT/Services.html\">Services</a></code>.</p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"HandlerConfig"},{"name":"locale","external_name":"locale","restriction":"Locale"},{"name":"replies","external_name":"replies","restriction":"Replies"},{"name":"logs","external_name":"logs","restriction":"Logs"},{"name":"descriptions","external_name":"descriptions","restriction":"CommandDescriptions"},{"name":"database","external_name":"database","restriction":"Database"},{"name":"history","external_name":"history","restriction":"History"},{"name":"access","external_name":"access","restriction":"AuthorizedRanks"},{"name":"relay","external_name":"relay","restriction":"Relay"},{"name":"spam","default_value":"nil","external_name":"spam","restriction":"SpamHandler | ::Nil"},{"name":"robot9000","default_value":"nil","external_name":"robot9000","restriction":"Robot9000 | ::Nil"},{"name":"karma","default_value":"nil","external_name":"karma","restriction":"KarmaHandler | ::Nil"},{"name":"stats","default_value":"nil","external_name":"stats","restriction":"Statistics | ::Nil"}],"args_string":"(config : HandlerConfig, locale : Locale, replies : Replies, logs : Logs, descriptions : CommandDescriptions, database : Database, history : History, access : AuthorizedRanks, relay : Relay, spam : SpamHandler | Nil = nil, robot9000 : Robot9000 | Nil = nil, karma : KarmaHandler | Nil = nil, stats : Statistics | Nil = nil)","args_html":"(config : <a href=\"../PrivateParlorXT/HandlerConfig.html\">HandlerConfig</a>, locale : <a href=\"../PrivateParlorXT/Locale.html\">Locale</a>, replies : <a href=\"../PrivateParlorXT/Replies.html\">Replies</a>, logs : <a href=\"../PrivateParlorXT/Logs.html\">Logs</a>, descriptions : <a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a>, database : <a href=\"../PrivateParlorXT/Database.html\">Database</a>, history : <a href=\"../PrivateParlorXT/History.html\">History</a>, access : <a href=\"../PrivateParlorXT/AuthorizedRanks.html\">AuthorizedRanks</a>, relay : <a href=\"../PrivateParlorXT/Relay.html\">Relay</a>, spam : <a href=\"../PrivateParlorXT/SpamHandler.html\">SpamHandler</a> | Nil = <span class=\"n\">nil</span>, robot9000 : <a href=\"../PrivateParlorXT/Robot9000.html\">Robot9000</a> | Nil = <span class=\"n\">nil</span>, karma : <a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a> | Nil = <span class=\"n\">nil</span>, stats : <a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/private-parlor-xt/services.cr","line_number":94,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L94"},"def":{"name":"new","args":[{"name":"config","external_name":"config","restriction":"HandlerConfig"},{"name":"locale","external_name":"locale","restriction":"Locale"},{"name":"replies","external_name":"replies","restriction":"Replies"},{"name":"logs","external_name":"logs","restriction":"Logs"},{"name":"descriptions","external_name":"descriptions","restriction":"CommandDescriptions"},{"name":"database","external_name":"database","restriction":"Database"},{"name":"history","external_name":"history","restriction":"History"},{"name":"access","external_name":"access","restriction":"AuthorizedRanks"},{"name":"relay","external_name":"relay","restriction":"Relay"},{"name":"spam","default_value":"nil","external_name":"spam","restriction":"SpamHandler | ::Nil"},{"name":"robot9000","default_value":"nil","external_name":"robot9000","restriction":"Robot9000 | ::Nil"},{"name":"karma","default_value":"nil","external_name":"karma","restriction":"KarmaHandler | ::Nil"},{"name":"stats","default_value":"nil","external_name":"stats","restriction":"Statistics | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(config, locale, replies, logs, descriptions, database, history, access, relay, spam, robot9000, karma, stats)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(config:Config,client:Client)-class-method","name":"new","doc":"Creates a new instance of `Services` from a `Config` file","summary":"<p>Creates a new instance of <code><a href=\"../PrivateParlorXT/Services.html\">Services</a></code> from a <code><a href=\"../PrivateParlorXT/Config.html\">Config</a></code> file</p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"},{"name":"client","external_name":"client","restriction":"Client"}],"args_string":"(config : Config, client : Client)","args_html":"(config : <a href=\"../PrivateParlorXT/Config.html\">Config</a>, client : <a href=\"../PrivateParlorXT/Client.html\">Client</a>)","location":{"filename":"src/private-parlor-xt/services.cr","line_number":112,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L112"},"def":{"name":"new","args":[{"name":"config","external_name":"config","restriction":"Config"},{"name":"client","external_name":"client","restriction":"Client"}],"visibility":"Public","body":"_ = allocate\n_.initialize(config, client)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"access:AuthorizedRanks-instance-method","name":"access","doc":"Retrusn the `AuthorizedRanks` object","summary":"<p>Retrusn the <code><a href=\"../PrivateParlorXT/AuthorizedRanks.html\">AuthorizedRanks</a></code> object</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":35,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L35"},"def":{"name":"access","return_type":"AuthorizedRanks","visibility":"Public","body":"@access"}},{"html_id":"config:HandlerConfig-instance-method","name":"config","doc":"Returns the `HandlerConfig` object","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/HandlerConfig.html\">HandlerConfig</a></code> object</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L14"},"def":{"name":"config","return_type":"HandlerConfig","visibility":"Public","body":"@config"}},{"html_id":"database:Database-instance-method","name":"database","doc":"Returns the `Database` object","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code> object</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":29,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L29"},"def":{"name":"database","return_type":"Database","visibility":"Public","body":"@database"}},{"html_id":"descriptions:CommandDescriptions-instance-method","name":"descriptions","doc":"Returns the `CommandDescriptions` object","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/CommandDescriptions.html\">CommandDescriptions</a></code> object</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":26,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L26"},"def":{"name":"descriptions","return_type":"CommandDescriptions","visibility":"Public","body":"@descriptions"}},{"html_id":"history:History-instance-method","name":"history","doc":"Retruns the `History` object","summary":"<p>Retruns the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code> object</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":32,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L32"},"def":{"name":"history","return_type":"History","visibility":"Public","body":"@history"}},{"html_id":"karma:KarmaHandler|Nil-instance-method","name":"karma","doc":"Returns the `KarmaHandler` object if it is available","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> object if it is available</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":47,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L47"},"def":{"name":"karma","return_type":"KarmaHandler | ::Nil","visibility":"Public","body":"@karma"}},{"html_id":"locale:Locale-instance-method","name":"locale","doc":"Returns the `Locale` object","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/Locale.html\">Locale</a></code> object</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":17,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L17"},"def":{"name":"locale","return_type":"Locale","visibility":"Public","body":"@locale"}},{"html_id":"logs:Logs-instance-method","name":"logs","doc":"Returns the `Logs` object","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/Logs.html\">Logs</a></code> object</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":23,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L23"},"def":{"name":"logs","return_type":"Logs","visibility":"Public","body":"@logs"}},{"html_id":"relay:Relay-instance-method","name":"relay","doc":"Returns the `Relay` object","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/Relay.html\">Relay</a></code> object</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":38,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L38"},"def":{"name":"relay","return_type":"Relay","visibility":"Public","body":"@relay"}},{"html_id":"replies:Replies-instance-method","name":"replies","doc":"Returns the `Replies` object","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/Replies.html\">Replies</a></code> object</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":20,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L20"},"def":{"name":"replies","return_type":"Replies","visibility":"Public","body":"@replies"}},{"html_id":"robot9000:Robot9000|Nil-instance-method","name":"robot9000","doc":"Returns the `Robot9000` object if it is available","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/Robot9000.html\">Robot9000</a></code> object if it is available</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":44,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L44"},"def":{"name":"robot9000","return_type":"Robot9000 | ::Nil","visibility":"Public","body":"@robot9000"}},{"html_id":"spam:SpamHandler|Nil-instance-method","name":"spam","doc":"Returns the `SpamHandler` object if it is available","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/SpamHandler.html\">SpamHandler</a></code> object if it is available</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":41,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L41"},"def":{"name":"spam","return_type":"SpamHandler | ::Nil","visibility":"Public","body":"@spam"}},{"html_id":"stats:Statistics|Nil-instance-method","name":"stats","doc":"Returns the `Statistics` object if it is available","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a></code> object if it is available</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/services.cr","line_number":50,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/services.cr#L50"},"def":{"name":"stats","return_type":"Statistics | ::Nil","visibility":"Public","body":"@stats"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/SignCommand","path":"PrivateParlorXT/SignCommand.html","kind":"class","full_name":"PrivateParlorXT::SignCommand","name":"SignCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/sign_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/sign_command.cr#L9"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Processes sign messages before an `UpdateHandler` gets them\n\nThis handler expects the command handlers to be registered before the update handlers","summary":"<p>Processes sign messages before an <code><a href=\"../PrivateParlorXT/UpdateHandler.html\">UpdateHandler</a></code> gets them</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Preformats the given *message* with a username signature if the *message* meets requirements","summary":"<p>Preformats the given <em>message</em> with a username signature if the <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/sign_command.cr","line_number":11,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/sign_command.cr#L11"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif authorized?(user, message, :Sign, services)\nelse\n  return\nend\nif (chat = services.relay.get_chat(user.id)) && chat.has_private_forwards?\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.private_sign)\nend\ntext, entities = Format.validate_text_and_entities(message, user, services)\nif text\nelse\n  return\nend\nif arg = Format.get_arg(text)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.missing_args)\nend\nif spamming?(user, message, arg, services)\n  return\nend\nif unique?(user, message, services, arg)\nelse\n  return\nend\ntext, entities = Format.format_text(text, entities, false, services)\nentities = remove_command_entity(text, entities, arg)\ntext, entities = user_sign(user.formatted_name, user.id, arg, entities)\nif message.text\n  message.text = text\n  message.entities = entities\nelse\n  if message.caption\n    message.caption = text\n    message.caption_entities = entities\n  end\nend\nmessage.preformatted = true\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,arg:String,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming username signatures\n\nReturns `true` if the user is spamming username signatures or unformatted text is spammy, returns `false` otherwise","summary":"<p>Checks if the user is spamming username signatures</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, arg : String, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, arg : String, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/sign_command.cr","line_number":53,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/sign_command.cr#L53"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif message.text && (spam.spammy_text?(user.id, arg))\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nif spam.spammy_sign?(user.id, services.config.sign_limit_interval)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.sign_spam)\n  return true\nend\nfalse\n"}},{"html_id":"user_sign(name:String,id:UserID,arg:String,entities:Array(Tourmaline::MessageEntity)):Tuple(String,Array(Tourmaline::MessageEntity))-instance-method","name":"user_sign","doc":"Format the user sign based on the given *name*, appending the signature to *arg* as a text link to the user's ID","summary":"<p>Format the user sign based on the given <em>name</em>, appending the signature to <em>arg</em> as a text link to the user's ID</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"id","external_name":"id","restriction":"UserID"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(name : String, id : UserID, arg : String, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","args_html":"(name : String, id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, arg : String, entities : Array(Tourmaline::MessageEntity)) : Tuple(String, Array(Tourmaline::MessageEntity))","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/sign_command.cr","line_number":70,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/sign_command.cr#L70"},"def":{"name":"user_sign","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"id","external_name":"id","restriction":"UserID"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"Tuple(String, Array(Tourmaline::MessageEntity))","visibility":"Public","body":"signature = \"~~#{name}\"\nsignature_size = signature.to_utf16.size\nentities.concat([Tourmaline::MessageEntity.new(\"text_link\", arg.to_utf16.size + 1, signature_size, url: \"tg://user?id=#{id}\")])\nreturn {\"#{arg} #{signature}\", entities}\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/SpamHandler","path":"PrivateParlorXT/SpamHandler.html","kind":"class","full_name":"PrivateParlorXT::SpamHandler","name":"SpamHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L6"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A module used for keeping track of the frequency of a user's message posting in order to prevent spam","summary":"<p>A module used for keeping track of the frequency of a user's message posting in order to prevent spam</p>","constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L7"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"::YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"::YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}},{"html_id":"new(scores:Hash(UserID,Int32)={}ofUserID=>Int32,sign_last_used:Hash(UserID,Time)={}ofUserID=>Time,upvote_last_used:Hash(UserID,Time)={}ofUserID=>Time,downvote_last_used:Hash(UserID,Time)={}ofUserID=>Time,spam_limit:Int32=10000,decay_amount:Int32=1000,score_character:Int32=3,score_line:Int32=100,score_text:Int32=2000,score_animation:Int32=3000,score_audio:Int32=3000,score_document:Int32=3000,score_video:Int32=3000,score_video_note:Int32=5000,score_voice:Int32=5000,score_photo:Int32=3000,score_media_group:Int32=6000,score_poll:Int32=6000,score_forwarded_message:Int32=3000,score_sticker:Int32=3000,score_venue:Int32=5000,score_location:Int32=5000,score_contact:Int32=5000)-class-method","name":"new","abstract":false,"args":[{"name":"scores","default_value":"{} of UserID => Int32","external_name":"scores","restriction":"Hash(UserID, Int32)"},{"name":"sign_last_used","default_value":"{} of UserID => Time","external_name":"sign_last_used","restriction":"Hash(UserID, Time)"},{"name":"upvote_last_used","default_value":"{} of UserID => Time","external_name":"upvote_last_used","restriction":"Hash(UserID, Time)"},{"name":"downvote_last_used","default_value":"{} of UserID => Time","external_name":"downvote_last_used","restriction":"Hash(UserID, Time)"},{"name":"spam_limit","default_value":"10000","external_name":"spam_limit","restriction":"Int32"},{"name":"decay_amount","default_value":"1000","external_name":"decay_amount","restriction":"Int32"},{"name":"score_character","default_value":"3","external_name":"score_character","restriction":"Int32"},{"name":"score_line","default_value":"100","external_name":"score_line","restriction":"Int32"},{"name":"score_text","default_value":"2000","external_name":"score_text","restriction":"Int32"},{"name":"score_animation","default_value":"3000","external_name":"score_animation","restriction":"Int32"},{"name":"score_audio","default_value":"3000","external_name":"score_audio","restriction":"Int32"},{"name":"score_document","default_value":"3000","external_name":"score_document","restriction":"Int32"},{"name":"score_video","default_value":"3000","external_name":"score_video","restriction":"Int32"},{"name":"score_video_note","default_value":"5000","external_name":"score_video_note","restriction":"Int32"},{"name":"score_voice","default_value":"5000","external_name":"score_voice","restriction":"Int32"},{"name":"score_photo","default_value":"3000","external_name":"score_photo","restriction":"Int32"},{"name":"score_media_group","default_value":"6000","external_name":"score_media_group","restriction":"Int32"},{"name":"score_poll","default_value":"6000","external_name":"score_poll","restriction":"Int32"},{"name":"score_forwarded_message","default_value":"3000","external_name":"score_forwarded_message","restriction":"Int32"},{"name":"score_sticker","default_value":"3000","external_name":"score_sticker","restriction":"Int32"},{"name":"score_venue","default_value":"5000","external_name":"score_venue","restriction":"Int32"},{"name":"score_location","default_value":"5000","external_name":"score_location","restriction":"Int32"},{"name":"score_contact","default_value":"5000","external_name":"score_contact","restriction":"Int32"}],"args_string":"(scores : Hash(UserID, Int32) = {} of UserID => Int32, sign_last_used : Hash(UserID, Time) = {} of UserID => Time, upvote_last_used : Hash(UserID, Time) = {} of UserID => Time, downvote_last_used : Hash(UserID, Time) = {} of UserID => Time, spam_limit : Int32 = 10000, decay_amount : Int32 = 1000, score_character : Int32 = 3, score_line : Int32 = 100, score_text : Int32 = 2000, score_animation : Int32 = 3000, score_audio : Int32 = 3000, score_document : Int32 = 3000, score_video : Int32 = 3000, score_video_note : Int32 = 5000, score_voice : Int32 = 5000, score_photo : Int32 = 3000, score_media_group : Int32 = 6000, score_poll : Int32 = 6000, score_forwarded_message : Int32 = 3000, score_sticker : Int32 = 3000, score_venue : Int32 = 5000, score_location : Int32 = 5000, score_contact : Int32 = 5000)","args_html":"(scores : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, Int32) = {} <span class=\"k\">of</span> <span class=\"t\">UserID</span> <span class=\"o\">=&gt;</span> <span class=\"t\">Int32</span>, sign_last_used : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, Time) = {} <span class=\"k\">of</span> <span class=\"t\">UserID</span> <span class=\"o\">=&gt;</span> <span class=\"t\">Time</span>, upvote_last_used : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, Time) = {} <span class=\"k\">of</span> <span class=\"t\">UserID</span> <span class=\"o\">=&gt;</span> <span class=\"t\">Time</span>, downvote_last_used : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, Time) = {} <span class=\"k\">of</span> <span class=\"t\">UserID</span> <span class=\"o\">=&gt;</span> <span class=\"t\">Time</span>, spam_limit : Int32 = <span class=\"n\">10000</span>, decay_amount : Int32 = <span class=\"n\">1000</span>, score_character : Int32 = <span class=\"n\">3</span>, score_line : Int32 = <span class=\"n\">100</span>, score_text : Int32 = <span class=\"n\">2000</span>, score_animation : Int32 = <span class=\"n\">3000</span>, score_audio : Int32 = <span class=\"n\">3000</span>, score_document : Int32 = <span class=\"n\">3000</span>, score_video : Int32 = <span class=\"n\">3000</span>, score_video_note : Int32 = <span class=\"n\">5000</span>, score_voice : Int32 = <span class=\"n\">5000</span>, score_photo : Int32 = <span class=\"n\">3000</span>, score_media_group : Int32 = <span class=\"n\">6000</span>, score_poll : Int32 = <span class=\"n\">6000</span>, score_forwarded_message : Int32 = <span class=\"n\">3000</span>, score_sticker : Int32 = <span class=\"n\">3000</span>, score_venue : Int32 = <span class=\"n\">5000</span>, score_location : Int32 = <span class=\"n\">5000</span>, score_contact : Int32 = <span class=\"n\">5000</span>)","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":97,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L97"},"def":{"name":"new","args":[{"name":"scores","default_value":"{} of UserID => Int32","external_name":"scores","restriction":"Hash(UserID, Int32)"},{"name":"sign_last_used","default_value":"{} of UserID => Time","external_name":"sign_last_used","restriction":"Hash(UserID, Time)"},{"name":"upvote_last_used","default_value":"{} of UserID => Time","external_name":"upvote_last_used","restriction":"Hash(UserID, Time)"},{"name":"downvote_last_used","default_value":"{} of UserID => Time","external_name":"downvote_last_used","restriction":"Hash(UserID, Time)"},{"name":"spam_limit","default_value":"10000","external_name":"spam_limit","restriction":"Int32"},{"name":"decay_amount","default_value":"1000","external_name":"decay_amount","restriction":"Int32"},{"name":"score_character","default_value":"3","external_name":"score_character","restriction":"Int32"},{"name":"score_line","default_value":"100","external_name":"score_line","restriction":"Int32"},{"name":"score_text","default_value":"2000","external_name":"score_text","restriction":"Int32"},{"name":"score_animation","default_value":"3000","external_name":"score_animation","restriction":"Int32"},{"name":"score_audio","default_value":"3000","external_name":"score_audio","restriction":"Int32"},{"name":"score_document","default_value":"3000","external_name":"score_document","restriction":"Int32"},{"name":"score_video","default_value":"3000","external_name":"score_video","restriction":"Int32"},{"name":"score_video_note","default_value":"5000","external_name":"score_video_note","restriction":"Int32"},{"name":"score_voice","default_value":"5000","external_name":"score_voice","restriction":"Int32"},{"name":"score_photo","default_value":"3000","external_name":"score_photo","restriction":"Int32"},{"name":"score_media_group","default_value":"6000","external_name":"score_media_group","restriction":"Int32"},{"name":"score_poll","default_value":"6000","external_name":"score_poll","restriction":"Int32"},{"name":"score_forwarded_message","default_value":"3000","external_name":"score_forwarded_message","restriction":"Int32"},{"name":"score_sticker","default_value":"3000","external_name":"score_sticker","restriction":"Int32"},{"name":"score_venue","default_value":"5000","external_name":"score_venue","restriction":"Int32"},{"name":"score_location","default_value":"5000","external_name":"score_location","restriction":"Int32"},{"name":"score_contact","default_value":"5000","external_name":"score_contact","restriction":"Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(scores, sign_last_used, upvote_last_used, downvote_last_used, spam_limit, decay_amount, score_character, score_line, score_text, score_animation, score_audio, score_document, score_video, score_video_note, score_voice, score_photo, score_media_group, score_poll, score_forwarded_message, score_sticker, score_venue, score_location, score_contact)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"decay_amount:Int32-instance-method","name":"decay_amount","doc":"The amount at which spam scores decay","summary":"<p>The amount at which spam scores decay</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":27,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L27"},"def":{"name":"decay_amount","return_type":"Int32","visibility":"Public","body":"@decay_amount"}},{"html_id":"downvote_last_used:Hash(UserID,Time)-instance-method","name":"downvote_last_used","doc":"Returns a hash of `UserID` to `Time`, contaning the time each user last downvoted","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/UserID.html\">UserID</a></code> to <code>Time</code>, contaning the time each user last downvoted</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":19,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L19"},"def":{"name":"downvote_last_used","return_type":"Hash(UserID, Time)","visibility":"Public","body":"@downvote_last_used"}},{"html_id":"expire:Nil-instance-method","name":"expire","doc":"Subtracts the `decay_amount` from the scores of each user in `scores`","summary":"<p>Subtracts the <code><a href=\"../PrivateParlorXT/SpamHandler.html#decay_amount%3AInt32-instance-method\">#decay_amount</a></code> from the scores of each user in <code><a href=\"../PrivateParlorXT/SpamHandler.html#scores%3AHash%28UserID%2CInt32%29-instance-method\">#scores</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":302,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L302"},"def":{"name":"expire","return_type":"Nil","visibility":"Public","body":"@scores.each do |user, score|\n  if (score - @decay_amount) <= 0\n    @scores.delete(user)\n  else\n    @scores[user] = score - @decay_amount\n  end\nend"}},{"html_id":"score_animation:Int32-instance-method","name":"score_animation","doc":"Amount added to the score for each animation","summary":"<p>Amount added to the score for each animation</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":43,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L43"},"def":{"name":"score_animation","return_type":"Int32","visibility":"Public","body":"@score_animation"}},{"html_id":"score_audio:Int32-instance-method","name":"score_audio","doc":"Amount added to the score for each audio","summary":"<p>Amount added to the score for each audio</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":47,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L47"},"def":{"name":"score_audio","return_type":"Int32","visibility":"Public","body":"@score_audio"}},{"html_id":"score_character:Int32-instance-method","name":"score_character","doc":"Amount added to the score for each character in text","summary":"<p>Amount added to the score for each character in text</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":31,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L31"},"def":{"name":"score_character","return_type":"Int32","visibility":"Public","body":"@score_character"}},{"html_id":"score_contact:Int32-instance-method","name":"score_contact","doc":"Amount added to the score for each contact","summary":"<p>Amount added to the score for each contact</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":95,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L95"},"def":{"name":"score_contact","return_type":"Int32","visibility":"Public","body":"@score_contact"}},{"html_id":"score_document:Int32-instance-method","name":"score_document","doc":"Amount added to the score for each document","summary":"<p>Amount added to the score for each document</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":51,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L51"},"def":{"name":"score_document","return_type":"Int32","visibility":"Public","body":"@score_document"}},{"html_id":"score_forwarded_message:Int32-instance-method","name":"score_forwarded_message","doc":"Amount added to the score for each forwarded message","summary":"<p>Amount added to the score for each forwarded message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":79,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L79"},"def":{"name":"score_forwarded_message","return_type":"Int32","visibility":"Public","body":"@score_forwarded_message"}},{"html_id":"score_line:Int32-instance-method","name":"score_line","doc":"Amount added to the score for each line in text","summary":"<p>Amount added to the score for each line in text</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":35,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L35"},"def":{"name":"score_line","return_type":"Int32","visibility":"Public","body":"@score_line"}},{"html_id":"score_location:Int32-instance-method","name":"score_location","doc":"Amount added to the score for each location","summary":"<p>Amount added to the score for each location</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":91,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L91"},"def":{"name":"score_location","return_type":"Int32","visibility":"Public","body":"@score_location"}},{"html_id":"score_media_group:Int32-instance-method","name":"score_media_group","doc":"Amount added to the score for each album","summary":"<p>Amount added to the score for each album</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":71,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L71"},"def":{"name":"score_media_group","return_type":"Int32","visibility":"Public","body":"@score_media_group"}},{"html_id":"score_photo:Int32-instance-method","name":"score_photo","doc":"Amount added to the score for each photo","summary":"<p>Amount added to the score for each photo</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":67,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L67"},"def":{"name":"score_photo","return_type":"Int32","visibility":"Public","body":"@score_photo"}},{"html_id":"score_poll:Int32-instance-method","name":"score_poll","doc":"Amount added to the score for each poll","summary":"<p>Amount added to the score for each poll</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":75,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L75"},"def":{"name":"score_poll","return_type":"Int32","visibility":"Public","body":"@score_poll"}},{"html_id":"score_sticker:Int32-instance-method","name":"score_sticker","doc":"Amount added to the score for each sticker","summary":"<p>Amount added to the score for each sticker</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":83,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L83"},"def":{"name":"score_sticker","return_type":"Int32","visibility":"Public","body":"@score_sticker"}},{"html_id":"score_text:Int32-instance-method","name":"score_text","doc":"Amount added to the score for each text message","summary":"<p>Amount added to the score for each text message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":39,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L39"},"def":{"name":"score_text","return_type":"Int32","visibility":"Public","body":"@score_text"}},{"html_id":"score_venue:Int32-instance-method","name":"score_venue","doc":"Amount added to the score for each venue","summary":"<p>Amount added to the score for each venue</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":87,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L87"},"def":{"name":"score_venue","return_type":"Int32","visibility":"Public","body":"@score_venue"}},{"html_id":"score_video:Int32-instance-method","name":"score_video","doc":"Amount added to the score for each video","summary":"<p>Amount added to the score for each video</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":55,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L55"},"def":{"name":"score_video","return_type":"Int32","visibility":"Public","body":"@score_video"}},{"html_id":"score_video_note:Int32-instance-method","name":"score_video_note","doc":"Amount added to the score for each video note","summary":"<p>Amount added to the score for each video note</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":59,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L59"},"def":{"name":"score_video_note","return_type":"Int32","visibility":"Public","body":"@score_video_note"}},{"html_id":"score_voice:Int32-instance-method","name":"score_voice","doc":"Amount added to the score for each voice message","summary":"<p>Amount added to the score for each voice message</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":63,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L63"},"def":{"name":"score_voice","return_type":"Int32","visibility":"Public","body":"@score_voice"}},{"html_id":"scores:Hash(UserID,Int32)-instance-method","name":"scores","doc":"Returns a hash of `UserID` to `Int32`, contaning the scores for each user","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/UserID.html\">UserID</a></code> to <code>Int32</code>, contaning the scores for each user</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L10"},"def":{"name":"scores","return_type":"Hash(UserID, Int32)","visibility":"Public","body":"@scores"}},{"html_id":"sign_last_used:Hash(UserID,Time)-instance-method","name":"sign_last_used","doc":"Returns a hash of `UserID` to `Time`, contaning the time each user last signed","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/UserID.html\">UserID</a></code> to <code>Time</code>, contaning the time each user last signed</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L13"},"def":{"name":"sign_last_used","return_type":"Hash(UserID, Time)","visibility":"Public","body":"@sign_last_used"}},{"html_id":"spam_limit:Int32-instance-method","name":"spam_limit","doc":"The limit for spam scores that, when hit, prevents the user from sending another message until it decays","summary":"<p>The limit for spam scores that, when hit, prevents the user from sending another message until it decays</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":23,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L23"},"def":{"name":"spam_limit","return_type":"Int32","visibility":"Public","body":"@spam_limit"}},{"html_id":"spammy_album?(user:UserID):Bool-instance-method","name":"spammy_album?","doc":"Returns `true` if the album was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the album was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":276,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L276"},"def":{"name":"spammy_album?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_media_group)"}},{"html_id":"spammy_animation?(user:UserID):Bool-instance-method","name":"spammy_animation?","doc":"Returns `true` if the animation was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the animation was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":213,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L213"},"def":{"name":"spammy_animation?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_animation)"}},{"html_id":"spammy_audio?(user:UserID):Bool-instance-method","name":"spammy_audio?","doc":"Returns `true` if the audio was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the audio was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":227,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L227"},"def":{"name":"spammy_audio?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_audio)"}},{"html_id":"spammy_contact?(user:UserID):Bool-instance-method","name":"spammy_contact?","doc":"Returns `true` if the contact was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the contact was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":297,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L297"},"def":{"name":"spammy_contact?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_contact)"}},{"html_id":"spammy_document?(user:UserID):Bool-instance-method","name":"spammy_document?","doc":"Returns `true` if the document was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the document was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":241,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L241"},"def":{"name":"spammy_document?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_document)"}},{"html_id":"spammy_downvote?(user:UserID,interval:Int32):Bool-instance-method","name":"spammy_downvote?","doc":"Check if user has downvoted within an interval of time\n\nReturns true if so (user is downvoting too often), false otherwise.","summary":"<p>Check if user has downvoted within an interval of time</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"interval","external_name":"interval","restriction":"Int32"}],"args_string":"(user : UserID, interval : Int32) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, interval : Int32) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":180,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L180"},"def":{"name":"spammy_downvote?","args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"interval","external_name":"interval","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"if interval == 0\nelse\n  if last_used = @downvote_last_used[user]?\n    if (Time.utc - last_used) < interval.seconds\n      return true\n    else\n      @downvote_last_used[user] = Time.utc\n    end\n  else\n    @downvote_last_used[user] = Time.utc\n  end\nend\nfalse\n"}},{"html_id":"spammy_forward?(user:UserID):Bool-instance-method","name":"spammy_forward?","doc":"Returns `true` if the forwarded message was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the forwarded message was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":255,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L255"},"def":{"name":"spammy_forward?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_forwarded_message)"}},{"html_id":"spammy_location?(user:UserID):Bool-instance-method","name":"spammy_location?","doc":"Returns `true` if the location was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the location was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":290,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L290"},"def":{"name":"spammy_location?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_location)"}},{"html_id":"spammy_photo?(user:UserID):Bool-instance-method","name":"spammy_photo?","doc":"Returns `true` if the photo was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the photo was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":206,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L206"},"def":{"name":"spammy_photo?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_photo)"}},{"html_id":"spammy_poll?(user:UserID):Bool-instance-method","name":"spammy_poll?","doc":"Returns `true` if the poll was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the poll was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":248,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L248"},"def":{"name":"spammy_poll?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_poll)"}},{"html_id":"spammy_sign?(user:UserID,interval:Int32):Bool-instance-method","name":"spammy_sign?","doc":"Check if user has signed within an interval of time\n\nReturns true if so (user is sign spamming), false otherwise.","summary":"<p>Check if user has signed within an interval of time</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"interval","external_name":"interval","restriction":"Int32"}],"args_string":"(user : UserID, interval : Int32) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, interval : Int32) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":142,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L142"},"def":{"name":"spammy_sign?","args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"interval","external_name":"interval","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"if interval == 0\nelse\n  if last_used = @sign_last_used[user]?\n    if (Time.utc - last_used) < interval.seconds\n      return true\n    else\n      @sign_last_used[user] = Time.utc\n    end\n  else\n    @sign_last_used[user] = Time.utc\n  end\nend\nfalse\n"}},{"html_id":"spammy_sticker?(user:UserID):Bool-instance-method","name":"spammy_sticker?","doc":"Returns `true` if the sticker was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the sticker was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":269,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L269"},"def":{"name":"spammy_sticker?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_sticker)"}},{"html_id":"spammy_text?(user:UserID,text:String):Bool-instance-method","name":"spammy_text?","doc":"Returns `true` if the text message was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the text message was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(user : UserID, text : String) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, text : String) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":199,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L199"},"def":{"name":"spammy_text?","args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, (score_text + (text.size * score_character)) + (text.lines.size * score_line))"}},{"html_id":"spammy_upvote?(user:UserID,interval:Int32):Bool-instance-method","name":"spammy_upvote?","doc":"Check if user has upvoted within an interval of time\n\nReturns true if so (user is upvoting too often), false otherwise.","summary":"<p>Check if user has upvoted within an interval of time</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"interval","external_name":"interval","restriction":"Int32"}],"args_string":"(user : UserID, interval : Int32) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, interval : Int32) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":161,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L161"},"def":{"name":"spammy_upvote?","args":[{"name":"user","external_name":"user","restriction":"UserID"},{"name":"interval","external_name":"interval","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"if interval == 0\nelse\n  if last_used = @upvote_last_used[user]?\n    if (Time.utc - last_used) < interval.seconds\n      return true\n    else\n      @upvote_last_used[user] = Time.utc\n    end\n  else\n    @upvote_last_used[user] = Time.utc\n  end\nend\nfalse\n"}},{"html_id":"spammy_venue?(user:UserID):Bool-instance-method","name":"spammy_venue?","doc":"Returns `true` if the venue was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the venue was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":283,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L283"},"def":{"name":"spammy_venue?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_venue)"}},{"html_id":"spammy_video?(user:UserID):Bool-instance-method","name":"spammy_video?","doc":"Returns `true` if the video was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the video was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":220,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L220"},"def":{"name":"spammy_video?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_video)"}},{"html_id":"spammy_video_note?(user:UserID):Bool-instance-method","name":"spammy_video_note?","doc":"Returns `true` if the video note was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the video note was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":262,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L262"},"def":{"name":"spammy_video_note?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_video_note)"}},{"html_id":"spammy_voice?(user:UserID):Bool-instance-method","name":"spammy_voice?","doc":"Returns `true` if the voice message was spammy\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the voice message was spammy</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":234,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L234"},"def":{"name":"spammy_voice?","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"spammy?(user, score_voice)"}},{"html_id":"upvote_last_used:Hash(UserID,Time)-instance-method","name":"upvote_last_used","doc":"Returns a hash of `UserID` to `Time`, contaning the time each user last upvoted","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/UserID.html\">UserID</a></code> to <code>Time</code>, contaning the time each user last upvoted</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/spam/spam_handler.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/spam/spam_handler.cr#L16"},"def":{"name":"upvote_last_used","return_type":"Hash(UserID, Time)","visibility":"Public","body":"@upvote_last_used"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/SpoilerCommand","path":"PrivateParlorXT/SpoilerCommand.html","kind":"class","full_name":"PrivateParlorXT::SpoilerCommand","name":"SpoilerCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/spoiler_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/spoiler_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to add or remove a spoiler on a message after it has been sent.","summary":"<p>A command used to add or remove a spoiler on a message after it has been sent.</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Adds a spoiler to the given *message* if it does not have one, or removes it if it does, and *message* meets requirements","summary":"<p>Adds a spoiler to the given <em>message</em> if it does not have one, or removes it if it does, and <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/spoiler_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/spoiler_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Spoiler, services)\nelse\n  return\nend\nif reply = reply_message(user, message, services)\nelse\n  return\nend\nif reply.forward_origin\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.fail)\nend\nif services.history.sender(reply.message_id.to_i64)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.not_in_cache)\nend\nif (from = reply.from) && (from.id == user.id)\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.fail)\nend\nif input = message_input(reply)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.fail)\nend\nspoil_messages(reply, user, input, services)\nupdate_user_activity(user, services)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.success)\n"}},{"html_id":"message_input(message:Tourmaline::Message):Tourmaline::InputMedia|Nil-instance-method","name":"message_input","doc":"Returns a `Tourmaline::InputMedia` from the media contents of the given *message*\n\nReturns `nil` unless message contains a photo, video, or animation/GIF","summary":"<p>Returns a <code>Tourmaline::InputMedia</code> from the media contents of the given <em>message</em></p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"args_string":"(message : Tourmaline::Message) : Tourmaline::InputMedia | Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>) : Tourmaline::InputMedia | Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/spoiler_command.cr","line_number":43,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/spoiler_command.cr#L43"},"def":{"name":"message_input","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"return_type":"Tourmaline::InputMedia | ::Nil","visibility":"Public","body":"if media = message.photo.last?\n  Tourmaline::InputMediaPhoto.new(media.file_id, caption: message.caption, caption_entities: message.caption_entities, show_caption_above_media: message.show_caption_above_media?)\nelse\n  if media = message.video\n    Tourmaline::InputMediaVideo.new(media.file_id, caption: message.caption, caption_entities: message.caption_entities, show_caption_above_media: message.show_caption_above_media?)\n  else\n    if media = message.animation\n      Tourmaline::InputMediaAnimation.new(media.file_id, caption: message.caption, caption_entities: message.caption_entities, show_caption_above_media: message.show_caption_above_media?)\n    end\n  end\nend"}},{"html_id":"spoil_messages(reply:Tourmaline::Message,user:User,input:Tourmaline::InputMedia,services:Services):Nil-instance-method","name":"spoil_messages","doc":"Spoils the given media message for all receivers by editing the media with the given input.","summary":"<p>Spoils the given media message for all receivers by editing the media with the given input.</p>","abstract":false,"args":[{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"user","external_name":"user","restriction":"User"},{"name":"input","external_name":"input","restriction":"Tourmaline::InputMedia"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(reply : Tourmaline::Message, user : User, input : Tourmaline::InputMedia, services : Services) : Nil","args_html":"(reply : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, input : Tourmaline::InputMedia, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/spoiler_command.cr","line_number":54,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/spoiler_command.cr#L54"},"def":{"name":"spoil_messages","args":[{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"user","external_name":"user","restriction":"User"},{"name":"input","external_name":"input","restriction":"Tourmaline::InputMedia"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if reply_msids = services.history.receivers(reply.message_id.to_i64)\nelse\n  return\nend\nif reply.has_media_spoiler?\n  log = Format.substitute_message(services.logs.unspoiled, {\"id\" => user.id.to_s, \"name\" => user.formatted_name, \"msid\" => reply.message_id.to_s})\nelse\n  input.has_spoiler = true\n  log = Format.substitute_message(services.logs.spoiled, {\"id\" => user.id.to_s, \"name\" => user.formatted_name, \"msid\" => reply.message_id.to_s})\nend\nreply_msids.each do |receiver, receiver_message|\n  services.relay.edit_message_media(receiver, input, receiver_message)\nend\nservices.relay.log_output(log)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/SQLiteDatabase","path":"PrivateParlorXT/SQLiteDatabase.html","kind":"class","full_name":"PrivateParlorXT::SQLiteDatabase","name":"SQLiteDatabase","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/Database","kind":"class","full_name":"PrivateParlorXT::Database","name":"Database"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/Database","kind":"class","full_name":"PrivateParlorXT::Database","name":"Database"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L6"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"An implementation of `Database` that uses a SQLite database for storing information about `SQLiteUser` objects","summary":"<p>An implementation of <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code> that uses a SQLite database for storing information about <code><a href=\"../PrivateParlorXT/SQLiteUser.html\">SQLiteUser</a></code> objects</p>","constructors":[{"html_id":"new(connection:DB::Database)-class-method","name":"new","doc":"Creates an instance of `SQLiteDatabase` and ensures that the proper tables exist","summary":"<p>Creates an instance of <code><a href=\"../PrivateParlorXT/SQLiteDatabase.html\">SQLiteDatabase</a></code> and ensures that the proper tables exist</p>","abstract":false,"args":[{"name":"connection","external_name":"connection","restriction":"DB::Database"}],"args_string":"(connection : DB::Database)","args_html":"(connection : DB::Database)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":11,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L11"},"def":{"name":"new","args":[{"name":"connection","external_name":"connection","restriction":"DB::Database"}],"visibility":"Public","body":"_ = allocate\n_.initialize(connection)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"active_users(exclude:UserID):Array(UserID)-instance-method","name":"active_users","doc":"Queries the database for the most active users, ordered by highest ranking\nusers first, then most active users.\n\nUse this to exclude a user from the result (i.e., when a user does not have\ndebug mode enabled)","summary":"<p>Queries the database for the most active users, ordered by highest ranking users first, then most active users.</p>","abstract":false,"args":[{"name":"exclude","external_name":"exclude","restriction":"UserID"}],"args_string":"(exclude : UserID) : Array(UserID)","args_html":"(exclude : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Array(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":95,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L95"},"def":{"name":"active_users","args":[{"name":"exclude","external_name":"exclude","restriction":"UserID"}],"return_type":"Array(UserID)","visibility":"Public","body":"@connection.query_all(\"SELECT id\\n        FROM users\\n        WHERE left IS NULL AND id IS NOT ?\\n        ORDER BY rank DESC, lastActive DESC\", args: [exclude], &.read(Int64))"}},{"html_id":"active_users:Array(UserID)-instance-method","name":"active_users","doc":"Queries the database for the most active users, ordered by highest ranking\nusers first, then most active users.","summary":"<p>Queries the database for the most active users, ordered by highest ranking users first, then most active users.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":90,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L90"},"def":{"name":"active_users","return_type":"Array(UserID)","visibility":"Public","body":"@connection.query_all(\"SELECT id FROM users WHERE left IS NULL ORDER BY rank DESC, lastActive DESC\", &.read(Int64))"}},{"html_id":"add_user(id:UserID,username:String|Nil,realname:String,rank:Int32):User|Nil-instance-method","name":"add_user","doc":"Adds a user to the database","summary":"<p>Adds a user to the database</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"UserID"},{"name":"username","external_name":"username","restriction":"String | ::Nil"},{"name":"realname","external_name":"realname","restriction":"String"},{"name":"rank","external_name":"rank","restriction":"Int32"}],"args_string":"(id : UserID, username : String | Nil, realname : String, rank : Int32) : User | Nil","args_html":"(id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, username : String | Nil, realname : String, rank : Int32) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":106,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L106"},"def":{"name":"add_user","args":[{"name":"id","external_name":"id","restriction":"UserID"},{"name":"username","external_name":"username","restriction":"String | ::Nil"},{"name":"realname","external_name":"realname","restriction":"String"},{"name":"rank","external_name":"rank","restriction":"Int32"}],"return_type":"User | ::Nil","visibility":"Public","body":"user = SQLiteUser.new(id, username, realname, rank)\n{% if true %}\n        {% arr = [] of ArrayLiteral %}\n        {% for var in User.instance_vars %}\n          {% arr << \"?\" %}\n        {% end %}\n        {% arr = arr.join(\", \") %}\n\n        # Add user to database\n        write do\n          @connection.exec(\"INSERT INTO users VALUES (#{{{ arr }}})\", args: user.to_a)\n        end\n      {% end %}\nuser\n"}},{"html_id":"blacklisted_users(time_limit:Time::Span):Array(User)-instance-method","name":"blacklisted_users","doc":"Get an array of recently blacklisted users","summary":"<p>Get an array of recently blacklisted users</p>","abstract":false,"args":[{"name":"time_limit","external_name":"time_limit","restriction":"Time::Span"}],"args_string":"(time_limit : Time::Span) : Array(User)","args_html":"(time_limit : Time::Span) : Array(<a href=\"../PrivateParlorXT/User.html\">User</a>)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":49,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L49"},"def":{"name":"blacklisted_users","args":[{"name":"time_limit","external_name":"time_limit","restriction":"Time::Span"}],"return_type":"Array(User)","visibility":"Public","body":"arr = [] of User\narr.concat(@connection.query_all(\"SELECT * FROM users WHERE rank = -10 AND left > (?)\", (Time.utc - time_limit), as: SQLiteUser))\n"}},{"html_id":"blacklisted_users:Array(User)-instance-method","name":"blacklisted_users","doc":"Get an array of blacklisted users","summary":"<p>Get an array of blacklisted users</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":44,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L44"},"def":{"name":"blacklisted_users","return_type":"Array(User)","visibility":"Public","body":"arr = [] of User\narr = arr.concat(@connection.query_all(\"SELECT * FROM users WHERE rank = -10\", as: SQLiteUser))\n"}},{"html_id":"close-instance-method","name":"close","doc":"Close connection to the `Database`","summary":"<p>Close connection to the <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L16"},"def":{"name":"close","visibility":"Public","body":"@connection.close"}},{"html_id":"ensure_schema:Nil-instance-method","name":"ensure_schema","doc":"Ensures that the SQLite database has both a 'system_config' and a 'users' table","summary":"<p>Ensures that the SQLite database has both a 'system_config' and a 'users' table</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":172,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L172"},"def":{"name":"ensure_schema","return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"CREATE TABLE IF NOT EXISTS system_config (\\n          name TEXT NOT NULL,\\n          value TEXT NOT NULL,\\n          PRIMARY KEY (name)\\n        )\")\n  @connection.exec(\"CREATE TABLE IF NOT EXISTS users (\\n          id BIGINT NOT NULL,\\n          username TEXT,\\n          realname TEXT NOT NULL,\\n          rank INTEGER NOT NULL,\\n          joined TIMESTAMP NOT NULL,\\n          left TIMESTAMP,\\n          lastActive TIMESTAMP NOT NULL,\\n          cooldownUntil TIMESTAMP,\\n          blacklistReason TEXT,\\n          warnings INTEGER NOT NULL,\\n          warnExpiry TIMESTAMP,\\n          karma INTEGER NOT NULL,\\n          hideKarma TINYINT NOT NULL,\\n          debugEnabled TINYINT NOT NULL,\\n          tripcode TEXT,\\n          PRIMARY KEY(id)\\n        )\")\nend"}},{"html_id":"expire_warnings(warn_lifespan:Time::Span):Nil-instance-method","name":"expire_warnings","doc":"Queries the database for users with warnings and removes a warning\n\nIf the user still has warnings, the next time a warning is removed should\nbe the current time plus the value of *warn_lifespan*\n\nThis should be invoked as a recurring task","summary":"<p>Queries the database for users with warnings and removes a warning</p>","abstract":false,"args":[{"name":"warn_lifespan","external_name":"warn_lifespan","restriction":"Time::Span"}],"args_string":"(warn_lifespan : Time::Span) : Nil","args_html":"(warn_lifespan : Time::Span) : Nil","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":148,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L148"},"def":{"name":"expire_warnings","args":[{"name":"warn_lifespan","external_name":"warn_lifespan","restriction":"Time::Span"}],"return_type":"Nil","visibility":"Public","body":"warned_users.each do |user|\n  if expiry = user.warn_expiry\n    if expiry <= Time.utc\n      user.remove_warning(1, warn_lifespan)\n      update_user(user)\n    end\n  end\nend"}},{"html_id":"get_user(id:UserID|Nil):User|Nil-instance-method","name":"get_user","doc":"Get user by `UserID`","summary":"<p>Get user by <code><a href=\"../PrivateParlorXT/UserID.html\">UserID</a></code></p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"UserID | ::Nil"}],"args_string":"(id : UserID | Nil) : User | Nil","args_html":"(id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a> | Nil) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":31,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L31"},"def":{"name":"get_user","args":[{"name":"id","external_name":"id","restriction":"UserID | ::Nil"}],"return_type":"User | ::Nil","visibility":"Public","body":"@connection.query_one?(\"SELECT * FROM users WHERE id = ?\", id, as: SQLiteUser)"}},{"html_id":"get_user_by_name(username:String):User|Nil-instance-method","name":"get_user_by_name","doc":"Get user by username","summary":"<p>Get user by username</p>","abstract":false,"args":[{"name":"username","external_name":"username","restriction":"String"}],"args_string":"(username : String) : User | Nil","args_html":"(username : String) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":73,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L73"},"def":{"name":"get_user_by_name","args":[{"name":"username","external_name":"username","restriction":"String"}],"return_type":"User | ::Nil","visibility":"Public","body":"if username.starts_with?(\"@\")\n  username = username[1..]\nend\n@connection.query_one?(\"SELECT * FROM users WHERE LOWER(username) = ?\", username, as: SQLiteUser)\n"}},{"html_id":"get_user_by_oid(oid:String):User|Nil-instance-method","name":"get_user_by_oid","doc":"Get user by a four-digit obfuscated ID","summary":"<p>Get user by a four-digit obfuscated ID</p>","abstract":false,"args":[{"name":"oid","external_name":"oid","restriction":"String"}],"args_string":"(oid : String) : User | Nil","args_html":"(oid : String) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":81,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L81"},"def":{"name":"get_user_by_oid","args":[{"name":"oid","external_name":"oid","restriction":"String"}],"return_type":"User | ::Nil","visibility":"Public","body":"(@connection.query_all(\"SELECT * FROM users WHERE left IS NULL ORDER BY lastActive DESC\", as: SQLiteUser)).each do |user|\n  if user.obfuscated_id == oid\n    return user\n  end\nend"}},{"html_id":"inactive_users(time_limit:Time::Span):Array(User)-instance-method","name":"inactive_users","doc":"Get users that have not been active within a given time limit","summary":"<p>Get users that have not been active within a given time limit</p>","abstract":false,"args":[{"name":"time_limit","external_name":"time_limit","restriction":"Time::Span"}],"args_string":"(time_limit : Time::Span) : Array(User)","args_html":"(time_limit : Time::Span) : Array(<a href=\"../PrivateParlorXT/User.html\">User</a>)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":67,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L67"},"def":{"name":"inactive_users","args":[{"name":"time_limit","external_name":"time_limit","restriction":"Time::Span"}],"return_type":"Array(User)","visibility":"Public","body":"arr = [] of User\narr.concat(@connection.query_all(\"SELECT * FROM users WHERE left is NULL AND lastActive < ?\", (Time.utc - time_limit), as: SQLiteUser))\n"}},{"html_id":"invalid_rank_users(valid_ranks:Array(Int32)):Array(User)-instance-method","name":"invalid_rank_users","doc":"Get an array of users whose ranks are currently invalid","summary":"<p>Get an array of users whose ranks are currently invalid</p>","abstract":false,"args":[{"name":"valid_ranks","external_name":"valid_ranks","restriction":"Array(Int32)"}],"args_string":"(valid_ranks : Array(Int32)) : Array(User)","args_html":"(valid_ranks : Array(Int32)) : Array(<a href=\"../PrivateParlorXT/User.html\">User</a>)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":61,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L61"},"def":{"name":"invalid_rank_users","args":[{"name":"valid_ranks","external_name":"valid_ranks","restriction":"Array(Int32)"}],"return_type":"Array(User)","visibility":"Public","body":"arr = [] of User\narr.concat(@connection.query_all(\"SELECT * FROM users WHERE rank NOT IN (#{valid_ranks.join(\", \") do\n  \"?\"\nend})\", args: valid_ranks, as: SQLiteUser))\n"}},{"html_id":"motd:String|Nil-instance-method","name":"motd","doc":"Gets the MOTD/rules, if they exist","summary":"<p>Gets the MOTD/rules, if they exist</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":167,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L167"},"def":{"name":"motd","return_type":"String | ::Nil","visibility":"Public","body":"@connection.query_one?(\"SELECT value FROM system_config WHERE name = 'motd'\", as: String)"}},{"html_id":"no_users?:Bool|Nil-instance-method","name":"no_users?","doc":"Returns true if there are no users in the database\nFalse otherwise","summary":"<p>Returns true if there are no users in the database False otherwise</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":141,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L141"},"def":{"name":"no_users?","return_type":"Bool | ::Nil","visibility":"Public","body":"!(@connection.query(\"SELECT id FROM users\") do |rs|\n  rs.move_next\nend)"}},{"html_id":"set_motd(text:String):Nil-instance-method","name":"set_motd","doc":"Sets the MOTD/rules to the given string","summary":"<p>Sets the MOTD/rules to the given string</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Nil","args_html":"(text : String) : Nil","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":160,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L160"},"def":{"name":"set_motd","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"REPLACE INTO system_config VALUES ('motd', ?)\", text)\nend"}},{"html_id":"update_user(user:User):Nil-instance-method","name":"update_user","doc":"Updates a user with new data","summary":"<p>Updates a user with new data</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"}],"args_string":"(user : User) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>) : Nil","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":126,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L126"},"def":{"name":"update_user","args":[{"name":"user","external_name":"user","restriction":"User"}],"return_type":"Nil","visibility":"Public","body":"{% if true %}\n        {% arr = [] of ArrayLiteral %}\n        {% for var in User.instance_vars[1..-1] %}\n          {% arr << \"#{var.name.camelcase(lower: true)} = ?\" %}\n        {% end %}\n        {% arr = arr.join(\", \") %}\n        # Modify user\n        write do\n          @connection.exec(\"UPDATE users SET #{{{ arr }}} WHERE id = ?\", args: user.to_a.rotate)\n        end\n      {% end %}"}},{"html_id":"user_counts:NamedTuple(total:Int32,left:Int32,blacklisted:Int32)-instance-method","name":"user_counts","doc":"Get the total count of users, users that have stopped the bot, and\nusers that are blacklisted","summary":"<p>Get the total count of users, users that have stopped the bot, and users that are blacklisted</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":36,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L36"},"def":{"name":"user_counts","return_type":"NamedTuple(total: Int32, left: Int32, blacklisted: Int32)","visibility":"Public","body":"@connection.query_one(\"SELECT COUNT(id), COUNT(left), (SELECT COUNT(id) FROM users WHERE rank = -10) FROM users\", as: {total: Int32, left: Int32, blacklisted: Int32})"}},{"html_id":"warned_users:Array(User)-instance-method","name":"warned_users","doc":"Get an array of warned users","summary":"<p>Get an array of warned users</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_database.cr","line_number":55,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_database.cr#L55"},"def":{"name":"warned_users","return_type":"Array(User)","visibility":"Public","body":"arr = [] of User\narr.concat(@connection.query_all(\"SELECT * FROM users WHERE warnings > 0 AND left is NULL\", as: SQLiteUser))\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/SQLiteHistory","path":"PrivateParlorXT/SQLiteHistory.html","kind":"class","full_name":"PrivateParlorXT::SQLiteHistory","name":"SQLiteHistory","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/History","kind":"class","full_name":"PrivateParlorXT::History","name":"History"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/History","kind":"class","full_name":"PrivateParlorXT::History","name":"History"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"An implementation of `History` using the SQLite `Database` for storing message data","summary":"<p>An implementation of <code><a href=\"../PrivateParlorXT/History.html\">History</a></code> using the SQLite <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code> for storing message data</p>","constructors":[{"html_id":"new(lifespan:Time::Span,connection:DB::Database)-class-method","name":"new","doc":"Initialize a `SQLiteHistory` where messages older than `lifespan` are considered expired\n\nGenerally this should use the same connection that was used for the database","summary":"<p>Initialize a <code><a href=\"../PrivateParlorXT/SQLiteHistory.html\">SQLiteHistory</a></code> where messages older than <code>lifespan</code> are considered expired</p>","abstract":false,"args":[{"name":"lifespan","external_name":"lifespan","restriction":"Time::Span"},{"name":"connection","external_name":"connection","restriction":"DB::Database"}],"args_string":"(lifespan : Time::Span, connection : DB::Database)","args_html":"(lifespan : Time::Span, connection : DB::Database)","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L13"},"def":{"name":"new","args":[{"name":"lifespan","external_name":"lifespan","restriction":"Time::Span"},{"name":"connection","external_name":"connection","restriction":"DB::Database"}],"visibility":"Public","body":"_ = allocate\n_.initialize(lifespan, connection)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_rating(message:MessageID,user:UserID):Bool-instance-method","name":"add_rating","doc":"Adds a rating entry to the database with the given data\n\nReturns `true` if the user's rating was successfully added; `false` if the user's rating already exists.","summary":"<p>Adds a rating entry to the database with the given data</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(message : MessageID, user : UserID) : Bool","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Bool","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":119,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L119"},"def":{"name":"add_rating","args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Bool","visibility":"Public","body":"if @connection.query_one?(\"SELECT userID FROM karma WHERE messageGroupID = ? AND userID = ?\", message, user, as: UserID)\n  return false\nend\nwrite do\n  @connection.exec(\"INSERT INTO karma VALUES (?, ?)\", args: [message, user])\nend\ntrue\n"}},{"html_id":"add_to_history(origin:MessageID,receiver:MessageID,receiver_id:UserID):Nil-instance-method","name":"add_to_history","doc":"Add a receiver message to the `History`","summary":"<p>Add a receiver message to the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"args":[{"name":"origin","external_name":"origin","restriction":"MessageID"},{"name":"receiver","external_name":"receiver","restriction":"MessageID"},{"name":"receiver_id","external_name":"receiver_id","restriction":"UserID"}],"args_string":"(origin : MessageID, receiver : MessageID, receiver_id : UserID) : Nil","args_html":"(origin : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, receiver : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, receiver_id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Nil","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":45,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L45"},"def":{"name":"add_to_history","args":[{"name":"origin","external_name":"origin","restriction":"MessageID"},{"name":"receiver","external_name":"receiver","restriction":"MessageID"},{"name":"receiver_id","external_name":"receiver_id","restriction":"UserID"}],"return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"INSERT INTO receivers VALUES (?, ?, ?)\", args: [receiver, receiver_id, origin])\nend"}},{"html_id":"add_warning(message:MessageID):Nil-instance-method","name":"add_warning","doc":"Adds a warning to the given message","summary":"<p>Adds a warning to the given message</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Nil","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":132,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L132"},"def":{"name":"add_warning","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"UPDATE message_groups\\n          SET warned = TRUE\\n          WHERE messageGroupID = ?\", origin_message(message))\nend"}},{"html_id":"close-instance-method","name":"close","doc":"Closes the databsase connection","summary":"<p>Closes the databsase connection</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":18,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L18"},"def":{"name":"close","visibility":"Public","body":"@connection.close"}},{"html_id":"delete_message_group(message:MessageID):MessageID|Nil-instance-method","name":"delete_message_group","doc":"Delete a message group from the `History`","summary":"<p>Delete a message group from the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : MessageID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Nil","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":183,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L183"},"def":{"name":"delete_message_group","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"MessageID | ::Nil","visibility":"Public","body":"origin = origin_message(message)\nwrite do\n  @connection.exec(\"DELETE FROM message_groups WHERE messageGroupID = ?\", origin)\nend\norigin\n"}},{"html_id":"ensure_schema:Nil-instance-method","name":"ensure_schema","doc":"Ensures that there are message_group, receivers, and karma tables in the `Database`","summary":"<p>Ensures that there are message_group, receivers, and karma tables in the <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":213,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L213"},"def":{"name":"ensure_schema","return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"PRAGMA foreign_keys = ON\")\n  @connection.exec(\"CREATE TABLE IF NOT EXISTS message_groups (\\n          messageGroupID BIGINT NOT NULL,\\n          senderID BIGINT NOT NULL,\\n          sentTime TIMESTAMP NOT NULL,\\n          warned TINYINT NOT NULL,\\n          PRIMARY KEY (messageGroupID)\\n        )\")\n  @connection.exec(\"CREATE TABLE IF NOT EXISTS receivers (\\n          receiverMSID BIGINT NOT NULL,\\n          receiverID BIGINT NOT NULL,\\n          messageGroupID BIGINT NOT NULL,\\n          PRIMARY KEY (receiverMSID),\\n          FOREIGN KEY (messageGroupID) REFERENCES message_groups(messageGroupID)\\n          ON DELETE CASCADE\\n        )\")\n  @connection.exec(\"CREATE TABLE IF NOT EXISTS karma (\\n          messageGroupID BIGINT NOT NULL,\\n          userID BIGINT NOT NULL,\\n          PRIMARY KEY (messageGroupID),\\n          FOREIGN KEY (messageGroupID) REFERENCES receivers(receiverMSID)\\n          ON DELETE CASCADE\\n        )\")\nend"}},{"html_id":"expire:Nil-instance-method","name":"expire","doc":"Deletes old messages from the `History`\n\nThis should be invoked as a recurring task","summary":"<p>Deletes old messages from the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":194,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L194"},"def":{"name":"expire","return_type":"Nil","visibility":"Public","body":"count = @connection.query_one(\"SELECT COUNT(messageGroupID)\\n        FROM message_groups\\n        WHERE sentTime <= ?\", Time.utc - @lifespan, as: Int32)\nwrite do\n  @connection.exec(\"DELETE FROM message_groups WHERE sentTime <= ?\", Time.utc - @lifespan)\nend\nif count > 0\n  Log.debug do\n    \"Expired #{count} messages from the cache\"\n  end\nend\n"}},{"html_id":"messages_from_user(user:UserID):Set(MessageID)-instance-method","name":"messages_from_user","doc":"Get all message IDs sent by a given user for purging messages","summary":"<p>Get all message IDs sent by a given user for purging messages</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"UserID"}],"args_string":"(user : UserID) : Set(MessageID)","args_html":"(user : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : Set(<a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>)","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":108,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L108"},"def":{"name":"messages_from_user","args":[{"name":"user","external_name":"user","restriction":"UserID"}],"return_type":"Set(MessageID)","visibility":"Public","body":"(@connection.query_all(\"SELECT messageGroupID\\n        FROM message_groups\\n        WHERE senderID = ? AND sentTime > ?\", args: [user, (Time.utc - 48.hours)], as: MessageID)).to_set"}},{"html_id":"new_message(sender_id:UserID,origin:MessageID):MessageID-instance-method","name":"new_message","doc":"Create a new message group and add it to the `History`","summary":"<p>Create a new message group and add it to the <code><a href=\"../PrivateParlorXT/History.html\">History</a></code></p>","abstract":false,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"UserID"},{"name":"origin","external_name":"origin","restriction":"MessageID"}],"args_string":"(sender_id : UserID, origin : MessageID) : MessageID","args_html":"(sender_id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, origin : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":33,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L33"},"def":{"name":"new_message","args":[{"name":"sender_id","external_name":"sender_id","restriction":"UserID"},{"name":"origin","external_name":"origin","restriction":"MessageID"}],"return_type":"MessageID","visibility":"Public","body":"write do\n  @connection.exec(\"INSERT INTO message_groups VALUES (?, ?, ?, ?)\", args: [origin, sender_id, Time.utc, false])\nend\norigin\n"}},{"html_id":"origin_message(message:MessageID):MessageID|Nil-instance-method","name":"origin_message","doc":"Get the message ID of the original message associated with the given message ID","summary":"<p>Get the message ID of the original message associated with the given message ID</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : MessageID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Nil","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":55,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L55"},"def":{"name":"origin_message","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"MessageID | ::Nil","visibility":"Public","body":"@connection.query_one?(\"SELECT messageGroupID\\n        FROM receivers\\n        where receiverMSID = ?\\n        UNION\\n        select messageGroupID\\n        FROM message_groups\\n        WHERE messageGroupID = ?\", message, message, as: MessageID)"}},{"html_id":"purge_receivers(messages:Set(MessageID)):Hash(UserID,Array(MessageID))-instance-method","name":"purge_receivers","doc":"Get a hash containing an array of message IDs to delete associated with the users who received a message in the given set.\nUsed for the `PurgeCommand`\nNOTE: The returned array of message IDs should be sorted in descending order (most recent messages first)","summary":"<p>Get a hash containing an array of message IDs to delete associated with the users who received a message in the given set.</p>","abstract":false,"args":[{"name":"messages","external_name":"messages","restriction":"Set(MessageID)"}],"args_string":"(messages : Set(MessageID)) : Hash(UserID, Array(MessageID))","args_html":"(messages : Set(<a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>)) : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, Array(<a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>))","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":155,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L155"},"def":{"name":"purge_receivers","args":[{"name":"messages","external_name":"messages","restriction":"Set(MessageID)"}],"return_type":"Hash(UserID, Array(MessageID))","visibility":"Public","body":"hash = {} of UserID => Array(MessageID)\ntuples = @connection.query_all(\"SELECT receiverID, receiverMSID\\n        FROM receivers\\n        WHERE receivers.messageGroupID IN (\\n          SELECT messageGroupID\\n          FROM message_groups\\n          WHERE messageGroupID in (#{messages.join(\", \") do\n  \"?\"\nend})\\n        )\\n        ORDER BY receiverMSID DESC\", args: messages.to_a, as: {UserID, MessageID})\ntuples.each do |tuple|\n  if hash[tuple[0]]?\n    hash[tuple[0]] << tuple[1]\n  else\n    hash[tuple[0]] = [tuple[1]]\n  end\nend\nhash\n"}},{"html_id":"receiver_message(message:MessageID,receiver:UserID):MessageID|Nil-instance-method","name":"receiver_message","doc":"Get the original message ID associated with the given message ID and receiver ID","summary":"<p>Get the original message ID associated with the given message ID and receiver ID</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"receiver","external_name":"receiver","restriction":"UserID"}],"args_string":"(message : MessageID, receiver : UserID) : MessageID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, receiver : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>) : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a> | Nil","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":87,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L87"},"def":{"name":"receiver_message","args":[{"name":"message","external_name":"message","restriction":"MessageID"},{"name":"receiver","external_name":"receiver","restriction":"UserID"}],"return_type":"MessageID | ::Nil","visibility":"Public","body":"(receivers(message))[receiver]?"}},{"html_id":"receivers(message:MessageID):Hash(UserID,MessageID)-instance-method","name":"receivers","doc":"Get a hash of all users and receiver message IDs associated with the given message ID","summary":"<p>Get a hash of all users and receiver message IDs associated with the given message ID</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : Hash(UserID, MessageID)","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>)","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":70,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L70"},"def":{"name":"receivers","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Hash(UserID, MessageID)","visibility":"Public","body":"origin = origin_message(message)\n(@connection.query_all(\"SELECT senderID, messageGroupID\\n        FROM message_groups\\n        WHERE messageGroupID = ?\\n        UNION\\n        SELECT receiverID, receiverMSID\\n        FROM receivers\\n        WHERE messageGroupID = ?\", origin, origin, as: {UserID, MessageID})).to_h\n"}},{"html_id":"sender(message:MessageID):UserID|Nil-instance-method","name":"sender","doc":"Get the sender of the original message referenced by the given message ID","summary":"<p>Get the sender of the original message referenced by the given message ID</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : UserID | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a> | Nil","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":92,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L92"},"def":{"name":"sender","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"UserID | ::Nil","visibility":"Public","body":"@connection.query_one?(\"SELECT DISTINCT senderID\\n        FROM message_groups\\n        WHERE messageGroupID IN (\\n          SELECT messageGroupID\\n          FROM receivers\\n          WHERE receiverMSID = ?\\n        )\\n        OR messageGroupID = ?\", message, message, as: UserID)"}},{"html_id":"warned?(message:MessageID):Bool|Nil-instance-method","name":"warned?","doc":"Returns `true` if the given message was already warned; `false` or nil otherwise","summary":"<p>Returns <code>true</code> if the given message was already warned; <code>false</code> or nil otherwise</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"args_string":"(message : MessageID) : Bool | Nil","args_html":"(message : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/history/sqlite_history.cr","line_number":144,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/history/sqlite_history.cr#L144"},"def":{"name":"warned?","args":[{"name":"message","external_name":"message","restriction":"MessageID"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"@connection.query_one?(\"SELECT warned\\n        FROM message_groups\\n        WHERE messageGroupID = ?\", origin_message(message), as: Bool)"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/SQLiteRobot9000","path":"PrivateParlorXT/SQLiteRobot9000.html","kind":"class","full_name":"PrivateParlorXT::SQLiteRobot9000","name":"SQLiteRobot9000","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/Robot9000","kind":"class","full_name":"PrivateParlorXT::Robot9000","name":"Robot9000"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/Robot9000","kind":"class","full_name":"PrivateParlorXT::Robot9000","name":"Robot9000"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/robot9000/sqlite_r9k.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/sqlite_r9k.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"An implementation of `Robot9000` using the `Database` to store unique text and media IDs","summary":"<p>An implementation of <code><a href=\"../PrivateParlorXT/Robot9000.html\">Robot9000</a></code> using the <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code> to store unique text and media IDs</p>","constructors":[{"html_id":"new(connection:DB::Database,valid_codepoints:Array(Range(Int32,Int32))=[(0..127)],check_text:Bool|Nil=nil,check_media:Bool|Nil=nil,check_forwards:Bool|Nil=nil,warn_user:Bool|Nil=nil,cooldown:Int32=0)-class-method","name":"new","doc":"Generally this should use the same connection that was used for the database","summary":"<p>Generally this should use the same connection that was used for the database</p>","abstract":false,"args":[{"name":"connection","external_name":"connection","restriction":"DB::Database"},{"name":"valid_codepoints","default_value":"[(0..127)]","external_name":"valid_codepoints","restriction":"Array(Range(Int32, Int32))"},{"name":"check_text","default_value":"nil","external_name":"check_text","restriction":"Bool | ::Nil"},{"name":"check_media","default_value":"nil","external_name":"check_media","restriction":"Bool | ::Nil"},{"name":"check_forwards","default_value":"nil","external_name":"check_forwards","restriction":"Bool | ::Nil"},{"name":"warn_user","default_value":"nil","external_name":"warn_user","restriction":"Bool | ::Nil"},{"name":"cooldown","default_value":"0","external_name":"cooldown","restriction":"Int32"}],"args_string":"(connection : DB::Database, valid_codepoints : Array(Range(Int32, Int32)) = [(0..127)], check_text : Bool | Nil = nil, check_media : Bool | Nil = nil, check_forwards : Bool | Nil = nil, warn_user : Bool | Nil = nil, cooldown : Int32 = 0)","args_html":"(connection : DB::Database, valid_codepoints : Array(Range(Int32, Int32)) = [(<span class=\"n\">0</span>..<span class=\"n\">127</span>)], check_text : Bool | Nil = <span class=\"n\">nil</span>, check_media : Bool | Nil = <span class=\"n\">nil</span>, check_forwards : Bool | Nil = <span class=\"n\">nil</span>, warn_user : Bool | Nil = <span class=\"n\">nil</span>, cooldown : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src/private-parlor-xt/robot9000/sqlite_r9k.cr","line_number":11,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/sqlite_r9k.cr#L11"},"def":{"name":"new","args":[{"name":"connection","external_name":"connection","restriction":"DB::Database"},{"name":"valid_codepoints","default_value":"[(0..127)]","external_name":"valid_codepoints","restriction":"Array(Range(Int32, Int32))"},{"name":"check_text","default_value":"nil","external_name":"check_text","restriction":"Bool | ::Nil"},{"name":"check_media","default_value":"nil","external_name":"check_media","restriction":"Bool | ::Nil"},{"name":"check_forwards","default_value":"nil","external_name":"check_forwards","restriction":"Bool | ::Nil"},{"name":"warn_user","default_value":"nil","external_name":"warn_user","restriction":"Bool | ::Nil"},{"name":"cooldown","default_value":"0","external_name":"cooldown","restriction":"Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(connection, valid_codepoints, check_text, check_media, check_forwards, warn_user, cooldown)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_file_id(id:String):Nil-instance-method","name":"add_file_id","doc":"Stores the file *id* to be referenced later","summary":"<p>Stores the file <em>id</em> to be referenced later</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String) : Nil","args_html":"(id : String) : Nil","location":{"filename":"src/private-parlor-xt/robot9000/sqlite_r9k.cr","line_number":55,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/sqlite_r9k.cr#L55"},"def":{"name":"add_file_id","args":[{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"INSERT INTO file_id VALUES (?)\", id)\nend"}},{"html_id":"add_line(text:String):Nil-instance-method","name":"add_line","doc":"Stores the stripped line of *text* to be referenced later","summary":"<p>Stores the stripped line of <em>text</em> to be referenced later</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Nil","args_html":"(text : String) : Nil","location":{"filename":"src/private-parlor-xt/robot9000/sqlite_r9k.cr","line_number":41,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/sqlite_r9k.cr#L41"},"def":{"name":"add_line","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"INSERT INTO text VALUES (?)\", text)\nend"}},{"html_id":"ensure_schema:Nil-instance-method","name":"ensure_schema","doc":"Ensures that both the text table and file_id table are created in the `Database`, according to the values of `check_text` and `check_media`","summary":"<p>Ensures that both the text table and file_id table are created in the <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code>, according to the values of <code>check_text</code> and <code>check_media</code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/robot9000/sqlite_r9k.cr","line_number":62,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/sqlite_r9k.cr#L62"},"def":{"name":"ensure_schema","return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"\\n          CREATE TABLE IF NOT EXISTS text (\\n            line TEXT NOT NULL,\\n            PRIMARY KEY (line)\\n          )\\n        \")\n  @connection.exec(\"\\n          CREATE TABLE IF NOT EXISTS file_id (\\n            id TEXT NOT NULL,\\n            PRIMARY KEY (id)\\n          )\\n        \")\nend"}},{"html_id":"unoriginal_media?(id:String):Bool|Nil-instance-method","name":"unoriginal_media?","doc":"Returns `true` if the given file id has been sent before\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the given file id has been sent before Returns <code>false</code> otherwise</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String) : Bool | Nil","args_html":"(id : String) : Bool | Nil","location":{"filename":"src/private-parlor-xt/robot9000/sqlite_r9k.cr","line_number":48,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/sqlite_r9k.cr#L48"},"def":{"name":"unoriginal_media?","args":[{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"@connection.query_one?(\"SELECT 1 FROM file_id WHERE id = ?\", id) do\n  true\nend"}},{"html_id":"unoriginal_text?(text:String):Bool|Nil-instance-method","name":"unoriginal_text?","doc":"Returns `true` if the given text has been sent before\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the given text has been sent before Returns <code>false</code> otherwise</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Bool | Nil","args_html":"(text : String) : Bool | Nil","location":{"filename":"src/private-parlor-xt/robot9000/sqlite_r9k.cr","line_number":34,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/robot9000/sqlite_r9k.cr#L34"},"def":{"name":"unoriginal_text?","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"@connection.query_one?(\"SELECT 1 FROM text WHERE line = ?\", text) do\n  true\nend"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/SQLiteStatistics","path":"PrivateParlorXT/SQLiteStatistics.html","kind":"class","full_name":"PrivateParlorXT::SQLiteStatistics","name":"SQLiteStatistics","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics","kind":"class","full_name":"PrivateParlorXT::Statistics","name":"Statistics"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics","kind":"class","full_name":"PrivateParlorXT::Statistics","name":"Statistics"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"An implementation of `Statistics` using the `Database` for storing message data","summary":"<p>An implementation of <code><a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a></code> using the <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code> for storing message data</p>","constructors":[{"html_id":"new(connection:DB::Database)-class-method","name":"new","doc":"Generally this should use the same connection that was used for the database","summary":"<p>Generally this should use the same connection that was used for the database</p>","abstract":false,"args":[{"name":"connection","external_name":"connection","restriction":"DB::Database"}],"args_string":"(connection : DB::Database)","args_html":"(connection : DB::Database)","location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L9"},"def":{"name":"new","args":[{"name":"connection","external_name":"connection","restriction":"DB::Database"}],"visibility":"Public","body":"_ = allocate\n_.initialize(connection)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"ensure_schema:Nil-instance-method","name":"ensure_schema","doc":"Ensures that there is a 'message_stats' table in the database","summary":"<p>Ensures that there is a 'message_stats' table in the database</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":222,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L222"},"def":{"name":"ensure_schema","return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"CREATE TABLE IF NOT EXISTS message_stats (\\n          date TIMESTAMP NOT NULL,\\n          albums INTEGER NOT NULL DEFAULT 0,\\n          animations INTEGER NOT NULL DEFAULT 0,\\n          audio INTEGER NOT NULL DEFAULT 0,\\n          contacts INTEGER NOT NULL DEFAULT 0,\\n          documents INTEGER NOT NULL DEFAULT 0,\\n          forwards INTEGER NOT NULL DEFAULT 0,\\n          locations INTEGER NOT NULL DEFAULT 0,\\n          photos INTEGER NOT NULL DEFAULT 0,\\n          polls INTEGER NOT NULL DEFAULT 0,\\n          stickers INTEGER NOT NULL DEFAULT 0,\\n          text INTEGER NOT NULL DEFAULT 0,\\n          venues INTEGER NOT NULL DEFAULT 0,\\n          videos INTEGER NOT NULL DEFAULT 0,\\n          videonotes INTEGER NOT NULL DEFAULT 0,\\n          voice INTEGER NOT NULL DEFAULT 0,\\n          upvotes INTEGER NOT NULL DEFAULT 0,\\n          downvotes INTEGER NOT NULL DEFAULT 0,\\n          unoriginal_text INTEGER NOT NULL DEFAULT 0,\\n          unoriginal_media INTEGER NOT NULL DEFAULT 0,\\n          total_messages INTEGER NOT NULL DEFAULT 0,\\n          PRIMARY KEY (date)\\n        )\")\nend"}},{"html_id":"ensure_start_date:Nil-instance-method","name":"ensure_start_date","doc":"Ensures that there is a date value for the 'start_date' key in the 'system_config' table","summary":"<p>Ensures that there is a date value for the 'start_date' key in the 'system_config' table</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":252,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L252"},"def":{"name":"ensure_start_date","return_type":"Nil","visibility":"Public","body":"if @connection.query_one?(\"SELECT value FROM system_config WHERE name = 'start_date'\", as: String)\n  return\nend\nwrite do\n  @connection.exec(\"INSERT INTO system_config VALUES ('start_date', date(?))\", Time.utc)\nend\n"}},{"html_id":"increment_downvotes:Nil-instance-method","name":"increment_downvotes","doc":"Increment the number of downvotes given","summary":"<p>Increment the number of downvotes given</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":59,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L59"},"def":{"name":"increment_downvotes","return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"\\n          INSERT INTO message_stats (date, downvotes)\\n          VALUES (date('now'), 1)\\n          ON CONFLICT(date) DO UPDATE SET downvotes = downvotes + 1 WHERE date = date('now')\\n        \")\nend"}},{"html_id":"increment_messages(type:Messages):Nil-instance-method","name":"increment_messages","doc":"Increment the message count according to the given *type* and increment the total number of messages in general","summary":"<p>Increment the message count according to the given <em>type</em> and increment the total number of messages in general</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Messages"}],"args_string":"(type : Messages) : Nil","args_html":"(type : <a href=\"../PrivateParlorXT/Statistics/Messages.html\">Messages</a>) : Nil","location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":35,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L35"},"def":{"name":"increment_messages","args":[{"name":"type","external_name":"type","restriction":"Messages"}],"return_type":"Nil","visibility":"Public","body":"column = type.to_s.downcase\nwrite do\n  @connection.exec(\"\\n          INSERT INTO message_stats (date, #{column}, total_messages)\\n          VALUES (date('now'), 1, 1)\\n          ON CONFLICT(date) DO UPDATE SET #{column} = #{column} + 1, total_messages = total_messages + 1 WHERE date = date('now')\\n        \")\nend\n"}},{"html_id":"increment_unoriginal_media:Nil-instance-method","name":"increment_unoriginal_media","doc":"Increment the number of unoriginal media messages encountered","summary":"<p>Increment the number of unoriginal media messages encountered</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":81,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L81"},"def":{"name":"increment_unoriginal_media","return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"\\n          INSERT INTO message_stats (date, unoriginal_media)\\n          VALUES (date('now'), 1)\\n          ON CONFLICT(date) DO UPDATE SET unoriginal_media = unoriginal_media + 1 WHERE date = date('now')\\n        \")\nend"}},{"html_id":"increment_unoriginal_text:Nil-instance-method","name":"increment_unoriginal_text","doc":"Increment the number of unoriginal text messages encountered","summary":"<p>Increment the number of unoriginal text messages encountered</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":70,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L70"},"def":{"name":"increment_unoriginal_text","return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"\\n          INSERT INTO message_stats (date, unoriginal_text)\\n          VALUES (date('now'), 1)\\n          ON CONFLICT(date) DO UPDATE SET unoriginal_text = unoriginal_text + 1 WHERE date = date('now')\\n        \")\nend"}},{"html_id":"increment_upvotes:Nil-instance-method","name":"increment_upvotes","doc":"Increment the number of upvotes given","summary":"<p>Increment the number of upvotes given</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":48,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L48"},"def":{"name":"increment_upvotes","return_type":"Nil","visibility":"Public","body":"write do\n  @connection.exec(\"\\n          INSERT INTO message_stats (date, upvotes)\\n          VALUES (date('now'), 1)\\n          ON CONFLICT(date) DO UPDATE SET upvotes = upvotes + 1 WHERE date = date('now')\\n        \")\nend"}},{"html_id":"karma_counts:Hash(Karma,Int32)-instance-method","name":"karma_counts","doc":"Returns a hash of `Karma` to `Int32 , containing the total number of karma given or lost, and daily, weekly, and monthly totals","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/Statistics/Karma.html\">Karma</a></code> to `Int32 , containing the total number of karma given or lost, and daily, weekly, and monthly totals</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":163,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L163"},"def":{"name":"karma_counts","return_type":"Hash(Karma, Int32)","visibility":"Public","body":"totals = @connection.query_one(\"\\n        SELECT\\n          coalesce(sum(upvotes), 0) as total_upvotes,\\n          coalesce(sum(downvotes), 0) as total_downvotes,\\n          (select coalesce(sum(upvotes), 0) FROM message_stats WHERE date = date('now')) as upvotes_daily,\\n          (select coalesce(sum(upvotes), 0) FROM message_stats WHERE date = date('now','-1 day')) as upvotes_yesterday,\\n          (select coalesce(sum(upvotes), 0) FROM message_stats WHERE date > date('now','-7 days')) as upvotes_weekly,\\n          (select coalesce(sum(upvotes), 0) FROM message_stats WHERE date < date('now','-7 days') AND date > date('now','-14 days')) as upvotes_yesterweek,\\n          (select coalesce(sum(upvotes), 0) FROM message_stats WHERE date > date('now','-1 month')) as upvotes_monthly,\\n          (select coalesce(sum(upvotes), 0) FROM message_stats WHERE date < date('now','-1 month') AND date > date('now','-2 months')) as upvotes_yestermonth,\\n          (select coalesce(sum(downvotes), 0) FROM message_stats WHERE date = date('now')) as downvotes_daily,\\n          (select coalesce(sum(downvotes), 0) FROM message_stats WHERE date = date('now','-1 day')) as downvotes_yesterday,\\n          (select coalesce(sum(downvotes), 0) FROM message_stats WHERE date > date('now','-7 days')) as downvotes_weekly,\\n          (select coalesce(sum(downvotes), 0) FROM message_stats WHERE date <= date('now','-7 days') AND date > date('now','-14 days')) as downvotes_yesterweek,\\n          (select coalesce(sum(downvotes), 0) FROM message_stats WHERE date > date('now','-1 month')) as downvotes_monthly,\\n          (select coalesce(sum(downvotes), 0) FROM message_stats WHERE date <= date('now','-1 month') AND date > date('now','-2 months')) as downvotes_yestermonth\\n        FROM message_stats\", as: {Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32})\nHash.zip(Karma.values, totals.to_a)\n"}},{"html_id":"karma_level_count(start_value:Int32,end_value:Int32):Int32-instance-method","name":"karma_level_count","doc":"Returns an `Int32` total of users whose karma lie between *start_value* and *end_value*","summary":"<p>Returns an <code>Int32</code> total of users whose karma lie between <em>start_value</em> and <em>end_value</em></p>","abstract":false,"args":[{"name":"start_value","external_name":"start_value","restriction":"Int32"},{"name":"end_value","external_name":"end_value","restriction":"Int32"}],"args_string":"(start_value : Int32, end_value : Int32) : Int32","args_html":"(start_value : Int32, end_value : Int32) : Int32","location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":192,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L192"},"def":{"name":"karma_level_count","args":[{"name":"start_value","external_name":"start_value","restriction":"Int32"},{"name":"end_value","external_name":"end_value","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"@connection.query_one(\"\\n        SELECT count(id)\\n        FROM users\\n        WHERE karma >= ? AND karma < ?\", args: [start_value, end_value], as: Int32)"}},{"html_id":"message_counts:Hash(Messages,Int32)-instance-method","name":"message_counts","doc":"Returns a hash of `Messages` to `Int32`, containing the total number of message for each type and daily, weekly, and monthly totals","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/Statistics/Messages.html\">Messages</a></code> to <code>Int32</code>, containing the total number of message for each type and daily, weekly, and monthly totals</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":92,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L92"},"def":{"name":"message_counts","return_type":"Hash(Messages, Int32)","visibility":"Public","body":"totals = @connection.query_one(\"\\n        SELECT\\n          coalesce(sum(total_messages), 0) as total_messages,\\n          coalesce(sum(albums), 0) as albums,\\n          coalesce(sum(animations), 0) as animations,\\n          coalesce(sum(audio), 0) as audio,\\n          coalesce(sum(contacts), 0) as contacts,\\n          coalesce(sum(documents), 0) as documents,\\n          coalesce(sum(forwards), 0) as forwards,\\n          coalesce(sum(locations), 0) as locations,\\n          coalesce(sum(photos), 0) as photos,\\n          coalesce(sum(polls), 0) as polls,\\n          coalesce(sum(stickers), 0) as stickers,\\n          coalesce(sum(text), 0) as text,\\n          coalesce(sum(venues), 0) as venues,\\n          coalesce(sum(videos), 0) as videos,\\n          coalesce(sum(videonotes), 0) as videonotes,\\n          coalesce(sum(voice), 0) as voice,\\n          (select coalesce(sum(total_messages), 0) FROM message_stats WHERE date = date('now')) as messages_daily,\\n          (select coalesce(sum(total_messages), 0) FROM message_stats WHERE date = date('now','-1 day')) as messages_yesterday,\\n          (select coalesce(sum(total_messages), 0) FROM message_stats WHERE date > date('now','-7 days')) as messages_weekly,\\n          (select coalesce(sum(total_messages), 0) FROM message_stats WHERE date <= date('now','-7 days') AND date > date('now','-14 days')) as messages_yesterweek,\\n          (select coalesce(sum(total_messages), 0) FROM message_stats WHERE date > date('now','-1 month')) as messages_monthly,\\n          (select coalesce(sum(total_messages), 0) FROM message_stats WHERE date <= date('now','-1 month') AND date > date('now','-2 months')) as messages_yestermonth\\n        FROM message_stats\", as: {Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32})\nHash.zip(Messages.values, totals.to_a)\n"}},{"html_id":"robot9000_counts:Hash(Robot9000,Int32)-instance-method","name":"robot9000_counts","doc":"Returns a hash of `Robot9000` to `Int32`, containing the total number of unique and unoriginal messages for texts and media types","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/Statistics/Robot9000.html\">Robot9000</a></code> to <code>Int32</code>, containing the total number of unique and unoriginal messages for texts and media types</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":203,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L203"},"def":{"name":"robot9000_counts","return_type":"Hash(Robot9000, Int32)","visibility":"Public","body":"totals = @connection.query_one(\"\\n        SELECT\\n          (SELECT count(id) FROM (SELECT * FROM file_id UNION SELECT * FROM text)) as total_unique,\\n          (SELECT count(line) FROM text) as unique_text,\\n          (SELECT count(id) FROM file_id) as unique_media,\\n          (SELECT coalesce(sum(unoriginal_text + unoriginal_media), 0) FROM message_stats) as total_unoriginal,\\n          (SELECT coalesce(sum(unoriginal_text), 0) FROM message_stats) as unoriginal_text,\\n          (SELECT coalesce(sum(unoriginal_media), 0) FROM message_stats) as unoriginal_media\", as: {Int32, Int32, Int32, Int32, Int32, Int32})\nHash.zip(Robot9000.values, totals.to_a)\n"}},{"html_id":"start_date:String-instance-method","name":"start_date","doc":"Returns a `String` containing the date at which the statistics module was initialized","summary":"<p>Returns a <code>String</code> containing the date at which the statistics module was initialized</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":25,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L25"},"def":{"name":"start_date","return_type":"String","visibility":"Public","body":"@connection.query_one(\"\\n        SELECT value\\n        FROM system_config\\n        WHERE name = 'start_date'\", as: String)"}},{"html_id":"user_counts:Hash(Users,Int32)-instance-method","name":"user_counts","doc":"Returns a hash of `Users` to `Int32`, containing the total number of each kind of user and daily, weekly, and monthly totals","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/Statistics/Users.html\">Users</a></code> to <code>Int32</code>, containing the total number of each kind of user and daily, weekly, and monthly totals</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/sqlite_statistics.cr","line_number":131,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/sqlite_statistics.cr#L131"},"def":{"name":"user_counts","return_type":"Hash(Users, Int32)","visibility":"Public","body":"totals = @connection.query_one(\"\\n        SELECT\\n          count(id) as total_users,\\n          (SELECT count(id) FROM users WHERE left IS null) as total_joined,\\n          count(left) as total_left,\\n          (SELECT count(id) FROM users WHERE rank = -10) as total_blacklisted,\\n          (SELECT count(id) FROM users WHERE date(joined) = date('now')) as joined_daily,\\n          (SELECT count(id) FROM users WHERE date(joined) = date('now','-1 day')) as joined_yesterday,\\n          (select count(id) FROM users WHERE date(joined) > date('now','-7 days')) as joined_weekly,\\n          (select count(id) FROM users WHERE date(joined) < date('now','-7 days') AND date(joined) > date('now','-14 days')) as joined_yesterweek,\\n          (select count(id) FROM users WHERE date(joined) > date('now','-1 month')) as joined_monthly,\\n          (select count(id) FROM users WHERE date(joined) < date('now','-1 month') AND date(joined) > date('now','-2 months')) as joined_yestermonth,\\n          (SELECT count(id) FROM users WHERE date(left) = date('now')) as left_daily,\\n          (SELECT count(id) FROM users WHERE date(left) = date('now','-1 day')) as left_yesterday,\\n          (select count(id) FROM users WHERE date(left) > date('now','-7 days')) as left_weekly,\\n          (select count(id) FROM users WHERE date(left) <= date('now','-7 days') AND date(left) > date('now','-14 days')) as left_yesterweek,\\n          (select count(id) FROM users WHERE date(left) > date('now','-1 month')) as left_monthly,\\n          (select count(id) FROM users WHERE date(left) <= date('now','-1 month') AND date(left) > date('now','-2 months')) as left_yestermonth\\n        FROM users\", as: {Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32})\nHash.zip(Users.values, totals.to_a)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/SQLiteUser","path":"PrivateParlorXT/SQLiteUser.html","kind":"class","full_name":"PrivateParlorXT::SQLiteUser","name":"SQLiteUser","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/User","kind":"class","full_name":"PrivateParlorXT::User","name":"User"},"ancestors":[{"html_id":"private-parlor-xt/DB/Mappable","kind":"module","full_name":"DB::Mappable","name":"Mappable"},{"html_id":"private-parlor-xt/PrivateParlorXT/User","kind":"class","full_name":"PrivateParlorXT::User","name":"User"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/DB/Mappable","kind":"module","full_name":"DB::Mappable","name":"Mappable"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"An implementation of `User` for the the `SQLiteDatabase`","summary":"<p>An implementation of <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> for the the <code><a href=\"../PrivateParlorXT/SQLiteDatabase.html\">SQLiteDatabase</a></code></p>","class_methods":[{"html_id":"from_rs(__temp_87:DB::ResultSet)-class-method","name":"from_rs","abstract":false,"args":[{"name":"__temp_87","external_name":"__temp_87","restriction":"::DB::ResultSet"}],"args_string":"(__temp_87 : DB::ResultSet)","args_html":"(__temp_87 : DB::ResultSet)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"from_rs","args":[{"name":"__temp_87","external_name":"__temp_87","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"begin\n  __temp_88 = Array(self).new\n  __temp_87.each do\n    __temp_88 << (self.new(__temp_87))\n  end\n  __temp_88\nensure\n  __temp_87.close\nend"}}],"constructors":[{"html_id":"new(__temp_87:DB::ResultSet)-class-method","name":"new","abstract":false,"args":[{"name":"__temp_87","external_name":"__temp_87","restriction":"::DB::ResultSet"}],"args_string":"(__temp_87 : DB::ResultSet)","args_html":"(__temp_87 : DB::ResultSet)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"new","args":[{"name":"__temp_87","external_name":"__temp_87","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"_ = allocate\n_.initialize(__temp_87)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(id:Int64,username:String|Nil=nil,realname:String=\"\",rank:Int32=0,joined:Time=Time.utc,left:Time|Nil=nil,last_active:Time=Time.utc,cooldown_until:Time|Nil=nil,blacklist_reason:String|Nil=nil,warnings:Int32=0,warn_expiry:Time|Nil=nil,karma:Int32=0,hide_karma:Bool|Nil=false,debug_enabled:Bool|Nil=false,tripcode:String|Nil=nil)-class-method","name":"new","doc":"Creates an instance of `SQLiteUser`.\n\n## Arguments:\n\n`id`\n:     unique `UserID` identifier for this user\n\n`username`\n:     username of this user; can be `nil`\n\n`realname`\n:     full name (first name + last name) of the user\n\n`rank`\n:     rank of this user, corresponding to either -10 (blacklisted) or one of the configurable ranks\n\n`joined`\n:     date and time the user joined the chat\n\n`left`\n:     date and time the user left the chat; if `nil`, the user is still in the chat\n\n`last_active`\n:     date and time the user last sent a message or used a command\n\n`cooldown_until`\n:     date and time for until which the user cannot send messages; if `nil`, the user is not in cooldown\n\n`blacklist_reason`\n:     described reason for blacklisting the user (see`BlacklistCommand`) ; set to `nil` by default\n\n`warnings`\n:     number of warnings the user received from `WarnCommand` or `DeleteCommand`; cooldown times are based off of this value\n\n`warn_expiry`\n:     date and time in which one of the `warnings` will be removed; if `nil`, user has no `warnings` to remove\n\n`karma`\n:     points the user acquired from upvotes, or lost from downvotes and warnings (see `UpvoteHandler`, `DownvoteHandler`)\n\n`hide_karma`\n:     toggle for receiving karma notifications (see `ToggleKarmaCommand`); if `true`, the user will not receive karma notifications\n\n`debug_enabled`\n:     toggle for debug mode (see `ToggleDebugCommand`); if `true`, the user will receive a copy of their sent message that everyone else received\n\n`tripcode`\n:     a name and password pairing used for generating pseudononyms attached to the user's message; if nil, user has no tripcode","summary":"<p>Creates an instance of <code><a href=\"../PrivateParlorXT/SQLiteUser.html\">SQLiteUser</a></code>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Int64"},{"name":"username","default_value":"nil","external_name":"username","restriction":"String | ::Nil"},{"name":"realname","default_value":"\"\"","external_name":"realname","restriction":"String"},{"name":"rank","default_value":"0","external_name":"rank","restriction":"Int32"},{"name":"joined","default_value":"Time.utc","external_name":"joined","restriction":"Time"},{"name":"left","default_value":"nil","external_name":"left","restriction":"Time | ::Nil"},{"name":"last_active","default_value":"Time.utc","external_name":"last_active","restriction":"Time"},{"name":"cooldown_until","default_value":"nil","external_name":"cooldown_until","restriction":"Time | ::Nil"},{"name":"blacklist_reason","default_value":"nil","external_name":"blacklist_reason","restriction":"String | ::Nil"},{"name":"warnings","default_value":"0","external_name":"warnings","restriction":"Int32"},{"name":"warn_expiry","default_value":"nil","external_name":"warn_expiry","restriction":"Time | ::Nil"},{"name":"karma","default_value":"0","external_name":"karma","restriction":"Int32"},{"name":"hide_karma","default_value":"false","external_name":"hide_karma","restriction":"Bool | ::Nil"},{"name":"debug_enabled","default_value":"false","external_name":"debug_enabled","restriction":"Bool | ::Nil"},{"name":"tripcode","default_value":"nil","external_name":"tripcode","restriction":"String | ::Nil"}],"args_string":"(id : Int64, username : String | Nil = nil, realname : String = \"\", rank : Int32 = 0, joined : Time = Time.utc, left : Time | Nil = nil, last_active : Time = Time.utc, cooldown_until : Time | Nil = nil, blacklist_reason : String | Nil = nil, warnings : Int32 = 0, warn_expiry : Time | Nil = nil, karma : Int32 = 0, hide_karma : Bool | Nil = false, debug_enabled : Bool | Nil = false, tripcode : String | Nil = nil)","args_html":"(id : Int64, username : String | Nil = <span class=\"n\">nil</span>, realname : String = <span class=\"s\">&quot;&quot;</span>, rank : Int32 = <span class=\"n\">0</span>, joined : Time = <span class=\"t\">Time</span>.utc, left : Time | Nil = <span class=\"n\">nil</span>, last_active : Time = <span class=\"t\">Time</span>.utc, cooldown_until : Time | Nil = <span class=\"n\">nil</span>, blacklist_reason : String | Nil = <span class=\"n\">nil</span>, warnings : Int32 = <span class=\"n\">0</span>, warn_expiry : Time | Nil = <span class=\"n\">nil</span>, karma : Int32 = <span class=\"n\">0</span>, hide_karma : Bool | Nil = <span class=\"n\">false</span>, debug_enabled : Bool | Nil = <span class=\"n\">false</span>, tripcode : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":119,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L119"},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"Int64"},{"name":"username","default_value":"nil","external_name":"username","restriction":"String | ::Nil"},{"name":"realname","default_value":"\"\"","external_name":"realname","restriction":"String"},{"name":"rank","default_value":"0","external_name":"rank","restriction":"Int32"},{"name":"joined","default_value":"Time.utc","external_name":"joined","restriction":"Time"},{"name":"left","default_value":"nil","external_name":"left","restriction":"Time | ::Nil"},{"name":"last_active","default_value":"Time.utc","external_name":"last_active","restriction":"Time"},{"name":"cooldown_until","default_value":"nil","external_name":"cooldown_until","restriction":"Time | ::Nil"},{"name":"blacklist_reason","default_value":"nil","external_name":"blacklist_reason","restriction":"String | ::Nil"},{"name":"warnings","default_value":"0","external_name":"warnings","restriction":"Int32"},{"name":"warn_expiry","default_value":"nil","external_name":"warn_expiry","restriction":"Time | ::Nil"},{"name":"karma","default_value":"0","external_name":"karma","restriction":"Int32"},{"name":"hide_karma","default_value":"false","external_name":"hide_karma","restriction":"Bool | ::Nil"},{"name":"debug_enabled","default_value":"false","external_name":"debug_enabled","restriction":"Bool | ::Nil"},{"name":"tripcode","default_value":"nil","external_name":"tripcode","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, username, realname, rank, joined, left, last_active, cooldown_until, blacklist_reason, warnings, warn_expiry, karma, hide_karma, debug_enabled, tripcode)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"blacklist_reason:String?-instance-method","name":"blacklist_reason","doc":"Returns the reason why the user was blacklisted, or `nil` if a reason does not exist","summary":"<p>Returns the reason why the user was blacklisted, or <code>nil</code> if a reason does not exist</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"blacklist_reason","visibility":"Public","body":"@blacklist_reason"}},{"html_id":"blacklist_reason=(_blacklist_reason:Union(String,Nil)|Nil)-instance-method","name":"blacklist_reason=","abstract":false,"args":[{"name":"_blacklist_reason","external_name":"_blacklist_reason","restriction":"::Union(String, ::Nil) | ::Nil"}],"args_string":"(_blacklist_reason : Union(String, Nil) | Nil)","args_html":"(_blacklist_reason : Union(String, Nil) | Nil)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"blacklist_reason=","args":[{"name":"_blacklist_reason","external_name":"_blacklist_reason","restriction":"::Union(String, ::Nil) | ::Nil"}],"visibility":"Public","body":"@blacklist_reason = _blacklist_reason"}},{"html_id":"cooldown_until:Time?-instance-method","name":"cooldown_until","doc":"Returns the `Time` until which the user is in cooldown, or `nil` if the user is not cooldowned","summary":"<p>Returns the <code>Time</code> until which the user is in cooldown, or <code>nil</code> if the user is not cooldowned</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"cooldown_until","visibility":"Public","body":"@cooldown_until"}},{"html_id":"cooldown_until=(_cooldown_until:Union(Time,Nil)|Nil)-instance-method","name":"cooldown_until=","abstract":false,"args":[{"name":"_cooldown_until","external_name":"_cooldown_until","restriction":"::Union(Time, ::Nil) | ::Nil"}],"args_string":"(_cooldown_until : Union(Time, Nil) | Nil)","args_html":"(_cooldown_until : Union(Time, Nil) | Nil)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"cooldown_until=","args":[{"name":"_cooldown_until","external_name":"_cooldown_until","restriction":"::Union(Time, ::Nil) | ::Nil"}],"visibility":"Public","body":"@cooldown_until = _cooldown_until"}},{"html_id":"debug_enabled:Bool?-instance-method","name":"debug_enabled","doc":"Returns true if the suer has debug mode enabled, `false` otherwise","summary":"<p>Returns true if the suer has debug mode enabled, <code>false</code> otherwise</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"debug_enabled","visibility":"Public","body":"@debug_enabled"}},{"html_id":"debug_enabled=(_debug_enabled:Union(Bool,Nil)|Nil)-instance-method","name":"debug_enabled=","abstract":false,"args":[{"name":"_debug_enabled","external_name":"_debug_enabled","restriction":"::Union(Bool, ::Nil) | ::Nil"}],"args_string":"(_debug_enabled : Union(Bool, Nil) | Nil)","args_html":"(_debug_enabled : Union(Bool, Nil) | Nil)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"debug_enabled=","args":[{"name":"_debug_enabled","external_name":"_debug_enabled","restriction":"::Union(Bool, ::Nil) | ::Nil"}],"visibility":"Public","body":"@debug_enabled = _debug_enabled"}},{"html_id":"hide_karma:Bool?-instance-method","name":"hide_karma","doc":"Returns true if the user has karma notifications disabled, `false` otherwise","summary":"<p>Returns true if the user has karma notifications disabled, <code>false</code> otherwise</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"hide_karma","visibility":"Public","body":"@hide_karma"}},{"html_id":"hide_karma=(_hide_karma:Union(Bool,Nil)|Nil)-instance-method","name":"hide_karma=","abstract":false,"args":[{"name":"_hide_karma","external_name":"_hide_karma","restriction":"::Union(Bool, ::Nil) | ::Nil"}],"args_string":"(_hide_karma : Union(Bool, Nil) | Nil)","args_html":"(_hide_karma : Union(Bool, Nil) | Nil)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"hide_karma=","args":[{"name":"_hide_karma","external_name":"_hide_karma","restriction":"::Union(Bool, ::Nil) | ::Nil"}],"visibility":"Public","body":"@hide_karma = _hide_karma"}},{"html_id":"id:Int64-instance-method","name":"id","doc":"Returns the user's ID","summary":"<p>Returns the user's ID</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"id","visibility":"Public","body":"@id"}},{"html_id":"id=(_id:UserID)-instance-method","name":"id=","abstract":false,"args":[{"name":"_id","external_name":"_id","restriction":"UserID"}],"args_string":"(_id : UserID)","args_html":"(_id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"id=","args":[{"name":"_id","external_name":"_id","restriction":"UserID"}],"visibility":"Public","body":"@id = _id"}},{"html_id":"joined:Time-instance-method","name":"joined","doc":"Returns the `Time` the user joined the chat","summary":"<p>Returns the <code>Time</code> the user joined the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"joined","visibility":"Public","body":"@joined"}},{"html_id":"joined=(_joined:Time)-instance-method","name":"joined=","abstract":false,"args":[{"name":"_joined","external_name":"_joined","restriction":"Time"}],"args_string":"(_joined : Time)","args_html":"(_joined : Time)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"joined=","args":[{"name":"_joined","external_name":"_joined","restriction":"Time"}],"visibility":"Public","body":"@joined = _joined"}},{"html_id":"karma:Int32-instance-method","name":"karma","doc":"Returns the user's current amount of karma","summary":"<p>Returns the user's current amount of karma</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"karma","visibility":"Public","body":"@karma"}},{"html_id":"karma=(_karma:Int32)-instance-method","name":"karma=","abstract":false,"args":[{"name":"_karma","external_name":"_karma","restriction":"Int32"}],"args_string":"(_karma : Int32)","args_html":"(_karma : Int32)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"karma=","args":[{"name":"_karma","external_name":"_karma","restriction":"Int32"}],"visibility":"Public","body":"@karma = _karma"}},{"html_id":"last_active:Time-instance-method","name":"last_active","doc":"Returns the `Time` the user was last active (i.e., the last time a message was sent or a command was used)","summary":"<p>Returns the <code>Time</code> the user was last active (i.e., the last time a message was sent or a command was used)</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"last_active","visibility":"Public","body":"@last_active"}},{"html_id":"last_active=(_last_active:Time)-instance-method","name":"last_active=","abstract":false,"args":[{"name":"_last_active","external_name":"_last_active","restriction":"Time"}],"args_string":"(_last_active : Time)","args_html":"(_last_active : Time)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"last_active=","args":[{"name":"_last_active","external_name":"_last_active","restriction":"Time"}],"visibility":"Public","body":"@last_active = _last_active"}},{"html_id":"left:Time?-instance-method","name":"left","doc":"Returns the `Time` the user left the chat, or `nil` if the user has not left","summary":"<p>Returns the <code>Time</code> the user left the chat, or <code>nil</code> if the user has not left</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"left","visibility":"Public","body":"@left"}},{"html_id":"left=(_left:Union(Time,Nil)|Nil)-instance-method","name":"left=","abstract":false,"args":[{"name":"_left","external_name":"_left","restriction":"::Union(Time, ::Nil) | ::Nil"}],"args_string":"(_left : Union(Time, Nil) | Nil)","args_html":"(_left : Union(Time, Nil) | Nil)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"left=","args":[{"name":"_left","external_name":"_left","restriction":"::Union(Time, ::Nil) | ::Nil"}],"visibility":"Public","body":"@left = _left"}},{"html_id":"rank:Int32-instance-method","name":"rank","doc":"Returns the user's current rank value","summary":"<p>Returns the user's current rank value</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"rank","visibility":"Public","body":"@rank"}},{"html_id":"rank=(_rank:Int32)-instance-method","name":"rank=","abstract":false,"args":[{"name":"_rank","external_name":"_rank","restriction":"Int32"}],"args_string":"(_rank : Int32)","args_html":"(_rank : Int32)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"rank=","args":[{"name":"_rank","external_name":"_rank","restriction":"Int32"}],"visibility":"Public","body":"@rank = _rank"}},{"html_id":"realname:String-instance-method","name":"realname","doc":"Returns the user's full name","summary":"<p>Returns the user's full name</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"realname","visibility":"Public","body":"@realname"}},{"html_id":"realname=(_realname:String)-instance-method","name":"realname=","abstract":false,"args":[{"name":"_realname","external_name":"_realname","restriction":"String"}],"args_string":"(_realname : String)","args_html":"(_realname : String)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"realname=","args":[{"name":"_realname","external_name":"_realname","restriction":"String"}],"visibility":"Public","body":"@realname = _realname"}},{"html_id":"tripcode:String?-instance-method","name":"tripcode","doc":"Returns a `String` containing the user's tripcode name and password for generating tripcodes, or `nil` if the user has no tripcode set","summary":"<p>Returns a <code>String</code> containing the user's tripcode name and password for generating tripcodes, or <code>nil</code> if the user has no tripcode set</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"tripcode","visibility":"Public","body":"@tripcode"}},{"html_id":"tripcode=(_tripcode:Union(String,Nil)|Nil)-instance-method","name":"tripcode=","abstract":false,"args":[{"name":"_tripcode","external_name":"_tripcode","restriction":"::Union(String, ::Nil) | ::Nil"}],"args_string":"(_tripcode : Union(String, Nil) | Nil)","args_html":"(_tripcode : Union(String, Nil) | Nil)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"tripcode=","args":[{"name":"_tripcode","external_name":"_tripcode","restriction":"::Union(String, ::Nil) | ::Nil"}],"visibility":"Public","body":"@tripcode = _tripcode"}},{"html_id":"username:String?-instance-method","name":"username","doc":"Returns the user's unformatted username, or `nil` if it does not exist","summary":"<p>Returns the user's unformatted username, or <code>nil</code> if it does not exist</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"username","visibility":"Public","body":"@username"}},{"html_id":"username=(_username:Union(String,Nil)|Nil)-instance-method","name":"username=","abstract":false,"args":[{"name":"_username","external_name":"_username","restriction":"::Union(String, ::Nil) | ::Nil"}],"args_string":"(_username : Union(String, Nil) | Nil)","args_html":"(_username : Union(String, Nil) | Nil)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"username=","args":[{"name":"_username","external_name":"_username","restriction":"::Union(String, ::Nil) | ::Nil"}],"visibility":"Public","body":"@username = _username"}},{"html_id":"warn_expiry:Time?-instance-method","name":"warn_expiry","doc":"Returns the `Time` when one of the `warnings` will expire, or `nil` if such a time does not exit","summary":"<p>Returns the <code>Time</code> when one of the <code><a href=\"../PrivateParlorXT/SQLiteUser.html#warnings%3AInt32-instance-method\">#warnings</a></code> will expire, or <code>nil</code> if such a time does not exit</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"warn_expiry","visibility":"Public","body":"@warn_expiry"}},{"html_id":"warn_expiry=(_warn_expiry:Union(Time,Nil)|Nil)-instance-method","name":"warn_expiry=","abstract":false,"args":[{"name":"_warn_expiry","external_name":"_warn_expiry","restriction":"::Union(Time, ::Nil) | ::Nil"}],"args_string":"(_warn_expiry : Union(Time, Nil) | Nil)","args_html":"(_warn_expiry : Union(Time, Nil) | Nil)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"warn_expiry=","args":[{"name":"_warn_expiry","external_name":"_warn_expiry","restriction":"::Union(Time, ::Nil) | ::Nil"}],"visibility":"Public","body":"@warn_expiry = _warn_expiry"}},{"html_id":"warnings:Int32-instance-method","name":"warnings","doc":"Returns the number of warnings the user has","summary":"<p>Returns the number of warnings the user has</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"warnings","visibility":"Public","body":"@warnings"}},{"html_id":"warnings=(_warnings:Int32)-instance-method","name":"warnings=","abstract":false,"args":[{"name":"_warnings","external_name":"_warnings","restriction":"Int32"}],"args_string":"(_warnings : Int32)","args_html":"(_warnings : Int32)","location":{"filename":"src/private-parlor-xt/database/SQLite/sqlite_user.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/database/SQLite/sqlite_user.cr#L8"},"def":{"name":"warnings=","args":[{"name":"_warnings","external_name":"_warnings","restriction":"Int32"}],"visibility":"Public","body":"@warnings = _warnings"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/StartCommand","path":"PrivateParlorXT/StartCommand.html","kind":"class","full_name":"PrivateParlorXT::StartCommand","name":"StartCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/start_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/start_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to join the bot and start receiving messages","summary":"<p>A command used to join the bot and start receiving messages</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Adds the user from the given *message* to the bot if he is not in the database; rejoins users who have previously joined the chat.","summary":"<p>Adds the user from the given <em>message</em> to the bot if he is not in the database; rejoins users who have previously joined the chat.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/start_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/start_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if info = message.from\nelse\n  return\nend\nif text = message.text || message.caption\n  if text.starts_with?('/')\n  else\n    return\n  end\nend\nif user = services.database.get_user(info.id.to_i64)\n  existing_user(user, info.username, info.full_name, message.message_id.to_i64, services)\nelse\n  new_user(info.id.to_i64, info.username, info.full_name, message.message_id.to_i64, services)\nend\n"}},{"html_id":"existing_user(user:User,username:String|Nil,fullname:String,message_id:MessageID,services:Services):Nil-instance-method","name":"existing_user","doc":"Handles users attempting to rejoin if they are already in the database","summary":"<p>Handles users attempting to rejoin if they are already in the database</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"username","external_name":"username","restriction":"String | ::Nil"},{"name":"fullname","external_name":"fullname","restriction":"String"},{"name":"message_id","external_name":"message_id","restriction":"MessageID"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, username : String | Nil, fullname : String, message_id : MessageID, services : Services) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, username : String | Nil, fullname : String, message_id : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/start_command.cr","line_number":24,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/start_command.cr#L24"},"def":{"name":"existing_user","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"username","external_name":"username","restriction":"String | ::Nil"},{"name":"fullname","external_name":"fullname","restriction":"String"},{"name":"message_id","external_name":"message_id","restriction":"MessageID"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user.blacklisted?\n  response = Format.substitute_reply(services.replies.blacklisted, {\"contact\" => Format.contact(services.config.blacklist_contact, services.replies), \"reason\" => Format.reason(user.blacklist_reason, services.replies)})\n  services.relay.send_to_user(nil, user.id, response)\nelse\n  if user.left?\n    user.rejoin\n    user.update_names(username, fullname)\n    user.set_active\n    services.database.update_user(user)\n    services.relay.send_to_user(ReplyParameters.new(message_id), user.id, services.replies.rejoined)\n    log = Format.substitute_message(services.logs.rejoined, {\"id\" => user.id.to_s, \"name\" => user.formatted_name})\n    services.relay.log_output(log)\n  else\n    user.update_names(username, fullname)\n    user.set_active\n    services.database.update_user(user)\n    services.relay.send_to_user(ReplyParameters.new(message_id), user.id, services.replies.already_in_chat)\n  end\nend"}},{"html_id":"new_user(id:UserID,username:String|Nil,fullname:String,message_id:MessageID,services:Services):Nil-instance-method","name":"new_user","doc":"Adds the user with the given *id* to the database if registration is open.","summary":"<p>Adds the user with the given <em>id</em> to the database if registration is open.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"UserID"},{"name":"username","external_name":"username","restriction":"String | ::Nil"},{"name":"fullname","external_name":"fullname","restriction":"String"},{"name":"message_id","external_name":"message_id","restriction":"MessageID"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(id : UserID, username : String | Nil, fullname : String, message_id : MessageID, services : Services) : Nil","args_html":"(id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, username : String | Nil, fullname : String, message_id : <a href=\"../PrivateParlorXT/MessageID.html\">MessageID</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/start_command.cr","line_number":53,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/start_command.cr#L53"},"def":{"name":"new_user","args":[{"name":"id","external_name":"id","restriction":"UserID"},{"name":"username","external_name":"username","restriction":"String | ::Nil"},{"name":"fullname","external_name":"fullname","restriction":"String"},{"name":"message_id","external_name":"message_id","restriction":"MessageID"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if services.config.registration_open\nelse\n  return services.relay.send_to_user(nil, id, services.replies.registration_closed)\nend\nif services.database.no_users?\n  user = services.database.add_user(id, username, fullname, services.access.max_rank)\nelse\n  user = services.database.add_user(id, username, fullname, services.config.default_rank)\nend\nif motd = services.database.motd\n  services.relay.send_to_user(nil, id, motd)\nend\nif services.config.pseudonymous\n  services.relay.send_to_user(ReplyParameters.new(message_id), id, services.replies.joined_pseudonym)\nelse\n  services.relay.send_to_user(ReplyParameters.new(message_id), id, services.replies.joined)\nend\nlog = Format.substitute_message(services.logs.joined, {\"id\" => id.to_s, \"name\" => user.formatted_name})\nservices.relay.log_output(log)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics","path":"PrivateParlorXT/Statistics.html","kind":"class","full_name":"PrivateParlorXT::Statistics","name":"Statistics","abstract":true,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L3"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"private-parlor-xt/PrivateParlorXT/SQLiteStatistics","kind":"class","full_name":"PrivateParlorXT::SQLiteStatistics","name":"SQLiteStatistics"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A base class statistics module used for calculating and recording data about messages and users","summary":"<p>A base class statistics module used for calculating and recording data about messages and users</p>","instance_methods":[{"html_id":"config_screen(services:Services):String-instance-method","name":"config_screen","doc":"Returns a formatted `String` containing information about the bot and its toggles","summary":"<p>Returns a formatted <code>String</code> containing information about the bot and its toggles</p>","abstract":false,"args":[{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(services : Services) : String","args_html":"(services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":212,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L212"},"def":{"name":"config_screen","args":[{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"start_date = start_date()\nuptime = uptime()\nconfiguration = configuration_details(services)\nFormat.substitute_reply(services.replies.config_stats, {\"start_date\" => start_date.to_s, \"days\" => uptime.days.to_s, \"hours\" => uptime.hours.to_s, \"minutes\" => uptime.minutes.to_s, \"seconds\" => uptime.seconds.to_s, \"registration_toggle\" => configuration[BotInfo::RegistrationToggle], \"media_limit_period\" => configuration[BotInfo::MediaLimitPeriod], \"message_lifespan\" => configuration[BotInfo::MessageLifespan], \"pseudonymous_toggle\" => configuration[BotInfo::PseudonymousToggle], \"spoilers_toggle\" => configuration[BotInfo::SpoilerToggle], \"karma_reasons_toggle\" => configuration[BotInfo::KarmaReasonsToggle], \"robot9000_toggle\" => configuration[BotInfo::Robot9000Toggle], \"karma_economy_toggle\" => configuration[BotInfo::KarmaEconomyToggle]})\n"}},{"html_id":"configuration_details(services:Services):Hash(BotInfo,String)-instance-method","name":"configuration_details","doc":"Returns a hash of `BotInfo` to `String`, containing information about configuration data and toggles","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/Statistics/BotInfo.html\">BotInfo</a></code> to <code>String</code>, containing information about configuration data and toggles</p>","abstract":false,"args":[{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(services : Services) : Hash(BotInfo, String)","args_html":"(services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Hash(<a href=\"../PrivateParlorXT/Statistics/BotInfo.html\">BotInfo</a>, String)","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":131,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L131"},"def":{"name":"configuration_details","args":[{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Hash(BotInfo, String)","visibility":"Public","body":"{BotInfo::RegistrationToggle => services.config.registration_open ? services.locale.toggle[1] : services.locale.toggle[0], BotInfo::MediaLimitPeriod => Format.time_span(services.config.media_limit_period, services.locale), BotInfo::MessageLifespan => services.history.lifespan.zero? ? services.locale.toggle[0] : Format.time_span(services.history.lifespan, services.locale), BotInfo::PseudonymousToggle => services.config.pseudonymous ? services.locale.toggle[1] : services.locale.toggle[0], BotInfo::SpoilerToggle => services.config.allow_spoilers ? services.locale.toggle[1] : services.locale.toggle[0], BotInfo::KarmaReasonsToggle => services.config.karma_reasons ? services.locale.toggle[1] : services.locale.toggle[0], BotInfo::Robot9000Toggle => services.robot9000.nil? ? services.locale.toggle[0] : services.locale.toggle[1], BotInfo::KarmaEconomyToggle => services.karma.nil? ? services.locale.toggle[0] : services.locale.toggle[1]}"}},{"html_id":"full_users_screen(services:Services):String-instance-method","name":"full_users_screen","doc":"Returns a formatted `String` containing user counts","summary":"<p>Returns a formatted <code>String</code> containing user counts</p>","abstract":false,"args":[{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(services : Services) : String","args_html":"(services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":283,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L283"},"def":{"name":"full_users_screen","args":[{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"totals = user_counts\njoined_daily_change = percent_change(totals[Users::JoinedYesterday], totals[Users::JoinedDaily])\njoined_weekly_change = percent_change(totals[Users::JoinedYesterweek], totals[Users::JoinedWeekly])\njoined_monthly_change = percent_change(totals[Users::JoinedYestermonth], totals[Users::JoinedMonthly])\nleft_daily_change = percent_change(totals[Users::LeftYesterday], totals[Users::LeftDaily])\nleft_weekly_change = percent_change(totals[Users::LeftYesterweek], totals[Users::LeftWeekly])\nleft_monthly_change = percent_change(totals[Users::LeftYestermonth], totals[Users::LeftMonthly])\nnet_daily = totals[Users::JoinedDaily] - totals[Users::LeftDaily]\nnet_weekly = totals[Users::JoinedWeekly] - totals[Users::LeftWeekly]\nnet_monthly = totals[Users::JoinedMonthly] - totals[Users::LeftMonthly]\nFormat.substitute_reply(services.replies.full_user_stats, {\"total_users\" => totals[Users::TotalUsers].to_s, \"joined_users\" => totals[Users::TotalJoined].to_s, \"left_users\" => totals[Users::TotalLeft].to_s, \"blacklisted_users\" => totals[Users::TotalBlacklisted].to_s, \"joined_daily_total\" => totals[Users::JoinedDaily].to_s, \"joined_weekly_total\" => totals[Users::JoinedWeekly].to_s, \"joined_monthly_total\" => totals[Users::JoinedMonthly].to_s, \"joined_daily_change\" => joined_daily_change.format(decimal_places: 1, only_significant: true), \"joined_weekly_change\" => joined_weekly_change.format(decimal_places: 1, only_significant: true), \"joined_monthly_change\" => joined_monthly_change.format(decimal_places: 1, only_significant: true), \"joined_change_today\" => joined_daily_change.positive? ? services.locale.change[1] : services.locale.change[0], \"joined_change_this_week\" => joined_weekly_change.positive? ? services.locale.change[1] : services.locale.change[0], \"joined_change_this_month\" => joined_monthly_change.positive? ? services.locale.change[1] : services.locale.change[0], \"left_daily_total\" => totals[Users::LeftDaily].to_s, \"left_weekly_total\" => totals[Users::LeftWeekly].to_s, \"left_monthly_total\" => totals[Users::LeftMonthly].to_s, \"left_daily_change\" => left_daily_change.format(decimal_places: 1, only_significant: true), \"left_weekly_change\" => left_weekly_change.format(decimal_places: 1, only_significant: true), \"left_monthly_change\" => left_monthly_change.format(decimal_places: 1, only_significant: true), \"left_change_today\" => left_daily_change.positive? ? services.locale.change[1] : services.locale.change[0], \"left_change_this_week\" => left_weekly_change.positive? ? services.locale.change[1] : services.locale.change[0], \"left_change_this_month\" => left_monthly_change.positive? ? services.locale.change[1] : services.locale.change[0], \"net_daily\" => net_daily.to_s, \"net_weekly\" => net_weekly.to_s, \"net_monthly\" => net_monthly.to_s})\n"}},{"html_id":"increment_downvotes:Nil-instance-method","name":"increment_downvotes","doc":"Increment the number of downvotes given","summary":"<p>Increment the number of downvotes given</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":122,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L122"},"def":{"name":"increment_downvotes","return_type":"Nil","visibility":"Public","body":""}},{"html_id":"increment_messages(type:Messages):Nil-instance-method","name":"increment_messages","doc":"Increment the message count according to the given *type* and increment the total number of messages in general","summary":"<p>Increment the message count according to the given <em>type</em> and increment the total number of messages in general</p>","abstract":true,"args":[{"name":"type","external_name":"type","restriction":"Messages"}],"args_string":"(type : Messages) : Nil","args_html":"(type : <a href=\"../PrivateParlorXT/Statistics/Messages.html\">Messages</a>) : Nil","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":116,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L116"},"def":{"name":"increment_messages","args":[{"name":"type","external_name":"type","restriction":"Messages"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"increment_unoriginal_media:Nil-instance-method","name":"increment_unoriginal_media","doc":"Increment the number of unoriginal media messages encountered","summary":"<p>Increment the number of unoriginal media messages encountered</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":128,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L128"},"def":{"name":"increment_unoriginal_media","return_type":"Nil","visibility":"Public","body":""}},{"html_id":"increment_unoriginal_text:Nil-instance-method","name":"increment_unoriginal_text","doc":"Increment the number of unoriginal text messages encountered","summary":"<p>Increment the number of unoriginal text messages encountered</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":125,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L125"},"def":{"name":"increment_unoriginal_text","return_type":"Nil","visibility":"Public","body":""}},{"html_id":"increment_upvotes:Nil-instance-method","name":"increment_upvotes","doc":"Increment the number of upvotes given","summary":"<p>Increment the number of upvotes given</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":119,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L119"},"def":{"name":"increment_upvotes","return_type":"Nil","visibility":"Public","body":""}},{"html_id":"karma_counts:Hash(Karma,Int32)-instance-method","name":"karma_counts","doc":"Returns a hash of `Karma` to `Int32 , containing the total number of karma given or lost, and daily, weekly, and monthly totals","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/Statistics/Karma.html\">Karma</a></code> to `Int32 , containing the total number of karma given or lost, and daily, weekly, and monthly totals</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":151,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L151"},"def":{"name":"karma_counts","return_type":"Hash(Karma, Int32)","visibility":"Public","body":""}},{"html_id":"karma_level_count(start_value:Int32,end_value:Int32):Int32-instance-method","name":"karma_level_count","doc":"Returns an `Int32` total of users whose karma lie between *start_value* and *end_value*","summary":"<p>Returns an <code>Int32</code> total of users whose karma lie between <em>start_value</em> and <em>end_value</em></p>","abstract":true,"args":[{"name":"start_value","external_name":"start_value","restriction":"Int32"},{"name":"end_value","external_name":"end_value","restriction":"Int32"}],"args_string":"(start_value : Int32, end_value : Int32) : Int32","args_html":"(start_value : Int32, end_value : Int32) : Int32","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":154,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L154"},"def":{"name":"karma_level_count","args":[{"name":"start_value","external_name":"start_value","restriction":"Int32"},{"name":"end_value","external_name":"end_value","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":""}},{"html_id":"karma_levels_screen(services:Services):String-instance-method","name":"karma_levels_screen","doc":"Returns a formatted `String` containing karma level counts","summary":"<p>Returns a formatted <code>String</code> containing karma level counts</p>","abstract":false,"args":[{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(services : Services) : String","args_html":"(services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":424,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L424"},"def":{"name":"karma_levels_screen","args":[{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"if services.config.karma_levels.empty?\n  return services.replies.no_stats_available\nend\nlevels = services.config.karma_levels\nkarma_records = \"\"\nlevels.each do |range, level|\n  count = karma_level_count(range.begin, range.end)\n  karma_records = karma_records + \"#{level}: #{count}\\n\"\nend\nFormat.substitute_reply(services.replies.karma_level_stats, {\"karma_levels\" => karma_records})\n"}},{"html_id":"karma_screen(services:Services):String-instance-method","name":"karma_screen","doc":"Returns a formatted `String` containing karma counts","summary":"<p>Returns a formatted <code>String</code> containing karma counts</p>","abstract":false,"args":[{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(services : Services) : String","args_html":"(services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":366,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L366"},"def":{"name":"karma_screen","args":[{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"totals = karma_counts\nupvotes_daily_change = percent_change(totals[Karma::UpvotesYesterday], totals[Karma::UpvotesDaily])\nupvotes_weekly_change = percent_change(totals[Karma::UpvotesYesterweek], totals[Karma::UpvotesWeekly])\nupvotes_monthly_change = percent_change(totals[Karma::UpvotesYestermonth], totals[Karma::UpvotesMonthly])\ndownvotes_daily_change = percent_change(totals[Karma::DownvotesYesterday], totals[Karma::DownvotesDaily])\ndownvotes_weekly_change = percent_change(totals[Karma::DownvotesYesterweek], totals[Karma::DownvotesWeekly])\ndownvotes_monthly_change = percent_change(totals[Karma::DownvotesYestermonth], totals[Karma::DownvotesMonthly])\nFormat.substitute_reply(services.replies.karma_stats, {\"upvotes\" => totals[Karma::TotalUpvotes].to_s, \"downvotes\" => totals[Karma::TotalDownvotes].to_s, \"upvote_daily_total\" => totals[Karma::UpvotesDaily].to_s, \"upvote_weekly_total\" => totals[Karma::UpvotesWeekly].to_s, \"upvote_monthly_total\" => totals[Karma::UpvotesMonthly].to_s, \"upvote_daily_change\" => upvotes_daily_change.format(decimal_places: 1, only_significant: true), \"upvote_weekly_change\" => upvotes_weekly_change.format(decimal_places: 1, only_significant: true), \"upvote_monthly_change\" => upvotes_monthly_change.format(decimal_places: 1, only_significant: true), \"upvote_change_today\" => upvotes_daily_change.positive? ? services.locale.change[1] : services.locale.change[0], \"upvote_change_this_week\" => upvotes_weekly_change.positive? ? services.locale.change[1] : services.locale.change[0], \"upvote_change_this_month\" => upvotes_monthly_change.positive? ? services.locale.change[1] : services.locale.change[0], \"downvote_daily_total\" => totals[Karma::DownvotesDaily].to_s, \"downvote_weekly_total\" => totals[Karma::DownvotesWeekly].to_s, \"downvote_monthly_total\" => totals[Karma::DownvotesMonthly].to_s, \"downvote_daily_change\" => downvotes_daily_change.format(decimal_places: 1, only_significant: true), \"downvote_weekly_change\" => downvotes_weekly_change.format(decimal_places: 1, only_significant: true), \"downvote_monthly_change\" => downvotes_monthly_change.format(decimal_places: 1, only_significant: true), \"downvote_change_today\" => downvotes_daily_change.positive? ? services.locale.change[1] : services.locale.change[0], \"downvote_change_this_week\" => downvotes_weekly_change.positive? ? services.locale.change[1] : services.locale.change[0], \"downvote_change_this_month\" => downvotes_monthly_change.positive? ? services.locale.change[1] : services.locale.change[0]})\n"}},{"html_id":"keyboard_markup(next_screen:StatScreens,services:Services):Tourmaline::InlineKeyboardMarkup-instance-method","name":"keyboard_markup","doc":"Returns the `Tourmaline::InlineKeyboardMarkup` for the given *next_screen*.\n\nKeyboard buttons are localized and displayed in rows of 3 buttons.","summary":"<p>Returns the <code>Tourmaline::InlineKeyboardMarkup</code> for the given <em>next_screen</em>.</p>","abstract":false,"args":[{"name":"next_screen","external_name":"next_screen","restriction":"StatScreens"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(next_screen : StatScreens, services : Services) : Tourmaline::InlineKeyboardMarkup","args_html":"(next_screen : <a href=\"../PrivateParlorXT/Statistics/StatScreens.html\">StatScreens</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Tourmaline::InlineKeyboardMarkup","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":182,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L182"},"def":{"name":"keyboard_markup","args":[{"name":"next_screen","external_name":"next_screen","restriction":"StatScreens"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Tourmaline::InlineKeyboardMarkup","visibility":"Public","body":"options = [StatScreens::General, StatScreens::Messages, StatScreens::Users, StatScreens::Karma]\nif services.config.karma_levels.empty?\nelse\n  options << StatScreens::KarmaLevels\nend\nif services.robot9000\n  options << StatScreens::Robot9000\nend\noptions.delete(next_screen)\nbuttons = [] of Tourmaline::InlineKeyboardButton\noptions.each do |screen|\n  buttons << (Tourmaline::InlineKeyboardButton.new(services.locale.statistics_screens[screen], callback_data: \"statistics-next=#{screen}\"))\nend\nbutton_rows = [] of Array(Tourmaline::InlineKeyboardButton)\nbuttons.each_slice(3) do |slice|\n  button_rows << slice\nend\nTourmaline::InlineKeyboardMarkup.new(button_rows)\n"}},{"html_id":"message_counts:Hash(Messages,Int32)-instance-method","name":"message_counts","doc":"Returns a hash of `Messages` to `Int32`, containing the total number of message for each type and daily, weekly, and monthly totals","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/Statistics/Messages.html\">Messages</a></code> to <code>Int32</code>, containing the total number of message for each type and daily, weekly, and monthly totals</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":145,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L145"},"def":{"name":"message_counts","return_type":"Hash(Messages, Int32)","visibility":"Public","body":""}},{"html_id":"messages_screen(services:Services):String-instance-method","name":"messages_screen","doc":"Returns a formatted `String` containing messages counts","summary":"<p>Returns a formatted <code>String</code> containing messages counts</p>","abstract":false,"args":[{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(services : Services) : String","args_html":"(services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":235,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L235"},"def":{"name":"messages_screen","args":[{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"totals = message_counts\ndaily_change = percent_change(totals[Messages::MessagesYesterday], totals[Messages::MessagesDaily])\nweekly_change = percent_change(totals[Messages::MessagesYesterweek], totals[Messages::MessagesWeekly])\nmonthly_change = percent_change(totals[Messages::MessagesYestermonth], totals[Messages::MessagesMonthly])\nFormat.substitute_reply(services.replies.message_stats, {\"total\" => totals[Messages::TotalMessages].to_s, \"album_total\" => totals[Messages::Albums].to_s, \"animation_total\" => totals[Messages::Animations].to_s, \"audio_total\" => totals[Messages::Audio].to_s, \"contact_total\" => totals[Messages::Contacts].to_s, \"document_total\" => totals[Messages::Documents].to_s, \"forward_total\" => totals[Messages::Forwards].to_s, \"location_total\" => totals[Messages::Locations].to_s, \"photo_total\" => totals[Messages::Photos].to_s, \"poll_total\" => totals[Messages::Polls].to_s, \"sticker_total\" => totals[Messages::Stickers].to_s, \"text_total\" => totals[Messages::Text].to_s, \"venue_total\" => totals[Messages::Venues].to_s, \"video_total\" => totals[Messages::Videos].to_s, \"video_note_total\" => totals[Messages::VideoNotes].to_s, \"voice_total\" => totals[Messages::Voice].to_s, \"daily_total\" => totals[Messages::MessagesDaily].to_s, \"weekly_total\" => totals[Messages::MessagesWeekly].to_s, \"monthly_total\" => totals[Messages::MessagesMonthly].to_s, \"daily_change\" => daily_change.format(decimal_places: 1, only_significant: true), \"weekly_change\" => weekly_change.format(decimal_places: 1, only_significant: true), \"monthly_change\" => monthly_change.format(decimal_places: 1, only_significant: true), \"change_today\" => daily_change.positive? ? services.locale.change[1] : services.locale.change[0], \"change_this_week\" => weekly_change.positive? ? services.locale.change[1] : services.locale.change[0], \"change_this_month\" => monthly_change.positive? ? services.locale.change[1] : services.locale.change[0]})\n"}},{"html_id":"percent_change(initial:Int32,final:Int32):Float64-instance-method","name":"percent_change","doc":"Returns a `Float64` containing the percent change from *initial* to *final*","summary":"<p>Returns a <code>Float64</code> containing the percent change from <em>initial</em> to <em>final</em></p>","abstract":false,"args":[{"name":"initial","external_name":"initial","restriction":"Int32"},{"name":"final","external_name":"final","restriction":"Int32"}],"args_string":"(initial : Int32, final : Int32) : Float64","args_html":"(initial : Int32, final : Int32) : Float64","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":173,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L173"},"def":{"name":"percent_change","args":[{"name":"initial","external_name":"initial","restriction":"Int32"},{"name":"final","external_name":"final","restriction":"Int32"}],"return_type":"Float64","visibility":"Public","body":"if initial == 0\n  return final * 100.0\nend\n((final - initial) / (initial.abs)) * 100.0\n"}},{"html_id":"robot9000_counts:Hash(Robot9000,Int32)-instance-method","name":"robot9000_counts","doc":"Returns a hash of `Robot9000` to `Int32`, containing the total number of unique and unoriginal messages for texts and media types","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/Statistics/Robot9000.html\">Robot9000</a></code> to <code>Int32</code>, containing the total number of unique and unoriginal messages for texts and media types</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":157,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L157"},"def":{"name":"robot9000_counts","return_type":"Hash(Robot9000, Int32)","visibility":"Public","body":""}},{"html_id":"robot9000_screen(services:Services):String-instance-method","name":"robot9000_screen","doc":"Returns a formatted `String` containing Robot9000 counts","summary":"<p>Returns a formatted <code>String</code> containing Robot9000 counts</p>","abstract":false,"args":[{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(services : Services) : String","args_html":"(services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":444,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L444"},"def":{"name":"robot9000_screen","args":[{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"if services.robot9000\nelse\n  return services.replies.no_stats_available\nend\ntotals = robot9000_counts\nFormat.substitute_reply(services.replies.robot9000_stats, {\"total_unique\" => totals[Robot9000::TotalUnique].to_s, \"unique_text\" => totals[Robot9000::UniqueText].to_s, \"unique_media\" => totals[Robot9000::UniqueMedia].to_s, \"total_unoriginal\" => totals[Robot9000::TotalUnoriginal].to_s, \"unoriginal_text\" => totals[Robot9000::UnoriginalText].to_s, \"unoriginal_media\" => totals[Robot9000::UnoriginalMedia].to_s})\n"}},{"html_id":"start_date:String-instance-method","name":"start_date","doc":"Returns a `String` containing the date at which the statistics module was initialized","summary":"<p>Returns a <code>String</code> containing the date at which the statistics module was initialized</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":113,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L113"},"def":{"name":"start_date","return_type":"String","visibility":"Public","body":""}},{"html_id":"start_time:Time-instance-method","name":"start_time","doc":"Get the `Time` the module was initialized, which should coincide closely with the time the bot was started.\nUsed to calculate uptime.","summary":"<p>Get the <code>Time</code> the module was initialized, which should coincide closely with the time the bot was started.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":105,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L105"},"def":{"name":"start_time","return_type":"Time","visibility":"Public","body":"@start_time"}},{"html_id":"statistic_screen(next_screen:StatScreens,services:Services):String-instance-method","name":"statistic_screen","doc":"Returns a `String` of the formatted statistics screen based on the given *next_screen*","summary":"<p>Returns a <code>String</code> of the formatted statistics screen based on the given <em>next_screen</em></p>","abstract":false,"args":[{"name":"next_screen","external_name":"next_screen","restriction":"StatScreens"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(next_screen : StatScreens, services : Services) : String","args_html":"(next_screen : <a href=\"../PrivateParlorXT/Statistics/StatScreens.html\">StatScreens</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":160,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L160"},"def":{"name":"statistic_screen","args":[{"name":"next_screen","external_name":"next_screen","restriction":"StatScreens"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"case next_screen\nwhen StatScreens::General\n  config_screen(services)\nwhen StatScreens::Messages\n  messages_screen(services)\nwhen StatScreens::Users\n  full_users_screen(services)\nwhen StatScreens::Karma\n  karma_screen(services)\nwhen StatScreens::KarmaLevels\n  karma_levels_screen(services)\nwhen StatScreens::Robot9000\n  robot9000_screen(services)\nelse\n  \"\"\nend"}},{"html_id":"uptime:Time::Span-instance-method","name":"uptime","doc":"Returns a `Time::Span` containing the amount of time the bot has been running","summary":"<p>Returns a <code>Time::Span</code> containing the amount of time the bot has been running</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":108,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L108"},"def":{"name":"uptime","return_type":"Time::Span","visibility":"Public","body":"Time.utc - @start_time"}},{"html_id":"user_counts:Hash(Users,Int32)-instance-method","name":"user_counts","doc":"Returns a hash of `Users` to `Int32`, containing the total number of each kind of user and daily, weekly, and monthly totals","summary":"<p>Returns a hash of <code><a href=\"../PrivateParlorXT/Statistics/Users.html\">Users</a></code> to <code>Int32</code>, containing the total number of each kind of user and daily, weekly, and monthly totals</p>","abstract":true,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":148,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L148"},"def":{"name":"user_counts","return_type":"Hash(Users, Int32)","visibility":"Public","body":""}},{"html_id":"users_screen(services:Services):String-instance-method","name":"users_screen","doc":"Returns a formatted `String` containing a counts of user totals","summary":"<p>Returns a formatted <code>String</code> containing a counts of user totals</p>","abstract":false,"args":[{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(services : Services) : String","args_html":"(services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":350,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L350"},"def":{"name":"users_screen","args":[{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"totals = user_counts\nnet_daily = totals[Users::JoinedDaily] - totals[Users::LeftDaily]\nnet_weekly = totals[Users::JoinedWeekly] - totals[Users::LeftWeekly]\nnet_monthly = totals[Users::JoinedMonthly] - totals[Users::LeftMonthly]\nFormat.substitute_reply(services.replies.user_stats, {\"total_users\" => totals[Users::TotalUsers].to_s, \"net_daily\" => net_daily.to_s, \"net_weekly\" => net_weekly.to_s, \"net_monthly\" => net_monthly.to_s})\n"}}],"types":[{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics/BotInfo","path":"PrivateParlorXT/Statistics/BotInfo.html","kind":"enum","full_name":"PrivateParlorXT::Statistics::BotInfo","name":"BotInfo","abstract":false,"ancestors":[{"html_id":"private-parlor-xt/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"private-parlor-xt/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"private-parlor-xt/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L5"}],"repository_name":"private-parlor-xt","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"DateStarted","name":"DateStarted","value":"0"},{"id":"Uptime","name":"Uptime","value":"1"},{"id":"RegistrationToggle","name":"RegistrationToggle","value":"2"},{"id":"MediaLimitPeriod","name":"MediaLimitPeriod","value":"3"},{"id":"MessageLifespan","name":"MessageLifespan","value":"4"},{"id":"PseudonymousToggle","name":"PseudonymousToggle","value":"5"},{"id":"SpoilerToggle","name":"SpoilerToggle","value":"6"},{"id":"KarmaReasonsToggle","name":"KarmaReasonsToggle","value":"7"},{"id":"Robot9000Toggle","name":"Robot9000Toggle","value":"8"},{"id":"KarmaEconomyToggle","name":"KarmaEconomyToggle","value":"9"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics","kind":"class","full_name":"PrivateParlorXT::Statistics","name":"Statistics"},"doc":"General information about the bot, such as uptime and certain configuration toggles","summary":"<p>General information about the bot, such as uptime and certain configuration toggles</p>","instance_methods":[{"html_id":"date_started?-instance-method","name":"date_started?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L6"},"def":{"name":"date_started?","visibility":"Public","body":"self == DateStarted"}},{"html_id":"karma_economy_toggle?-instance-method","name":"karma_economy_toggle?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":15,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L15"},"def":{"name":"karma_economy_toggle?","visibility":"Public","body":"self == KarmaEconomyToggle"}},{"html_id":"karma_reasons_toggle?-instance-method","name":"karma_reasons_toggle?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L13"},"def":{"name":"karma_reasons_toggle?","visibility":"Public","body":"self == KarmaReasonsToggle"}},{"html_id":"media_limit_period?-instance-method","name":"media_limit_period?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L9"},"def":{"name":"media_limit_period?","visibility":"Public","body":"self == MediaLimitPeriod"}},{"html_id":"message_lifespan?-instance-method","name":"message_lifespan?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L10"},"def":{"name":"message_lifespan?","visibility":"Public","body":"self == MessageLifespan"}},{"html_id":"pseudonymous_toggle?-instance-method","name":"pseudonymous_toggle?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":11,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L11"},"def":{"name":"pseudonymous_toggle?","visibility":"Public","body":"self == PseudonymousToggle"}},{"html_id":"registration_toggle?-instance-method","name":"registration_toggle?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L8"},"def":{"name":"registration_toggle?","visibility":"Public","body":"self == RegistrationToggle"}},{"html_id":"robot9000_toggle?-instance-method","name":"robot9000_toggle?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":14,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L14"},"def":{"name":"robot9000_toggle?","visibility":"Public","body":"self == Robot9000Toggle"}},{"html_id":"spoiler_toggle?-instance-method","name":"spoiler_toggle?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":12,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L12"},"def":{"name":"spoiler_toggle?","visibility":"Public","body":"self == SpoilerToggle"}},{"html_id":"uptime?-instance-method","name":"uptime?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L7"},"def":{"name":"uptime?","visibility":"Public","body":"self == Uptime"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics/Karma","path":"PrivateParlorXT/Statistics/Karma.html","kind":"enum","full_name":"PrivateParlorXT::Statistics::Karma","name":"Karma","abstract":false,"ancestors":[{"html_id":"private-parlor-xt/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"private-parlor-xt/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"private-parlor-xt/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":66,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L66"}],"repository_name":"private-parlor-xt","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"TotalUpvotes","name":"TotalUpvotes","value":"0"},{"id":"TotalDownvotes","name":"TotalDownvotes","value":"1"},{"id":"UpvotesDaily","name":"UpvotesDaily","value":"2"},{"id":"UpvotesYesterday","name":"UpvotesYesterday","value":"3"},{"id":"UpvotesWeekly","name":"UpvotesWeekly","value":"4"},{"id":"UpvotesYesterweek","name":"UpvotesYesterweek","value":"5"},{"id":"UpvotesMonthly","name":"UpvotesMonthly","value":"6"},{"id":"UpvotesYestermonth","name":"UpvotesYestermonth","value":"7"},{"id":"DownvotesDaily","name":"DownvotesDaily","value":"8"},{"id":"DownvotesYesterday","name":"DownvotesYesterday","value":"9"},{"id":"DownvotesWeekly","name":"DownvotesWeekly","value":"10"},{"id":"DownvotesYesterweek","name":"DownvotesYesterweek","value":"11"},{"id":"DownvotesMonthly","name":"DownvotesMonthly","value":"12"},{"id":"DownvotesYestermonth","name":"DownvotesYestermonth","value":"13"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics","kind":"class","full_name":"PrivateParlorXT::Statistics","name":"Statistics"},"doc":"Refers to the total amount of karma given or lost and totals for daily, weekly, and monthly durations","summary":"<p>Refers to the total amount of karma given or lost and totals for daily, weekly, and monthly durations</p>","instance_methods":[{"html_id":"downvotes_daily?-instance-method","name":"downvotes_daily?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":75,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L75"},"def":{"name":"downvotes_daily?","visibility":"Public","body":"self == DownvotesDaily"}},{"html_id":"downvotes_monthly?-instance-method","name":"downvotes_monthly?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":79,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L79"},"def":{"name":"downvotes_monthly?","visibility":"Public","body":"self == DownvotesMonthly"}},{"html_id":"downvotes_weekly?-instance-method","name":"downvotes_weekly?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":77,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L77"},"def":{"name":"downvotes_weekly?","visibility":"Public","body":"self == DownvotesWeekly"}},{"html_id":"downvotes_yesterday?-instance-method","name":"downvotes_yesterday?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":76,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L76"},"def":{"name":"downvotes_yesterday?","visibility":"Public","body":"self == DownvotesYesterday"}},{"html_id":"downvotes_yestermonth?-instance-method","name":"downvotes_yestermonth?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":80,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L80"},"def":{"name":"downvotes_yestermonth?","visibility":"Public","body":"self == DownvotesYestermonth"}},{"html_id":"downvotes_yesterweek?-instance-method","name":"downvotes_yesterweek?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":78,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L78"},"def":{"name":"downvotes_yesterweek?","visibility":"Public","body":"self == DownvotesYesterweek"}},{"html_id":"total_downvotes?-instance-method","name":"total_downvotes?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":68,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L68"},"def":{"name":"total_downvotes?","visibility":"Public","body":"self == TotalDownvotes"}},{"html_id":"total_upvotes?-instance-method","name":"total_upvotes?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":67,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L67"},"def":{"name":"total_upvotes?","visibility":"Public","body":"self == TotalUpvotes"}},{"html_id":"upvotes_daily?-instance-method","name":"upvotes_daily?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":69,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L69"},"def":{"name":"upvotes_daily?","visibility":"Public","body":"self == UpvotesDaily"}},{"html_id":"upvotes_monthly?-instance-method","name":"upvotes_monthly?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":73,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L73"},"def":{"name":"upvotes_monthly?","visibility":"Public","body":"self == UpvotesMonthly"}},{"html_id":"upvotes_weekly?-instance-method","name":"upvotes_weekly?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":71,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L71"},"def":{"name":"upvotes_weekly?","visibility":"Public","body":"self == UpvotesWeekly"}},{"html_id":"upvotes_yesterday?-instance-method","name":"upvotes_yesterday?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":70,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L70"},"def":{"name":"upvotes_yesterday?","visibility":"Public","body":"self == UpvotesYesterday"}},{"html_id":"upvotes_yestermonth?-instance-method","name":"upvotes_yestermonth?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":74,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L74"},"def":{"name":"upvotes_yestermonth?","visibility":"Public","body":"self == UpvotesYestermonth"}},{"html_id":"upvotes_yesterweek?-instance-method","name":"upvotes_yesterweek?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":72,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L72"},"def":{"name":"upvotes_yesterweek?","visibility":"Public","body":"self == UpvotesYesterweek"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics/Messages","path":"PrivateParlorXT/Statistics/Messages.html","kind":"enum","full_name":"PrivateParlorXT::Statistics::Messages","name":"Messages","abstract":false,"ancestors":[{"html_id":"private-parlor-xt/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"private-parlor-xt/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"private-parlor-xt/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":20,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L20"}],"repository_name":"private-parlor-xt","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"TotalMessages","name":"TotalMessages","value":"0"},{"id":"Albums","name":"Albums","value":"1"},{"id":"Animations","name":"Animations","value":"2"},{"id":"Audio","name":"Audio","value":"3"},{"id":"Contacts","name":"Contacts","value":"4"},{"id":"Documents","name":"Documents","value":"5"},{"id":"Forwards","name":"Forwards","value":"6"},{"id":"Locations","name":"Locations","value":"7"},{"id":"Photos","name":"Photos","value":"8"},{"id":"Polls","name":"Polls","value":"9"},{"id":"Stickers","name":"Stickers","value":"10"},{"id":"Text","name":"Text","value":"11"},{"id":"Venues","name":"Venues","value":"12"},{"id":"Videos","name":"Videos","value":"13"},{"id":"VideoNotes","name":"VideoNotes","value":"14"},{"id":"Voice","name":"Voice","value":"15"},{"id":"MessagesDaily","name":"MessagesDaily","value":"16"},{"id":"MessagesYesterday","name":"MessagesYesterday","value":"17"},{"id":"MessagesWeekly","name":"MessagesWeekly","value":"18"},{"id":"MessagesYesterweek","name":"MessagesYesterweek","value":"19"},{"id":"MessagesMonthly","name":"MessagesMonthly","value":"20"},{"id":"MessagesYestermonth","name":"MessagesYestermonth","value":"21"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics","kind":"class","full_name":"PrivateParlorXT::Statistics","name":"Statistics"},"doc":"Refers to the counts for each message type, includes the number of total messages\nfor daily, weekly, and monthly durations","summary":"<p>Refers to the counts for each message type, includes the number of total messages for daily, weekly, and monthly durations</p>","instance_methods":[{"html_id":"albums?-instance-method","name":"albums?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L22"},"def":{"name":"albums?","visibility":"Public","body":"self == Albums"}},{"html_id":"animations?-instance-method","name":"animations?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":23,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L23"},"def":{"name":"animations?","visibility":"Public","body":"self == Animations"}},{"html_id":"audio?-instance-method","name":"audio?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":24,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L24"},"def":{"name":"audio?","visibility":"Public","body":"self == Audio"}},{"html_id":"contacts?-instance-method","name":"contacts?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":25,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L25"},"def":{"name":"contacts?","visibility":"Public","body":"self == Contacts"}},{"html_id":"documents?-instance-method","name":"documents?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":26,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L26"},"def":{"name":"documents?","visibility":"Public","body":"self == Documents"}},{"html_id":"forwards?-instance-method","name":"forwards?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":27,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L27"},"def":{"name":"forwards?","visibility":"Public","body":"self == Forwards"}},{"html_id":"locations?-instance-method","name":"locations?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":28,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L28"},"def":{"name":"locations?","visibility":"Public","body":"self == Locations"}},{"html_id":"messages_daily?-instance-method","name":"messages_daily?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":37,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L37"},"def":{"name":"messages_daily?","visibility":"Public","body":"self == MessagesDaily"}},{"html_id":"messages_monthly?-instance-method","name":"messages_monthly?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":41,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L41"},"def":{"name":"messages_monthly?","visibility":"Public","body":"self == MessagesMonthly"}},{"html_id":"messages_weekly?-instance-method","name":"messages_weekly?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":39,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L39"},"def":{"name":"messages_weekly?","visibility":"Public","body":"self == MessagesWeekly"}},{"html_id":"messages_yesterday?-instance-method","name":"messages_yesterday?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":38,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L38"},"def":{"name":"messages_yesterday?","visibility":"Public","body":"self == MessagesYesterday"}},{"html_id":"messages_yestermonth?-instance-method","name":"messages_yestermonth?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":42,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L42"},"def":{"name":"messages_yestermonth?","visibility":"Public","body":"self == MessagesYestermonth"}},{"html_id":"messages_yesterweek?-instance-method","name":"messages_yesterweek?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":40,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L40"},"def":{"name":"messages_yesterweek?","visibility":"Public","body":"self == MessagesYesterweek"}},{"html_id":"photos?-instance-method","name":"photos?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":29,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L29"},"def":{"name":"photos?","visibility":"Public","body":"self == Photos"}},{"html_id":"polls?-instance-method","name":"polls?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":30,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L30"},"def":{"name":"polls?","visibility":"Public","body":"self == Polls"}},{"html_id":"stickers?-instance-method","name":"stickers?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":31,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L31"},"def":{"name":"stickers?","visibility":"Public","body":"self == Stickers"}},{"html_id":"text?-instance-method","name":"text?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":32,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L32"},"def":{"name":"text?","visibility":"Public","body":"self == Text"}},{"html_id":"total_messages?-instance-method","name":"total_messages?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":21,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L21"},"def":{"name":"total_messages?","visibility":"Public","body":"self == TotalMessages"}},{"html_id":"venues?-instance-method","name":"venues?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":33,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L33"},"def":{"name":"venues?","visibility":"Public","body":"self == Venues"}},{"html_id":"video_notes?-instance-method","name":"video_notes?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":35,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L35"},"def":{"name":"video_notes?","visibility":"Public","body":"self == VideoNotes"}},{"html_id":"videos?-instance-method","name":"videos?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":34,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L34"},"def":{"name":"videos?","visibility":"Public","body":"self == Videos"}},{"html_id":"voice?-instance-method","name":"voice?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":36,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L36"},"def":{"name":"voice?","visibility":"Public","body":"self == Voice"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics/Robot9000","path":"PrivateParlorXT/Statistics/Robot9000.html","kind":"enum","full_name":"PrivateParlorXT::Statistics::Robot9000","name":"Robot9000","abstract":false,"ancestors":[{"html_id":"private-parlor-xt/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"private-parlor-xt/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"private-parlor-xt/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":84,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L84"}],"repository_name":"private-parlor-xt","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"TotalUnique","name":"TotalUnique","value":"0"},{"id":"UniqueText","name":"UniqueText","value":"1"},{"id":"UniqueMedia","name":"UniqueMedia","value":"2"},{"id":"TotalUnoriginal","name":"TotalUnoriginal","value":"3"},{"id":"UnoriginalText","name":"UnoriginalText","value":"4"},{"id":"UnoriginalMedia","name":"UnoriginalMedia","value":"5"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics","kind":"class","full_name":"PrivateParlorXT::Statistics","name":"Statistics"},"doc":"Refers to the total number of unique messages and unoriginal messages for text and media messages","summary":"<p>Refers to the total number of unique messages and unoriginal messages for text and media messages</p>","instance_methods":[{"html_id":"total_unique?-instance-method","name":"total_unique?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":85,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L85"},"def":{"name":"total_unique?","visibility":"Public","body":"self == TotalUnique"}},{"html_id":"total_unoriginal?-instance-method","name":"total_unoriginal?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":88,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L88"},"def":{"name":"total_unoriginal?","visibility":"Public","body":"self == TotalUnoriginal"}},{"html_id":"unique_media?-instance-method","name":"unique_media?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":87,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L87"},"def":{"name":"unique_media?","visibility":"Public","body":"self == UniqueMedia"}},{"html_id":"unique_text?-instance-method","name":"unique_text?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":86,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L86"},"def":{"name":"unique_text?","visibility":"Public","body":"self == UniqueText"}},{"html_id":"unoriginal_media?-instance-method","name":"unoriginal_media?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":90,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L90"},"def":{"name":"unoriginal_media?","visibility":"Public","body":"self == UnoriginalMedia"}},{"html_id":"unoriginal_text?-instance-method","name":"unoriginal_text?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":89,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L89"},"def":{"name":"unoriginal_text?","visibility":"Public","body":"self == UnoriginalText"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics/StatScreens","path":"PrivateParlorXT/Statistics/StatScreens.html","kind":"enum","full_name":"PrivateParlorXT::Statistics::StatScreens","name":"StatScreens","abstract":false,"ancestors":[{"html_id":"private-parlor-xt/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"private-parlor-xt/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"private-parlor-xt/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":94,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L94"}],"repository_name":"private-parlor-xt","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"General","name":"General","value":"0"},{"id":"Messages","name":"Messages","value":"1"},{"id":"Users","name":"Users","value":"2"},{"id":"Karma","name":"Karma","value":"3"},{"id":"KarmaLevels","name":"KarmaLevels","value":"4"},{"id":"Robot9000","name":"Robot9000","value":"5"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics","kind":"class","full_name":"PrivateParlorXT::Statistics","name":"Statistics"},"doc":"The available stats screens for the `StatsCommand` and its `Tourmaline::InlineKeyboardMarkup`","summary":"<p>The available stats screens for the <code><a href=\"../../PrivateParlorXT/StatsCommand.html\">StatsCommand</a></code> and its <code>Tourmaline::InlineKeyboardMarkup</code></p>","instance_methods":[{"html_id":"general?-instance-method","name":"general?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":95,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L95"},"def":{"name":"general?","visibility":"Public","body":"self == General"}},{"html_id":"karma?-instance-method","name":"karma?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":98,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L98"},"def":{"name":"karma?","visibility":"Public","body":"self == Karma"}},{"html_id":"karma_levels?-instance-method","name":"karma_levels?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":99,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L99"},"def":{"name":"karma_levels?","visibility":"Public","body":"self == KarmaLevels"}},{"html_id":"messages?-instance-method","name":"messages?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":96,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L96"},"def":{"name":"messages?","visibility":"Public","body":"self == Messages"}},{"html_id":"robot9000?-instance-method","name":"robot9000?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":100,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L100"},"def":{"name":"robot9000?","visibility":"Public","body":"self == Robot9000"}},{"html_id":"users?-instance-method","name":"users?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":97,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L97"},"def":{"name":"users?","visibility":"Public","body":"self == Users"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics/Users","path":"PrivateParlorXT/Statistics/Users.html","kind":"enum","full_name":"PrivateParlorXT::Statistics::Users","name":"Users","abstract":false,"ancestors":[{"html_id":"private-parlor-xt/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"private-parlor-xt/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"private-parlor-xt/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":46,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L46"}],"repository_name":"private-parlor-xt","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"TotalUsers","name":"TotalUsers","value":"0"},{"id":"TotalJoined","name":"TotalJoined","value":"1"},{"id":"TotalLeft","name":"TotalLeft","value":"2"},{"id":"TotalBlacklisted","name":"TotalBlacklisted","value":"3"},{"id":"JoinedDaily","name":"JoinedDaily","value":"4"},{"id":"JoinedYesterday","name":"JoinedYesterday","value":"5"},{"id":"JoinedWeekly","name":"JoinedWeekly","value":"6"},{"id":"JoinedYesterweek","name":"JoinedYesterweek","value":"7"},{"id":"JoinedMonthly","name":"JoinedMonthly","value":"8"},{"id":"JoinedYestermonth","name":"JoinedYestermonth","value":"9"},{"id":"LeftDaily","name":"LeftDaily","value":"10"},{"id":"LeftYesterday","name":"LeftYesterday","value":"11"},{"id":"LeftWeekly","name":"LeftWeekly","value":"12"},{"id":"LeftYesterweek","name":"LeftYesterweek","value":"13"},{"id":"LeftMonthly","name":"LeftMonthly","value":"14"},{"id":"LeftYestermonth","name":"LeftYestermonth","value":"15"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT/Statistics","kind":"class","full_name":"PrivateParlorXT::Statistics","name":"Statistics"},"doc":"Refers to the total number of users and users who joined or left for daily, weekly, and monthly durations","summary":"<p>Refers to the total number of users and users who joined or left for daily, weekly, and monthly durations</p>","instance_methods":[{"html_id":"joined_daily?-instance-method","name":"joined_daily?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":51,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L51"},"def":{"name":"joined_daily?","visibility":"Public","body":"self == JoinedDaily"}},{"html_id":"joined_monthly?-instance-method","name":"joined_monthly?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":55,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L55"},"def":{"name":"joined_monthly?","visibility":"Public","body":"self == JoinedMonthly"}},{"html_id":"joined_weekly?-instance-method","name":"joined_weekly?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":53,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L53"},"def":{"name":"joined_weekly?","visibility":"Public","body":"self == JoinedWeekly"}},{"html_id":"joined_yesterday?-instance-method","name":"joined_yesterday?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":52,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L52"},"def":{"name":"joined_yesterday?","visibility":"Public","body":"self == JoinedYesterday"}},{"html_id":"joined_yestermonth?-instance-method","name":"joined_yestermonth?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":56,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L56"},"def":{"name":"joined_yestermonth?","visibility":"Public","body":"self == JoinedYestermonth"}},{"html_id":"joined_yesterweek?-instance-method","name":"joined_yesterweek?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":54,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L54"},"def":{"name":"joined_yesterweek?","visibility":"Public","body":"self == JoinedYesterweek"}},{"html_id":"left_daily?-instance-method","name":"left_daily?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":57,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L57"},"def":{"name":"left_daily?","visibility":"Public","body":"self == LeftDaily"}},{"html_id":"left_monthly?-instance-method","name":"left_monthly?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":61,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L61"},"def":{"name":"left_monthly?","visibility":"Public","body":"self == LeftMonthly"}},{"html_id":"left_weekly?-instance-method","name":"left_weekly?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":59,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L59"},"def":{"name":"left_weekly?","visibility":"Public","body":"self == LeftWeekly"}},{"html_id":"left_yesterday?-instance-method","name":"left_yesterday?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":58,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L58"},"def":{"name":"left_yesterday?","visibility":"Public","body":"self == LeftYesterday"}},{"html_id":"left_yestermonth?-instance-method","name":"left_yestermonth?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":62,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L62"},"def":{"name":"left_yestermonth?","visibility":"Public","body":"self == LeftYestermonth"}},{"html_id":"left_yesterweek?-instance-method","name":"left_yesterweek?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":60,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L60"},"def":{"name":"left_yesterweek?","visibility":"Public","body":"self == LeftYesterweek"}},{"html_id":"total_blacklisted?-instance-method","name":"total_blacklisted?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":50,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L50"},"def":{"name":"total_blacklisted?","visibility":"Public","body":"self == TotalBlacklisted"}},{"html_id":"total_joined?-instance-method","name":"total_joined?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":48,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L48"},"def":{"name":"total_joined?","visibility":"Public","body":"self == TotalJoined"}},{"html_id":"total_left?-instance-method","name":"total_left?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":49,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L49"},"def":{"name":"total_left?","visibility":"Public","body":"self == TotalLeft"}},{"html_id":"total_users?-instance-method","name":"total_users?","abstract":false,"location":{"filename":"src/private-parlor-xt/statistics/statistics.cr","line_number":47,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/statistics/statistics.cr#L47"},"def":{"name":"total_users?","visibility":"Public","body":"self == TotalUsers"}}]}]},{"html_id":"private-parlor-xt/PrivateParlorXT/StatisticsQueryHandler","path":"PrivateParlorXT/StatisticsQueryHandler.html","kind":"class","full_name":"PrivateParlorXT::StatisticsQueryHandler","name":"StatisticsQueryHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CallbackHandler","kind":"class","full_name":"PrivateParlorXT::CallbackHandler","name":"CallbackHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CallbackHandler","kind":"class","full_name":"PrivateParlorXT::CallbackHandler","name":"CallbackHandler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/callback_query_handlers/statistics_query_handler.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/callback_query_handlers/statistics_query_handler.cr#L6"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A `CallbackHandler` that responds to callback queries originating from the inline keyboard buttons found on the message produced by `StatsCommand`","summary":"<p>A <code><a href=\"../PrivateParlorXT/CallbackHandler.html\">CallbackHandler</a></code> that responds to callback queries originating from the inline keyboard buttons found on the message produced by <code><a href=\"../PrivateParlorXT/StatsCommand.html\">StatsCommand</a></code></p>","instance_methods":[{"html_id":"do(callback:Tourmaline::CallbackQuery,services:Services):Nil-instance-method","name":"do","doc":"Parses the query found in *callback* and returns the associated statistics screen if *callback* meets requirements","summary":"<p>Parses the query found in <em>callback</em> and returns the associated statistics screen if <em>callback</em> meets requirements</p>","abstract":false,"args":[{"name":"callback","external_name":"callback","restriction":"Tourmaline::CallbackQuery"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(callback : Tourmaline::CallbackQuery, services : Services) : Nil","args_html":"(callback : Tourmaline::CallbackQuery, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/callback_query_handlers/statistics_query_handler.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/callback_query_handlers/statistics_query_handler.cr#L8"},"def":{"name":"do","args":[{"name":"callback","external_name":"callback","restriction":"Tourmaline::CallbackQuery"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_callback(callback, services)\nelse\n  return\nend\nif message = callback.message\nelse\n  return\nend\nif data = callback.data\nelse\n  return\nend\nif stats = services.stats\nelse\n  return\nend\nif (split = data.split('=')) && (split.size == 2)\nelse\n  return\nend\nnext_screen = Statistics::StatScreens.parse(split[1])\nif (next_screen == Statistics::StatScreens::Users) && (!(services.access.authorized?(user.rank, CommandPermissions::Users)))\n  response = stats.users_screen(services)\nelse\n  response = stats.statistic_screen(next_screen, services)\nend\nreply_markup = stats.keyboard_markup(next_screen, services)\nservices.relay.edit_message_text(user.id, response, reply_markup, message.message_id.to_i64)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/StatsCommand","path":"PrivateParlorXT/StatsCommand.html","kind":"class","full_name":"PrivateParlorXT::StatsCommand","name":"StatsCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/statistics_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/statistics_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used for getting statistics about the bot","summary":"<p>A command used for getting statistics about the bot</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Returns a message containing general bot statistics if *message* meets requirements","summary":"<p>Returns a message containing general bot statistics if <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/statistics_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/statistics_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif stats = services.stats\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.fail)\nend\nupdate_user_activity(user, services)\nresponse = stats.config_screen(services)\nreply_markup = stats.keyboard_markup(Statistics::StatScreens::General, services)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, response, reply_markup)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/StickerHandler","path":"PrivateParlorXT/StickerHandler.html","kind":"class","full_name":"PrivateParlorXT::StickerHandler","name":"StickerHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/sticker_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/sticker_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for sticker updates","summary":"<p>A handler for sticker updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the sticker meets requirements and relays it","summary":"<p>Checks if the sticker meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/sticker_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/sticker_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif authorized?(user, message, :Sticker, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif sticker = message.sticker\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nif unique?(user, message, services)\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Stickers, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_sticker(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, replies: reply_messages, media: sticker.file_id, effect: services.config.allow_effects ? message.effect_id : nil))\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming stickers\n\nReturns `true` if the user is spamming stickers, `false` otherwise","summary":"<p>Checks if the user is spamming stickers</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/sticker_handler.cr","line_number":52,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/sticker_handler.cr#L52"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_sticker?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a sticker","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a sticker</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/sticker_handler.cr","line_number":95,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/sticker_handler.cr#L95"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_sticker >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_sticker)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a sticker when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for stickers is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a sticker when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/sticker_handler.cr","line_number":72,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/sticker_handler.cr#L72"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_sticker >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_sticker\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_sticker.to_s, \"type\" => \"sticker\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/StopCommand","path":"PrivateParlorXT/StopCommand.html","kind":"class","full_name":"PrivateParlorXT::StopCommand","name":"StopCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/stop_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/stop_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to leave the bot and stop receiving messages","summary":"<p>A command used to leave the bot and stop receiving messages</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Sets the user to left, preventing the user from receiving any further messages until the user rejoins","summary":"<p>Sets the user to left, preventing the user from receiving any further messages until the user rejoins</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/stop_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/stop_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if info = message.from\nelse\n  return\nend\nif text = message.text || message.caption\n  if text.starts_with?('/')\n  else\n    return\n  end\nend\nif user = services.database.get_user(info.id.to_i64)\nelse\n  return services.relay.send_to_user(nil, info.id.to_i64, services.replies.not_in_chat)\nend\nif user.left?\n  return services.relay.send_to_user(nil, info.id.to_i64, services.replies.not_in_chat)\nend\nuser.update_names(info.username, info.full_name)\nuser.set_active\nuser.set_left\nservices.database.update_user(user)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.left)\nlog = Format.substitute_message(services.logs.left, {\"id\" => user.id.to_s, \"name\" => user.formatted_name})\nservices.relay.log_output(log)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/TextHandler","path":"PrivateParlorXT/TextHandler.html","kind":"class","full_name":"PrivateParlorXT::TextHandler","name":"TextHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/text_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/text_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for text message updates","summary":"<p>A handler for text message updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the text message meets requirements and relays it","summary":"<p>Checks if the text message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/text_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/text_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif authorized?(user, message, :Text, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\ntext, entities = Format.text_and_entities(message, user, services)\nif text\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nif unique?(user, message, services)\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Text, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_text(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, replies: reply_messages, text: text, entities: entities, link_preview_options: message.link_preview_options, effect: services.config.allow_effects ? message.effect_id : nil))\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming text messages\n\nReturns `true` if the user is spamming text messages, `false` otherwise","summary":"<p>Checks if the user is spamming text messages</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/text_handler.cr","line_number":54,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/text_handler.cr#L54"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif message.preformatted?\n  return false\nend\nif text = message.text\nelse\n  return true\nend\nif spam.spammy_text?(user.id, text)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a text message","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a text message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/text_handler.cr","line_number":101,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/text_handler.cr#L101"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_text >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_text)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a text message when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for text messages is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a text message when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/text_handler.cr","line_number":78,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/text_handler.cr#L78"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_text >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_text\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_text.to_s, \"type\" => \"text\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/ToggleDebugCommand","path":"PrivateParlorXT/ToggleDebugCommand.html","kind":"class","full_name":"PrivateParlorXT::ToggleDebugCommand","name":"ToggleDebugCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/toggle_debug_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/toggle_debug_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to enable or disable debug mode, which relays a copy of a sent message to the sender if it is enabled.","summary":"<p>A command used to enable or disable debug mode, which relays a copy of a sent message to the sender if it is enabled.</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Relays a copy of a sent message back to the sender if debug mode is enabled; relays messages normally if debug mode is disabled","summary":"<p>Relays a copy of a sent message back to the sender if debug mode is enabled; relays messages normally if debug mode is disabled</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/toggle_debug_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/toggle_debug_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nuser.toggle_debug\nupdate_user_activity(user, services)\nresponse = Format.substitute_reply(services.replies.toggle_debug, {\"toggle\" => user.debug_enabled ? services.locale.toggle[1] : services.locale.toggle[0]})\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, response)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/ToggleKarmaCommand","path":"PrivateParlorXT/ToggleKarmaCommand.html","kind":"class","full_name":"PrivateParlorXT::ToggleKarmaCommand","name":"ToggleKarmaCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/toggle_karma_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/toggle_karma_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to disable or enable karma notifications for a user","summary":"<p>A command used to disable or enable karma notifications for a user</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Hides karma notifications for user or enabled them, depending on the user's hide_karma value","summary":"<p>Hides karma notifications for user or enabled them, depending on the user's hide_karma value</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/toggle_karma_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/toggle_karma_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nuser.toggle_karma\nupdate_user_activity(user, services)\nresponse = Format.substitute_reply(services.replies.toggle_karma, {\"toggle\" => user.hide_karma ? services.locale.toggle[0] : services.locale.toggle[1]})\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, response)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/TripcodeCommand","path":"PrivateParlorXT/TripcodeCommand.html","kind":"class","full_name":"PrivateParlorXT::TripcodeCommand","name":"TripcodeCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/tripcode_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/tripcode_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to set the user's tripcode, so that it can be used for tripcode signatures","summary":"<p>A command used to set the user's tripcode, so that it can be used for tripcode signatures</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Sets the user's tripcode or returns the user's tripcode if set when the message meets requirements","summary":"<p>Sets the user's tripcode or returns the user's tripcode if set when the message meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/tripcode_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/tripcode_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif arg = Format.get_arg(message.text)\n  if services.config.flag_signatures\n    if valid_signature?(arg)\n    else\n      invalid_format = Format.substitute_reply(services.replies.invalid_tripcode_format, {\"valid_format\" => services.replies.flag_sign_format})\n      return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, invalid_format)\n    end\n    tripcode = (arg + '#') + user.obfuscated_id\n    user.set_tripcode(tripcode)\n    name, _ = Format.generate_tripcode(tripcode, services)\n    response = tripcode_set(services.replies.flag_sign_set_format, name, \"\", services)\n  else\n    if valid_tripcode?(arg)\n    else\n      invalid_format = Format.substitute_reply(services.replies.invalid_tripcode_format, {\"valid_format\" => services.replies.tripcode_format})\n      return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, invalid_format)\n    end\n    user.set_tripcode(arg)\n    name, tripcode = Format.generate_tripcode(arg, services)\n    response = tripcode_set(services.replies.tripcode_set_format, name, tripcode, services)\n  end\nelse\n  response = Format.substitute_reply(services.replies.tripcode_info, {\"tripcode\" => user.tripcode ? user.tripcode : services.replies.tripcode_unset})\nend\nupdate_user_activity(user, services)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, response)\n"}},{"html_id":"tripcode_set(set_format:String,name:String,tripcode:String,services:Services):String-instance-method","name":"tripcode_set","doc":"Format the tripcode set reply","summary":"<p>Format the tripcode set reply</p>","abstract":false,"args":[{"name":"set_format","external_name":"set_format","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"},{"name":"tripcode","external_name":"tripcode","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(set_format : String, name : String, tripcode : String, services : Services) : String","args_html":"(set_format : String, name : String, tripcode : String, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : String","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/tripcode_command.cr","line_number":108,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/tripcode_command.cr#L108"},"def":{"name":"tripcode_set","args":[{"name":"set_format","external_name":"set_format","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"},{"name":"tripcode","external_name":"tripcode","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"String","visibility":"Public","body":"set_format = set_format.gsub(\"{name}\", Format.escape_mdv2(name))\nset_format = set_format.gsub(\"{tripcode}\", Format.escape_mdv2(tripcode))\nservices.replies.tripcode_set.gsub(\"{set_format}\", set_format)\n"}},{"html_id":"valid_signature?(arg:String):Bool|Nil-instance-method","name":"valid_signature?","doc":"Returns `true` if the given *arg* is a valid flag signature\n\nReturns `false` otherwise","summary":"<p>Returns <code>true</code> if the given <em>arg</em> is a valid flag signature</p>","abstract":false,"args":[{"name":"arg","external_name":"arg","restriction":"String"}],"args_string":"(arg : String) : Bool | Nil","args_html":"(arg : String) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/tripcode_command.cr","line_number":82,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/tripcode_command.cr#L82"},"def":{"name":"valid_signature?","args":[{"name":"arg","external_name":"arg","restriction":"String"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if arg.graphemes.size > 5\n  return false\nend\nif arg.includes?(\"\\n\")\n  return false\nend\nemoji_ranges = [(9728..9983), (917504..917631), (129648..129791), (129280..129535), (127744..128511), (128512..128591), (127462..127487), (65039..65039), (8205..8205)]\nif arg.codepoints.any? do |codepoint|\n  emoji_ranges.none? do |range|\n    range.includes?(codepoint)\n  end\nend\n  return false\nend\ntrue\n"}},{"html_id":"valid_tripcode?(arg:String):Bool-instance-method","name":"valid_tripcode?","doc":"Returns `true` if the given *arg* is a valid tripcode\n\nReturns false otherwise","summary":"<p>Returns <code>true</code> if the given <em>arg</em> is a valid tripcode</p>","abstract":false,"args":[{"name":"arg","external_name":"arg","restriction":"String"}],"args_string":"(arg : String) : Bool","args_html":"(arg : String) : Bool","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/tripcode_command.cr","line_number":67,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/tripcode_command.cr#L67"},"def":{"name":"valid_tripcode?","args":[{"name":"arg","external_name":"arg","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"if (count = arg.count('#')) && (count == 0)\n  return false\nend\nif (count == 1) && (arg.ends_with?(\"#\"))\n  return false\nend\nif arg.size > 30\n  return false\nend\nif arg.includes?(\"\\n\")\n  return false\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/TripcodeSignCommand","path":"PrivateParlorXT/TripcodeSignCommand.html","kind":"class","full_name":"PrivateParlorXT::TripcodeSignCommand","name":"TripcodeSignCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/tripcode_sign_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/tripcode_sign_command.cr#L9"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"Processes tripcode sign messages before an `UpdateHandler` gets them\n\nThis handler expects the command handlers to be registered before the update handlers","summary":"<p>Processes tripcode sign messages before an <code><a href=\"../PrivateParlorXT/UpdateHandler.html\">UpdateHandler</a></code> gets them</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Preformats the given *message* with a tripcode signature header if the *message* meets requirements","summary":"<p>Preformats the given <em>message</em> with a tripcode signature header if the <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/tripcode_sign_command.cr","line_number":11,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/tripcode_sign_command.cr#L11"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif tripcode = user.tripcode\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.no_tripcode_set)\nend\nif authorized?(user, message, :TSign, services)\nelse\n  return\nend\ntext, entities = Format.validate_text_and_entities(message, user, services)\nif text\nelse\n  return\nend\nif arg = Format.get_arg(text)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.missing_args)\nend\nif spamming?(user, message, arg, services)\n  return\nend\nif unique?(user, message, services, arg)\nelse\n  return\nend\ntext, entities = Format.format_text(text, entities, false, services)\nentities = remove_command_entity(text, entities, arg)\nname, tripcode = Format.generate_tripcode(tripcode, services)\nif services.config.flag_signatures\n  text, entities = Format.flag_sign(name, entities)\nelse\n  text, entities = Format.tripcode_sign(name, tripcode, entities)\nend\ntext = text + arg\nif message.text\n  message.text = text\n  message.entities = entities\nelse\n  if message.caption\n    message.caption = text\n    message.caption_entities = entities\n  end\nend\nmessage.preformatted = true\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,arg:String,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming tripcode signatures\n\nReturns `true` if the user is spamming tripcode signatures or unformatted text is spammy, returns `false` otherwise","summary":"<p>Checks if the user is spamming tripcode signatures</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, arg : String, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, arg : String, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/tripcode_sign_command.cr","line_number":61,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/tripcode_sign_command.cr#L61"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"arg","external_name":"arg","restriction":"String"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif message.text && (spam.spammy_text?(user.id, arg))\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nif spam.spammy_sign?(user.id, services.config.sign_limit_interval)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.sign_spam)\n  return true\nend\nfalse\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/UnblacklistCommand","path":"PrivateParlorXT/UnblacklistCommand.html","kind":"class","full_name":"PrivateParlorXT::UnblacklistCommand","name":"UnblacklistCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/unblacklist.command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/unblacklist.command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to unban a user in the bot","summary":"<p>A command used to unban a user in the bot</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Unbans a user via a username or unique ID if the *message* meets requirements","summary":"<p>Unbans a user via a username or unique ID if the <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/unblacklist.command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/unblacklist.command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Unblacklist, services)\nelse\n  return\nend\nif arg = Format.get_arg(message.text)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.missing_args)\nend\nif unblacklisted_user = services.database.get_user_by_arg(arg)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.no_user_found)\nend\nif unblacklisted_user.rank == -10\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.fail)\nend\nupdate_user_activity(user, services)\nunblacklisted_user.set_rank(services.config.default_rank)\nunblacklisted_user.rejoin\nservices.database.update_user(unblacklisted_user)\nlog = Format.substitute_message(services.logs.unblacklisted, {\"id\" => unblacklisted_user.id.to_s, \"name\" => unblacklisted_user.formatted_name, \"invoker\" => user.formatted_name})\nservices.relay.send_to_user(nil, unblacklisted_user.id, services.replies.unblacklisted)\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.success)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/UncooldownCommand","path":"PrivateParlorXT/UncooldownCommand.html","kind":"class","full_name":"PrivateParlorXT::UncooldownCommand","name":"UncooldownCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/uncooldown_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/uncooldown_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used for removing cooldowns from users via a username, OID, or unique ID argument","summary":"<p>A command used for removing cooldowns from users via a username, OID, or unique ID argument</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Removes a cooldown and warning from a user if the user is currently cooldowned.","summary":"<p>Removes a cooldown and warning from a user if the user is currently cooldowned.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/uncooldown_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/uncooldown_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Uncooldown, services)\nelse\n  return\nend\nif arg = Format.get_arg(message.text)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.missing_args)\nend\nif uncooldown_user = services.database.get_user_by_arg(arg)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.no_user_found)\nend\nif cooldown_until = uncooldown_user.cooldown_until\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.not_in_cooldown)\nend\nupdate_user_activity(user, services)\nuncooldown_user.remove_cooldown(true)\nuncooldown_user.remove_warning(1, services.config.warn_lifespan.hours)\nservices.database.update_user(uncooldown_user)\nlog = Format.substitute_message(services.logs.removed_cooldown, {\"id\" => user.id.to_s, \"name\" => user.formatted_name, \"oid\" => uncooldown_user.obfuscated_id, \"cooldown_until\" => cooldown_until.to_s})\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.success)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/UnpinCommand","path":"PrivateParlorXT/UnpinCommand.html","kind":"class","full_name":"PrivateParlorXT::UnpinCommand","name":"UnpinCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/unpin_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/unpin_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command for unpinning messages from the chat","summary":"<p>A command for unpinning messages from the chat</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Unpins the most recently pinned message or the message that *message* replies to if the *message* meets requirements","summary":"<p>Unpins the most recently pinned message or the message that <em>message</em> replies to if the <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/unpin_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/unpin_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Unpin, services)\nelse\n  return\nend\nif reply = message.reply_to_message\n  if services.history.sender(reply.message_id.to_i64)\n  else\n    return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.not_in_cache)\n  end\n  (services.history.receivers(reply.message_id.to_i64)).each do |receiver, receiver_message|\n    services.relay.unpin_message(receiver, receiver_message)\n  end\n  log = Format.substitute_message(services.logs.unpinned, {\"id\" => user.id.to_s, \"name\" => user.formatted_name, \"msid\" => reply.message_id.to_s})\nelse\n  services.database.active_users.each do |receiver|\n    services.relay.unpin_message(receiver)\n  end\n  log = Format.substitute_message(services.logs.unpinned_recent, {\"id\" => user.id.to_s, \"name\" => user.formatted_name})\nend\nupdate_user_activity(user, services)\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.success)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","path":"PrivateParlorXT/UpdateHandler.html","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler","abstract":true,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handler.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handler.cr#L22"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"private-parlor-xt/PrivateParlorXT/AlbumHandler","kind":"class","full_name":"PrivateParlorXT::AlbumHandler","name":"AlbumHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/AnimationHandler","kind":"class","full_name":"PrivateParlorXT::AnimationHandler","name":"AnimationHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/AudioHandler","kind":"class","full_name":"PrivateParlorXT::AudioHandler","name":"AudioHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/ContactHandler","kind":"class","full_name":"PrivateParlorXT::ContactHandler","name":"ContactHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/DocumentHandler","kind":"class","full_name":"PrivateParlorXT::DocumentHandler","name":"DocumentHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/ForwardHandler","kind":"class","full_name":"PrivateParlorXT::ForwardHandler","name":"ForwardHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/LocationHandler","kind":"class","full_name":"PrivateParlorXT::LocationHandler","name":"LocationHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/PhotoHandler","kind":"class","full_name":"PrivateParlorXT::PhotoHandler","name":"PhotoHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/PollHandler","kind":"class","full_name":"PrivateParlorXT::PollHandler","name":"PollHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/RegularForwardHandler","kind":"class","full_name":"PrivateParlorXT::RegularForwardHandler","name":"RegularForwardHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/StickerHandler","kind":"class","full_name":"PrivateParlorXT::StickerHandler","name":"StickerHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/TextHandler","kind":"class","full_name":"PrivateParlorXT::TextHandler","name":"TextHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/VenueHandler","kind":"class","full_name":"PrivateParlorXT::VenueHandler","name":"VenueHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/VideoHandler","kind":"class","full_name":"PrivateParlorXT::VideoHandler","name":"VideoHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/VideoNoteHandler","kind":"class","full_name":"PrivateParlorXT::VideoNoteHandler","name":"VideoNoteHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/VoiceHandler","kind":"class","full_name":"PrivateParlorXT::VoiceHandler","name":"VoiceHandler"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A base class for handling one of the Telegram updates (`Tourmaline::Text`, `Tourmaline::Photo`, `Tourmaline::ForwardedMessage`, etc).\n\nHandlers that are meant to work with Telegram updates should inherit this class,\nand include an `On` annotation to have it be usable by the bot.","summary":"<p>A base class for handling one of the Telegram updates (<code>Tourmaline::Text</code>, <code>Tourmaline::Photo</code>, <code>Tourmaline::ForwardedMessage</code>, etc).</p>","instance_methods":[{"html_id":"authorized?(user:User,message:Tourmaline::Message,authority:MessagePermissions,services:Services):Bool-instance-method","name":"authorized?","doc":"Returns `true` if user is authorized to send this type of message (one of the `MessagePermissions` types).\n\nReturns `false` otherwise.","summary":"<p>Returns <code>true</code> if user is authorized to send this type of message (one of the <code><a href=\"../PrivateParlorXT/MessagePermissions.html\">MessagePermissions</a></code> types).</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"authority","external_name":"authority","restriction":"MessagePermissions"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, authority : MessagePermissions, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, authority : <a href=\"../PrivateParlorXT/MessagePermissions.html\">MessagePermissions</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handler.cr","line_number":56,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handler.cr#L56"},"def":{"name":"authorized?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"authority","external_name":"authority","restriction":"MessagePermissions"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if services.access.authorized?(user.rank, authority)\nelse\n  response = Format.substitute_reply(services.replies.media_disabled, {\"type\" => authority.to_s})\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, response)\n  return false\nend\ntrue\n"}},{"html_id":"deny_user(user:User,services:Services):Nil-instance-method","name":"deny_user","doc":"Queues a system reply when the user cannot chat due to being either cooldowned, blacklisted, media limited, or left.","summary":"<p>Queues a system reply when the user cannot chat due to being either cooldowned, blacklisted, media limited, or left.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handler.cr","line_number":77,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handler.cr#L77"},"def":{"name":"deny_user","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user.blacklisted?\n  response = Format.substitute_reply(services.replies.blacklisted, {\"contact\" => Format.contact(services.config.blacklist_contact, services.replies), \"reason\" => Format.reason(user.blacklist_reason, services.replies)})\nelse\n  if cooldown_until = user.cooldown_until\n    response = Format.substitute_reply(services.replies.on_cooldown, {\"time\" => Format.time(cooldown_until, services.locale.time_format)})\n  else\n    if (Time.utc - user.joined) < services.config.media_limit_period\n      response = Format.substitute_reply(services.replies.media_limit, {\"total\" => Format.time_span(services.config.media_limit_period - (Time.utc - user.joined), services.locale)})\n    else\n      response = services.replies.not_in_chat\n    end\n  end\nend\nservices.relay.send_to_user(nil, user.id, response)\n"}},{"html_id":"meets_requirements?(message:Tourmaline::Message):Bool-instance-method","name":"meets_requirements?","doc":"Returns `true` if the *message* is not a forward or an album.\n\nReturns `false` otherwise.","summary":"<p>Returns <code>true</code> if the <em>message</em> is not a forward or an album.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"args_string":"(message : Tourmaline::Message) : Bool","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handler.cr","line_number":69,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handler.cr#L69"},"def":{"name":"meets_requirements?","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"return_type":"Bool","visibility":"Public","body":"if message.forward_origin\n  return false\nend\nif message.media_group_id\n  return false\nend\ntrue\n"}},{"html_id":"message_receivers(user:User,services:Services):Array(UserID)-instance-method","name":"message_receivers","doc":"Returns an array of `UserID` for which the relayed message will be sent to\n\nIf the given *User* has debug mode enabled, he will get a copy of the relayed message","summary":"<p>Returns an array of <code><a href=\"../PrivateParlorXT/UserID.html\">UserID</a></code> for which the relayed message will be sent to</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : Array(UserID)","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Array(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>)","location":{"filename":"src/private-parlor-xt/handlers/update_handler.cr","line_number":147,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handler.cr#L147"},"def":{"name":"message_receivers","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Array(UserID)","visibility":"Public","body":"if user.debug_enabled\n  services.database.active_users\nelse\n  services.database.active_users(user.id)\nend"}},{"html_id":"record_message_statistics(type:Statistics::Messages,services:Services):Nil-instance-method","name":"record_message_statistics","doc":"If the statistics module is enabled, update the message_stats for the given *type* by incrementing the totals.","summary":"<p>If the statistics module is enabled, update the message_stats for the given <em>type</em> by incrementing the totals.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Statistics::Messages"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(type : Statistics::Messages, services : Services) : Nil","args_html":"(type : <a href=\"../PrivateParlorXT/Statistics/Messages.html\">Statistics::Messages</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handler.cr","line_number":156,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handler.cr#L156"},"def":{"name":"record_message_statistics","args":[{"name":"type","external_name":"type","restriction":"Statistics::Messages"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if stats = services.stats\nelse\n  return\nend\nstats.increment_messages(type)\n"}},{"html_id":"reply_receivers(message:Tourmaline::Message,user:User,services:Services):Hash(UserID,ReplyParameters)|Nil-instance-method","name":"reply_receivers","doc":"Returns a hash of a receiver's `UserID` to the relevant message ID for which this message will reply to when relayed.\nWhen quoting, the `ReplyParameters` value will contain the replied message's quote if it is not invalid (i.e., user quoted his own message and it had strippable entities or was edited)\n\nThe hash will be empty if the message does not have a reply\n\nReturns nil if the message had a reply, but no receiver message IDs could be found (message replied to is no longer in the cache)","summary":"<p>Returns a hash of a receiver's <code><a href=\"../PrivateParlorXT/UserID.html\">UserID</a></code> to the relevant message ID for which this message will reply to when relayed.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, user : User, services : Services) : Hash(UserID, ReplyParameters) | Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Hash(<a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, <a href=\"../PrivateParlorXT/ReplyParameters.html\">ReplyParameters</a>) | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handler.cr","line_number":104,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handler.cr#L104"},"def":{"name":"reply_receivers","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Hash(UserID, ReplyParameters) | ::Nil","visibility":"Public","body":"if reply = message.reply_to_message\nelse\n  return Hash(UserID, ReplyParameters).new\nend\nreplies = services.history.receivers(reply.message_id.to_i64)\nif reply && replies.empty?\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.not_in_cache)\nend\nquote = message.quote\nif (from = reply.from) && (from.id == user.id)\n  reply_entities = reply.entities.map(&.type)\n  stripped_reply_entities = reply_entities - services.config.entity_types\n  if (stripped_reply_entities == reply_entities) && (reply.edit_date == nil)\n  else\n    quote = nil\n  end\nend\nif quote\n  replies.transform_values do |val|\n    ReplyParameters.new(message_id: val, quote: quote.text, quote_entities: quote.entities, quote_position: quote.position)\n  end\nelse\n  replies.transform_values do |val|\n    ReplyParameters.new(val)\n  end\nend\n"}},{"html_id":"user_from_message(message:Tourmaline::Message,services:Services):User|Nil-instance-method","name":"user_from_message","doc":"Returns the `User` associated with the message if the `User` could be found in the `Database`.\nThis will also update the `User`'s username and realname if they have changed since the last message.\n\nReturns `nil`  if:\n  - Message has no sender\n  - Message is a command\n  - `User` does not exist in the `Database`\n  - `User` cannot chat right now (due to a cooldown, blacklist, media limit, or having left the chat)","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> associated with the message if the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> could be found in the <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : User | Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handler.cr","line_number":31,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handler.cr#L31"},"def":{"name":"user_from_message","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User | ::Nil","visibility":"Public","body":"if info = message.from\nelse\n  return\nend\nif text = message.text\n  return_on_command(text)\nend\nif user = services.database.get_user(info.id.to_i64)\nelse\n  return services.relay.send_to_user(nil, info.id.to_i64, services.replies.not_in_chat)\nend\nif text\n  if user.can_chat?\n  else\n    return deny_user(user, services)\n  end\nelse\n  if user.can_chat?(services.config.media_limit_period)\n  else\n    return deny_user(user, services)\n  end\nend\nuser.update_names(info.username, info.full_name)\nuser\n"}}],"macros":[{"html_id":"return_on_command(text)-macro","name":"return_on_command","doc":"Returns early if the message *text* contains a command.\n\nIterates through all `HearsHandlers` that are meant to be commands,\nand returns early if the handler matches a substring in the text (for `RegexLiteral` patterns)\nor if the handler starts with a substring (for `StringLiteral` patterns)","summary":"<p>Returns early if the message <em>text</em> contains a command.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":""}],"args_string":"(text)","args_html":"(text)","location":{"filename":"src/private-parlor-xt/handlers/update_handler.cr","line_number":167,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handler.cr#L167"},"def":{"name":"return_on_command","args":[{"name":"text","external_name":"text","restriction":""}],"visibility":"Public","body":"      return if text.starts_with?('/')\n\n      \n{% for hears_handler in HearsHandler.all_subclasses.select do |sub_class|\n  (hears = sub_class.annotation(Hears))\nend %}\n\n        {% hears = hears_handler.annotation(Hears) %}\n\n        {% if hears[:command] && hears[:pattern].is_a?(RegexLiteral) %}\n          return if text.matches?({{ hears[:pattern] }})\n        {% else %}{% if hears[:command] && hears[:pattern].is_a?(StringLiteral) %}\n          return if text.starts_with?({{ hears[:pattern] }})\n        {% end %}{% end %}\n\n      {% end %}\n\n    \n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/UpvoteHandler","path":"PrivateParlorXT/UpvoteHandler.html","kind":"class","full_name":"PrivateParlorXT::UpvoteHandler","name":"UpvoteHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/HearsHandler","kind":"class","full_name":"PrivateParlorXT::HearsHandler","name":"HearsHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/HearsHandler","kind":"class","full_name":"PrivateParlorXT::HearsHandler","name":"HearsHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr","line_number":8,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr#L8"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command-like `HearsHandler` used for upvote messages sent by other users.","summary":"<p>A command-like <code><a href=\"../PrivateParlorXT/HearsHandler.html\">HearsHandler</a></code> used for upvote messages sent by other users.</p>","instance_methods":[{"html_id":"authorized?(user:User,message:Tourmaline::Message,authority:CommandPermissions,services:Services):Bool-instance-method","name":"authorized?","doc":"Checks if the user is authorized to upvote a message\n\nReturns `true` if so, `false` otherwise","summary":"<p>Checks if the user is authorized to upvote a message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, authority : CommandPermissions, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, authority : <a href=\"../PrivateParlorXT/CommandPermissions.html\">CommandPermissions</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr","line_number":54,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr#L54"},"def":{"name":"authorized?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if services.access.authorized?(user.rank, authority)\nelse\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.fail)\n  return false\nend\ntrue\n"}},{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Upvotes the message that the given *message* replies to if it meets requirements","summary":"<p>Upvotes the message that the given <em>message</em> replies to if it meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr","line_number":10,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr#L10"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Upvote, services)\nelse\n  return\nend\nif reply = reply_message(user, message, services)\nelse\n  return\nend\nif reply_user = reply_user(user, reply, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nupdate_user_activity(user, services)\nif upvote_message(user, reply_user, message, reply, services)\nelse\n  return\nend\nrecord_message_statistics(services)\nsend_replies(user, reply_user, message, reply, services)\n"}},{"html_id":"karma_level_up(reply_user:User,reply_parameters:ReplyParameters|Nil,services:Services):Nil-instance-method","name":"karma_level_up","doc":"Checks if the user has gained a karma level when karma levels are set, and if so, queues a 'leveled up' response","summary":"<p>Checks if the user has gained a karma level when karma levels are set, and if so, queues a 'leveled up' response</p>","abstract":false,"args":[{"name":"reply_user","external_name":"reply_user","restriction":"User"},{"name":"reply_parameters","external_name":"reply_parameters","restriction":"ReplyParameters | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(reply_user : User, reply_parameters : ReplyParameters | Nil, services : Services) : Nil","args_html":"(reply_user : <a href=\"../PrivateParlorXT/User.html\">User</a>, reply_parameters : <a href=\"../PrivateParlorXT/ReplyParameters.html\">ReplyParameters</a> | Nil, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr","line_number":145,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr#L145"},"def":{"name":"karma_level_up","args":[{"name":"reply_user","external_name":"reply_user","restriction":"User"},{"name":"reply_parameters","external_name":"reply_parameters","restriction":"ReplyParameters | ::Nil"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if services.config.karma_levels.empty?\n  return\nend\nnext_level = services.config.karma_levels.find(nil) do |range, _|\n  range.begin == reply_user.karma\nend\nif next_level\nelse\n  return\nend\nservices.relay.send_to_user(reply_parameters, reply_user.id, Format.substitute_message(services.replies.karma_level_up, {\"level\" => next_level[1]}))\n"}},{"html_id":"record_message_statistics(services:Services):Nil-instance-method","name":"record_message_statistics","doc":"Records message statistics about upvotes if the `Statistics` module is enabled","summary":"<p>Records message statistics about upvotes if the <code><a href=\"../PrivateParlorXT/Statistics.html\">Statistics</a></code> module is enabled</p>","abstract":false,"args":[{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(services : Services) : Nil","args_html":"(services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr","line_number":97,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr#L97"},"def":{"name":"record_message_statistics","args":[{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if stats = services.stats\nelse\n  return\nend\nstats.increment_upvotes\n"}},{"html_id":"send_replies(user:User,reply_user:User,message:Tourmaline::Message,reply:Tourmaline::Message,services:Services):Nil-instance-method","name":"send_replies","doc":"Queues 'gave upvote' and 'got upvoted' replies for the *user* and *reply_user*, respectively\n\nIncludes a reason for the upvote if karma reasons are enabled.","summary":"<p>Queues 'gave upvote' and 'got upvoted' replies for the <em>user</em> and <em>reply_user</em>, respectively</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"reply_user","external_name":"reply_user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, reply_user : User, message : Tourmaline::Message, reply : Tourmaline::Message, services : Services) : Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, reply_user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, reply : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr","line_number":106,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr#L106"},"def":{"name":"send_replies","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"reply_user","external_name":"reply_user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if services.config.karma_reasons\n  reason = Format.get_arg(message.text)\n  if reason\n    reason = truncate_karma_reason(reason)\n    services.relay.log_output(Format.substitute_message(services.logs.upvoted, {\"id\" => user.id.to_s, \"name\" => user.formatted_name, \"oid\" => reply_user.obfuscated_id, \"reason\" => reason}))\n  end\nend\ngave_upvote_reply = karma_reason(reason, services.replies.gave_upvote, services)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, gave_upvote_reply)\nif reply_user.hide_karma\nelse\n  reply_msid = services.history.receiver_message(reply.message_id.to_i64, reply_user.id)\n  if reply_msid\n    reply_parameters = ReplyParameters.new(reply_msid)\n  end\n  karma_level_up(reply_user, reply_parameters, services)\n  got_upvote_reply = karma_reason(reason, services.replies.got_upvote, services)\n  services.relay.send_to_user(reply_parameters, reply_user.id, got_upvote_reply)\nend\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming upvotes\n\nReturns `true` if the user is spamming upvotes, `false` otherwise","summary":"<p>Checks if the user is spamming upvotes</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr","line_number":66,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr#L66"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_upvote?(user.id, services.config.upvote_limit_interval)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.upvote_spam)\n  return true\nend\nfalse\n"}},{"html_id":"upvote_message(user:User,reply_user:User,message:Tourmaline::Message,reply:Tourmaline::Message,services:Services):Bool-instance-method","name":"upvote_message","doc":"Adds user's upvote to message history and update reply_user's karma\nReturns false if user has already upvoted the message or user attempted\nto give himself karma","summary":"<p>Adds user's upvote to message history and update reply_user's karma Returns false if user has already upvoted the message or user attempted to give himself karma</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"reply_user","external_name":"reply_user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, reply_user : User, message : Tourmaline::Message, reply : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, reply_user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, reply : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr","line_number":80,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr#L80"},"def":{"name":"upvote_message","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"reply_user","external_name":"reply_user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"reply","external_name":"reply","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if user.id == reply_user.id\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.upvoted_own_message)\n  return false\nend\nif !(services.history.add_rating(reply.message_id.to_i64, user.id))\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.already_voted)\n  return false\nend\nreply_user.increment_karma\nservices.database.update_user(reply_user)\ntrue\n"}},{"html_id":"user_from_message(message:Tourmaline::Message,services:Services):User|Nil-instance-method","name":"user_from_message","doc":"Returns the `User` associated with the message if the `User` could be found in the `Database`.\nThis will also update the `User`'s username and realname if they have changed since the last message.\n\nReturns `nil`  if:\n  - Message has no sender\n  - `User` does not exist in the `Database`\n  - `User` cannot use a command due to being blacklisted","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> associated with the message if the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> could be found in the <code><a href=\"../PrivateParlorXT/Database.html\">Database</a></code>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : User | Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a> | Nil","location":{"filename":"src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr","line_number":37,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/hears_handlers/upvote_handler.cr#L37"},"def":{"name":"user_from_message","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User | ::Nil","visibility":"Public","body":"if info = message.from\nelse\n  return\nend\nif user = services.database.get_user(info.id.to_i64)\nelse\n  return services.relay.send_to_user(nil, info.id.to_i64, services.replies.not_in_chat)\nend\nif user.can_use_command?\nelse\n  return deny_user(user, services)\nend\nuser.update_names(info.username, info.full_name)\nuser\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/User","path":"PrivateParlorXT/User.html","kind":"class","full_name":"PrivateParlorXT::User","name":"User","abstract":true,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/user.cr","line_number":11,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L11"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"private-parlor-xt/PrivateParlorXT/SQLiteUser","kind":"class","full_name":"PrivateParlorXT::SQLiteUser","name":"SQLiteUser"}],"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A reprentation of a Telegram user.\n\nAll users require an ID, which is obtained from the Telegram user (`Tourmaline::User`).\nThis ID should be unique and stored as a `UserID`.\n\n`Database` implementations should have their own `User` type that inherits\nfrom this class and is modified to work with the given implementation.","summary":"<p>A reprentation of a Telegram user.</p>","constructors":[{"html_id":"new(id:UserID,username:String|Nil=nil,realname:String=\"\",rank:Int32=0,joined:Time=Time.utc,left:Time|Nil=nil,last_active:Time=Time.utc,cooldown_until:Time|Nil=nil,blacklist_reason:String|Nil=nil,warnings:Int32=0,warn_expiry:Time|Nil=nil,karma:Int32=0,hide_karma:Bool|Nil=false,debug_enabled:Bool|Nil=false,tripcode:String|Nil=nil)-class-method","name":"new","doc":"Creates an instance of `User`.\n\n## Arguments:\n\n`id`\n:     unique `UserID` identifier for this user\n\n`username`\n:     username of this user; can be `nil`\n\n`realname`\n:     full name (first name + last name) of the user\n\n`rank`\n:     rank of this user, corresponding to either -10 (blacklisted) or one of the configurable ranks\n\n`joined`\n:     date and time the user joined the chat\n\n`left`\n:     date and time the user left the chat; if `nil`, the user is still in the chat\n\n`last_active`\n:     date and time the user last sent a message or used a command\n\n`cooldown_until`\n:     date and time for until which the user cannot send messages; if `nil`, the user is not in cooldown\n\n`blacklist_reason`\n:     described reason for blacklisting the user (see`BlacklistCommand`) ; set to `nil` by default\n\n`warnings`\n:     number of warnings the user received from `WarnCommand` or `DeleteCommand`; cooldown times are based off of this value\n\n`warn_expiry`\n:     date and time in which one of the `warnings` will be removed; if `nil`, user has no `warnings` to remove\n\n`karma`\n:     points the user acquired from upvotes, or lost from downvotes and warnings (see `UpvoteHandler`, `DownvoteHandler`)\n\n`hide_karma`\n:     toggle for receiving karma notifications (see `ToggleKarmaCommand`); if `true`, the user will not receive karma notifications\n\n`debug_enabled`\n:     toggle for debug mode (see `ToggleDebugCommand`); if `true`, the user will receive a copy of their sent message that everyone else received\n\n`tripcode`\n:     a name and password pairing used for generating pseudononyms attached to the user's message; if nil, user has no tripcode","summary":"<p>Creates an instance of <code><a href=\"../PrivateParlorXT/User.html\">User</a></code>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"UserID"},{"name":"username","default_value":"nil","external_name":"username","restriction":"String | ::Nil"},{"name":"realname","default_value":"\"\"","external_name":"realname","restriction":"String"},{"name":"rank","default_value":"0","external_name":"rank","restriction":"Int32"},{"name":"joined","default_value":"Time.utc","external_name":"joined","restriction":"Time"},{"name":"left","default_value":"nil","external_name":"left","restriction":"Time | ::Nil"},{"name":"last_active","default_value":"Time.utc","external_name":"last_active","restriction":"Time"},{"name":"cooldown_until","default_value":"nil","external_name":"cooldown_until","restriction":"Time | ::Nil"},{"name":"blacklist_reason","default_value":"nil","external_name":"blacklist_reason","restriction":"String | ::Nil"},{"name":"warnings","default_value":"0","external_name":"warnings","restriction":"Int32"},{"name":"warn_expiry","default_value":"nil","external_name":"warn_expiry","restriction":"Time | ::Nil"},{"name":"karma","default_value":"0","external_name":"karma","restriction":"Int32"},{"name":"hide_karma","default_value":"false","external_name":"hide_karma","restriction":"Bool | ::Nil"},{"name":"debug_enabled","default_value":"false","external_name":"debug_enabled","restriction":"Bool | ::Nil"},{"name":"tripcode","default_value":"nil","external_name":"tripcode","restriction":"String | ::Nil"}],"args_string":"(id : UserID, username : String | Nil = nil, realname : String = \"\", rank : Int32 = 0, joined : Time = Time.utc, left : Time | Nil = nil, last_active : Time = Time.utc, cooldown_until : Time | Nil = nil, blacklist_reason : String | Nil = nil, warnings : Int32 = 0, warn_expiry : Time | Nil = nil, karma : Int32 = 0, hide_karma : Bool | Nil = false, debug_enabled : Bool | Nil = false, tripcode : String | Nil = nil)","args_html":"(id : <a href=\"../PrivateParlorXT/UserID.html\">UserID</a>, username : String | Nil = <span class=\"n\">nil</span>, realname : String = <span class=\"s\">&quot;&quot;</span>, rank : Int32 = <span class=\"n\">0</span>, joined : Time = <span class=\"t\">Time</span>.utc, left : Time | Nil = <span class=\"n\">nil</span>, last_active : Time = <span class=\"t\">Time</span>.utc, cooldown_until : Time | Nil = <span class=\"n\">nil</span>, blacklist_reason : String | Nil = <span class=\"n\">nil</span>, warnings : Int32 = <span class=\"n\">0</span>, warn_expiry : Time | Nil = <span class=\"n\">nil</span>, karma : Int32 = <span class=\"n\">0</span>, hide_karma : Bool | Nil = <span class=\"n\">false</span>, debug_enabled : Bool | Nil = <span class=\"n\">false</span>, tripcode : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/private-parlor-xt/user.cr","line_number":105,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L105"},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"UserID"},{"name":"username","default_value":"nil","external_name":"username","restriction":"String | ::Nil"},{"name":"realname","default_value":"\"\"","external_name":"realname","restriction":"String"},{"name":"rank","default_value":"0","external_name":"rank","restriction":"Int32"},{"name":"joined","default_value":"Time.utc","external_name":"joined","restriction":"Time"},{"name":"left","default_value":"nil","external_name":"left","restriction":"Time | ::Nil"},{"name":"last_active","default_value":"Time.utc","external_name":"last_active","restriction":"Time"},{"name":"cooldown_until","default_value":"nil","external_name":"cooldown_until","restriction":"Time | ::Nil"},{"name":"blacklist_reason","default_value":"nil","external_name":"blacklist_reason","restriction":"String | ::Nil"},{"name":"warnings","default_value":"0","external_name":"warnings","restriction":"Int32"},{"name":"warn_expiry","default_value":"nil","external_name":"warn_expiry","restriction":"Time | ::Nil"},{"name":"karma","default_value":"0","external_name":"karma","restriction":"Int32"},{"name":"hide_karma","default_value":"false","external_name":"hide_karma","restriction":"Bool | ::Nil"},{"name":"debug_enabled","default_value":"false","external_name":"debug_enabled","restriction":"Bool | ::Nil"},{"name":"tripcode","default_value":"nil","external_name":"tripcode","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, username, realname, rank, joined, left, last_active, cooldown_until, blacklist_reason, warnings, warn_expiry, karma, hide_karma, debug_enabled, tripcode)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"blacklist(reason:String|Nil):Nil-instance-method","name":"blacklist","doc":"Set the user's `rank` to -10 (blacklisted), sets the `left` value, and updates the `blacklist_reason`","summary":"<p>Set the user's <code><a href=\"../PrivateParlorXT/User.html#rank%3AInt32-instance-method\">#rank</a></code> to -10 (blacklisted), sets the <code><a href=\"../PrivateParlorXT/User.html#left%3ATime%7CNil-instance-method\">#left</a></code> value, and updates the <code><a href=\"../PrivateParlorXT/User.html#blacklist_reason%3AString%7CNil-instance-method\">#blacklist_reason</a></code></p>","abstract":false,"args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"}],"args_string":"(reason : String | Nil) : Nil","args_html":"(reason : String | Nil) : Nil","location":{"filename":"src/private-parlor-xt/user.cr","line_number":253,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L253"},"def":{"name":"blacklist","args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"}],"return_type":"Nil","visibility":"Public","body":"@rank = -10\nself.set_left\n@blacklist_reason = reason\n"}},{"html_id":"blacklist_reason:String|Nil-instance-method","name":"blacklist_reason","doc":"Returns the reason why the user was blacklisted, or `nil` if a reason does not exist","summary":"<p>Returns the reason why the user was blacklisted, or <code>nil</code> if a reason does not exist</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":37,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L37"},"def":{"name":"blacklist_reason","return_type":"String | ::Nil","visibility":"Public","body":"@blacklist_reason"}},{"html_id":"blacklisted?:Bool-instance-method","name":"blacklisted?","doc":"Returns `true` if *rank* is -10; user is blacklisted.\n\nReturns `false` otherwise.","summary":"<p>Returns <code>true</code> if <em>rank</em> is -10; user is blacklisted.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":288,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L288"},"def":{"name":"blacklisted?","return_type":"Bool","visibility":"Public","body":"@rank == -10"}},{"html_id":"can_chat?(limit:Time::Span):Bool-instance-method","name":"can_chat?","doc":"Returns `true` if user is joined, not in cooldown, not blacklisted, and not limited; user can chat\n\nReturns `false` otherwise.","summary":"<p>Returns <code>true</code> if user is joined, not in cooldown, not blacklisted, and not limited; user can chat</p>","abstract":false,"args":[{"name":"limit","external_name":"limit","restriction":"Time::Span"}],"args_string":"(limit : Time::Span) : Bool","args_html":"(limit : Time::Span) : Bool","location":{"filename":"src/private-parlor-xt/user.cr","line_number":309,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L309"},"def":{"name":"can_chat?","args":[{"name":"limit","external_name":"limit","restriction":"Time::Span"}],"return_type":"Bool","visibility":"Public","body":"if self.rank > 0\n  self.can_chat?\nelse\n  (self.remove_cooldown && self.can_use_command?) && ((Time.utc - self.joined) > limit)\nend"}},{"html_id":"can_chat?:Bool-instance-method","name":"can_chat?","doc":"Returns `true` if user is joined, not in cooldown, and not blacklisted; user can chat\n\nReturns `false` otherwise.","summary":"<p>Returns <code>true</code> if user is joined, not in cooldown, and not blacklisted; user can chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":302,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L302"},"def":{"name":"can_chat?","return_type":"Bool","visibility":"Public","body":"self.remove_cooldown && self.can_use_command?"}},{"html_id":"can_use_command?:Bool-instance-method","name":"can_use_command?","doc":"Returns `true` if user is joined and not blacklisted; user can use commands\n\nReturns `false` otherwise.","summary":"<p>Returns <code>true</code> if user is joined and not blacklisted; user can use commands</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":320,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L320"},"def":{"name":"can_use_command?","return_type":"Bool","visibility":"Public","body":"(!self.blacklisted?) && (!self.left?)"}},{"html_id":"cooldown(base:Int32):Time::Span-instance-method","name":"cooldown","doc":"Gives the user an exponentially increasing cooldown from the given *base* value and current number of `warnings`","summary":"<p>Gives the user an exponentially increasing cooldown from the given <em>base</em> value and current number of <code><a href=\"../PrivateParlorXT/User.html#warnings%3AInt32-instance-method\">#warnings</a></code></p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"Int32"}],"args_string":"(base : Int32) : Time::Span","args_html":"(base : Int32) : Time::Span","location":{"filename":"src/private-parlor-xt/user.cr","line_number":217,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L217"},"def":{"name":"cooldown","args":[{"name":"base","external_name":"base","restriction":"Int32"}],"return_type":"Time::Span","visibility":"Public","body":"begin\n  warnings = @warnings\n  if @warnings < 0\n    warnings = 0\n  end\n  duration = base ** warnings\nrescue OverflowError\n  duration = 525950\nend\nif duration > 525950\n  duration = 52.weeks\nelse\n  duration = duration.minutes\nend\n@cooldown_until = Time.utc + duration\nduration\n"}},{"html_id":"cooldown(time:Time::Span):Time::Span-instance-method","name":"cooldown","doc":"Gives the user a cooldown based on the given `Time::Span`","summary":"<p>Gives the user a cooldown based on the given <code>Time::Span</code></p>","abstract":false,"args":[{"name":"time","external_name":"time","restriction":"Time::Span"}],"args_string":"(time : Time::Span) : Time::Span","args_html":"(time : Time::Span) : Time::Span","location":{"filename":"src/private-parlor-xt/user.cr","line_number":240,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L240"},"def":{"name":"cooldown","args":[{"name":"time","external_name":"time","restriction":"Time::Span"}],"return_type":"Time::Span","visibility":"Public","body":"@cooldown_until = Time.utc + time\ntime\n"}},{"html_id":"cooldown_until:Time|Nil-instance-method","name":"cooldown_until","doc":"Returns the `Time` until which the user is in cooldown, or `nil` if the user is not cooldowned","summary":"<p>Returns the <code>Time</code> until which the user is in cooldown, or <code>nil</code> if the user is not cooldowned</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":34,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L34"},"def":{"name":"cooldown_until","return_type":"Time | ::Nil","visibility":"Public","body":"@cooldown_until"}},{"html_id":"debug_enabled:Bool|Nil-instance-method","name":"debug_enabled","doc":"Returns true if the suer has debug mode enabled, `false` otherwise","summary":"<p>Returns true if the suer has debug mode enabled, <code>false</code> otherwise</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":52,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L52"},"def":{"name":"debug_enabled","return_type":"Bool | ::Nil","visibility":"Public","body":"@debug_enabled"}},{"html_id":"decrement_karma(amount:Int32=1):Nil-instance-method","name":"decrement_karma","doc":"Decrement the user's `karma` by a given amount (1 by default)\nOn arithmetic overflow, sets user's `karma` to the minimum `Int32` value","summary":"<p>Decrement the user's <code><a href=\"../PrivateParlorXT/User.html#karma%3AInt32-instance-method\">#karma</a></code> by a given amount (1 by default) On arithmetic overflow, sets user's <code><a href=\"../PrivateParlorXT/User.html#karma%3AInt32-instance-method\">#karma</a></code> to the minimum <code>Int32</code> value</p>","abstract":false,"args":[{"name":"amount","default_value":"1","external_name":"amount","restriction":"Int32"}],"args_string":"(amount : Int32 = 1) : Nil","args_html":"(amount : Int32 = <span class=\"n\">1</span>) : Nil","location":{"filename":"src/private-parlor-xt/user.cr","line_number":210,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L210"},"def":{"name":"decrement_karma","args":[{"name":"amount","default_value":"1","external_name":"amount","restriction":"Int32"}],"return_type":"Nil","visibility":"Public","body":"begin\n  @karma = @karma - amount\nrescue OverflowError\n  @karma = Int32::MIN\nend"}},{"html_id":"formatted_name:String-instance-method","name":"formatted_name","doc":"Get the formatted name of the user.\nIf the user has a `username`, returns it with the '@' prepended to it\nOtherwise, returns the `realname`","summary":"<p>Get the formatted name of the user.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":139,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L139"},"def":{"name":"formatted_name","return_type":"String","visibility":"Public","body":"if username = @username\n  \"@\" + username\nelse\n  @realname\nend"}},{"html_id":"hide_karma:Bool|Nil-instance-method","name":"hide_karma","doc":"Returns true if the user has karma notifications disabled, `false` otherwise","summary":"<p>Returns true if the user has karma notifications disabled, <code>false</code> otherwise</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":49,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L49"},"def":{"name":"hide_karma","return_type":"Bool | ::Nil","visibility":"Public","body":"@hide_karma"}},{"html_id":"id:UserID-instance-method","name":"id","doc":"Returns the user's ID","summary":"<p>Returns the user's ID</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":13,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L13"},"def":{"name":"id","return_type":"UserID","visibility":"Public","body":"@id"}},{"html_id":"increment_karma(amount:Int32=1):Nil-instance-method","name":"increment_karma","doc":"Increment the user's `karma` by a given amount (1 by default)\nOn arithmetic overflow, sets user's `karma` to the maximum `Int32` value","summary":"<p>Increment the user's <code><a href=\"../PrivateParlorXT/User.html#karma%3AInt32-instance-method\">#karma</a></code> by a given amount (1 by default) On arithmetic overflow, sets user's <code><a href=\"../PrivateParlorXT/User.html#karma%3AInt32-instance-method\">#karma</a></code> to the maximum <code>Int32</code> value</p>","abstract":false,"args":[{"name":"amount","default_value":"1","external_name":"amount","restriction":"Int32"}],"args_string":"(amount : Int32 = 1) : Nil","args_html":"(amount : Int32 = <span class=\"n\">1</span>) : Nil","location":{"filename":"src/private-parlor-xt/user.cr","line_number":202,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L202"},"def":{"name":"increment_karma","args":[{"name":"amount","default_value":"1","external_name":"amount","restriction":"Int32"}],"return_type":"Nil","visibility":"Public","body":"begin\n  @karma = @karma + amount\nrescue OverflowError\n  @karma = Int32::MAX\nend"}},{"html_id":"joined:Time-instance-method","name":"joined","doc":"Returns the `Time` the user joined the chat","summary":"<p>Returns the <code>Time</code> the user joined the chat</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":25,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L25"},"def":{"name":"joined","return_type":"Time","visibility":"Public","body":"@joined"}},{"html_id":"karma:Int32-instance-method","name":"karma","doc":"Returns the user's current amount of karma","summary":"<p>Returns the user's current amount of karma</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":46,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L46"},"def":{"name":"karma","return_type":"Int32","visibility":"Public","body":"@karma"}},{"html_id":"last_active:Time-instance-method","name":"last_active","doc":"Returns the `Time` the user was last active (i.e., the last time a message was sent or a command was used)","summary":"<p>Returns the <code>Time</code> the user was last active (i.e., the last time a message was sent or a command was used)</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":31,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L31"},"def":{"name":"last_active","return_type":"Time","visibility":"Public","body":"@last_active"}},{"html_id":"left:Time|Nil-instance-method","name":"left","doc":"Returns the `Time` the user left the chat, or `nil` if the user has not left","summary":"<p>Returns the <code>Time</code> the user left the chat, or <code>nil</code> if the user has not left</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":28,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L28"},"def":{"name":"left","return_type":"Time | ::Nil","visibility":"Public","body":"@left"}},{"html_id":"left?:Bool-instance-method","name":"left?","doc":"Returns `true` if *left* is not `nil`; user has left the chat.\n\nReturns `false` otherwise.","summary":"<p>Returns <code>true</code> if <em>left</em> is not <code>nil</code>; user has left the chat.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":295,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L295"},"def":{"name":"left?","return_type":"Bool","visibility":"Public","body":"@left != nil"}},{"html_id":"obfuscated_id:String-instance-method","name":"obfuscated_id","doc":"Generate an obfuscated ID for the user, used for log messages and commands like `InfoCommand`","summary":"<p>Generate an obfuscated ID for the user, used for log messages and commands like <code><a href=\"../PrivateParlorXT/InfoCommand.html\">InfoCommand</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":148,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L148"},"def":{"name":"obfuscated_id","return_type":"String","visibility":"Public","body":"(Random.new(@id + Time.utc.at_beginning_of_day.to_unix)).base64(3)"}},{"html_id":"obfuscated_karma:Int32-instance-method","name":"obfuscated_karma","doc":"Get the user's obfuscated `karma`","summary":"<p>Get the user's obfuscated <code><a href=\"../PrivateParlorXT/User.html#karma%3AInt32-instance-method\">#karma</a></code></p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":154,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L154"},"def":{"name":"obfuscated_karma","return_type":"Int32","visibility":"Public","body":"offset = ((@karma * 0.2).abs + 2).round.to_i\n(@karma + (Random.rand(0..(offset + 1)))) - offset\n"}},{"html_id":"rank:Int32-instance-method","name":"rank","doc":"Returns the user's current rank value","summary":"<p>Returns the user's current rank value</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L22"},"def":{"name":"rank","return_type":"Int32","visibility":"Public","body":"@rank"}},{"html_id":"realname:String-instance-method","name":"realname","doc":"Returns the user's full name","summary":"<p>Returns the user's full name</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":19,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L19"},"def":{"name":"realname","return_type":"String","visibility":"Public","body":"@realname"}},{"html_id":"rejoin:Nil-instance-method","name":"rejoin","doc":"Set `left` to `nil`, meaning that the User has joined the chat.","summary":"<p>Set <code><a href=\"../PrivateParlorXT/User.html#left%3ATime%7CNil-instance-method\">#left</a></code> to <code>nil</code>, meaning that the User has joined the chat.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":160,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L160"},"def":{"name":"rejoin","return_type":"Nil","visibility":"Public","body":"@left = nil"}},{"html_id":"remove_cooldown(override:Bool=false):Bool-instance-method","name":"remove_cooldown","doc":"Removes a cooldown from a user if it has expired.\n\nReturns `true` if the cooldown can be expired, `false` otherwise","summary":"<p>Removes a cooldown from a user if it has expired.</p>","abstract":false,"args":[{"name":"override","default_value":"false","external_name":"override","restriction":"Bool"}],"args_string":"(override : Bool = false) : Bool","args_html":"(override : Bool = <span class=\"n\">false</span>) : Bool","location":{"filename":"src/private-parlor-xt/user.cr","line_number":262,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L262"},"def":{"name":"remove_cooldown","args":[{"name":"override","default_value":"false","external_name":"override","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"if cooldown = @cooldown_until\nelse\n  return true\nend\nif cooldown < Time.utc || override\nelse\n  return false\nend\n@cooldown_until = nil\ntrue\n"}},{"html_id":"remove_warning(amount:Int32,warn_lifespan:Time::Span):Nil-instance-method","name":"remove_warning","doc":"Removes the given *amount* of `warnings` from a user\n\nIf the user still has `warnings` after the removal, reset the `warn_expiry` to a later time based on *warn_lifespan*","summary":"<p>Removes the given <em>amount</em> of <code><a href=\"../PrivateParlorXT/User.html#warnings%3AInt32-instance-method\">#warnings</a></code> from a user</p>","abstract":false,"args":[{"name":"amount","external_name":"amount","restriction":"Int32"},{"name":"warn_lifespan","external_name":"warn_lifespan","restriction":"Time::Span"}],"args_string":"(amount : Int32, warn_lifespan : Time::Span) : Nil","args_html":"(amount : Int32, warn_lifespan : Time::Span) : Nil","location":{"filename":"src/private-parlor-xt/user.cr","line_number":275,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L275"},"def":{"name":"remove_warning","args":[{"name":"amount","external_name":"amount","restriction":"Int32"},{"name":"warn_lifespan","external_name":"warn_lifespan","restriction":"Time::Span"}],"return_type":"Nil","visibility":"Public","body":"@warnings = @warnings - amount\nif @warnings > 0\n  @warn_expiry = Time.utc + warn_lifespan\nelse\n  @warn_expiry = nil\nend\n"}},{"html_id":"set_active:Nil-instance-method","name":"set_active","doc":"Set `last_active` to the current time","summary":"<p>Set <code><a href=\"../PrivateParlorXT/User.html#last_active%3ATime-instance-method\">#last_active</a></code> to the current time</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":171,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L171"},"def":{"name":"set_active","return_type":"Nil","visibility":"Public","body":"@last_active = Time.utc"}},{"html_id":"set_left:Nil-instance-method","name":"set_left","doc":"Set `left` to the current time","summary":"<p>Set <code><a href=\"../PrivateParlorXT/User.html#left%3ATime%7CNil-instance-method\">#left</a></code> to the current time</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":176,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L176"},"def":{"name":"set_left","return_type":"Nil","visibility":"Public","body":"@left = Time.utc"}},{"html_id":"set_rank(rank:Int32):Nil-instance-method","name":"set_rank","doc":"Set `rank` to the given value","summary":"<p>Set <code><a href=\"../PrivateParlorXT/User.html#rank%3AInt32-instance-method\">#rank</a></code> to the given value</p>","abstract":false,"args":[{"name":"rank","external_name":"rank","restriction":"Int32"}],"args_string":"(rank : Int32) : Nil","args_html":"(rank : Int32) : Nil","location":{"filename":"src/private-parlor-xt/user.cr","line_number":181,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L181"},"def":{"name":"set_rank","args":[{"name":"rank","external_name":"rank","restriction":"Int32"}],"return_type":"Nil","visibility":"Public","body":"@rank = rank"}},{"html_id":"set_tripcode(tripcode:String):Nil-instance-method","name":"set_tripcode","doc":"Set `tripcode` to the given value","summary":"<p>Set <code><a href=\"../PrivateParlorXT/User.html#tripcode%3AString%7CNil-instance-method\">#tripcode</a></code> to the given value</p>","abstract":false,"args":[{"name":"tripcode","external_name":"tripcode","restriction":"String"}],"args_string":"(tripcode : String) : Nil","args_html":"(tripcode : String) : Nil","location":{"filename":"src/private-parlor-xt/user.cr","line_number":186,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L186"},"def":{"name":"set_tripcode","args":[{"name":"tripcode","external_name":"tripcode","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"@tripcode = tripcode"}},{"html_id":"to_a:Array(UserID|String|Int32|Time|Bool|Nil)-instance-method","name":"to_a","doc":"Returns an array with all the values in `User`. Intended for database query arguments.","summary":"<p>Returns an array with all the values in <code><a href=\"../PrivateParlorXT/User.html\">User</a></code>.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":125,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L125"},"def":{"name":"to_a","return_type":"Array(UserID | String | Int32 | Time | Bool | Nil)","visibility":"Public","body":"{% if true %}\n        [\n        {% for var in User.instance_vars[0..-2] %}\n          @{{ var.id }},\n        {% end %}\n          @{{ User.instance_vars.last.id }}\n        ]\n      {% end %}"}},{"html_id":"toggle_debug:Nil-instance-method","name":"toggle_debug","doc":"Switches user's `debug_enabled` toggle","summary":"<p>Switches user's <code><a href=\"../PrivateParlorXT/User.html#debug_enabled%3ABool%7CNil-instance-method\">#debug_enabled</a></code> toggle</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":196,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L196"},"def":{"name":"toggle_debug","return_type":"Nil","visibility":"Public","body":"@debug_enabled = !debug_enabled"}},{"html_id":"toggle_karma:Nil-instance-method","name":"toggle_karma","doc":"Switches user's `hide_karma` notifications toggle","summary":"<p>Switches user's <code><a href=\"../PrivateParlorXT/User.html#hide_karma%3ABool%7CNil-instance-method\">#hide_karma</a></code> notifications toggle</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":191,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L191"},"def":{"name":"toggle_karma","return_type":"Nil","visibility":"Public","body":"@hide_karma = !hide_karma"}},{"html_id":"tripcode:String|Nil-instance-method","name":"tripcode","doc":"Returns a `String` containing the user's tripcode name and password for generating tripcodes, or `nil` if the user has no tripcode set","summary":"<p>Returns a <code>String</code> containing the user's tripcode name and password for generating tripcodes, or <code>nil</code> if the user has no tripcode set</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":55,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L55"},"def":{"name":"tripcode","return_type":"String | ::Nil","visibility":"Public","body":"@tripcode"}},{"html_id":"update_names(username:String|Nil,fullname:String):Nil-instance-method","name":"update_names","doc":"Sets user's `username` and `realname` to the given values","summary":"<p>Sets user's <code><a href=\"../PrivateParlorXT/User.html#username%3AString%7CNil-instance-method\">#username</a></code> and <code><a href=\"../PrivateParlorXT/User.html#realname%3AString-instance-method\">#realname</a></code> to the given values</p>","abstract":false,"args":[{"name":"username","external_name":"username","restriction":"String | Nil"},{"name":"fullname","external_name":"fullname","restriction":"String"}],"args_string":"(username : String | Nil, fullname : String) : Nil","args_html":"(username : String | Nil, fullname : String) : Nil","location":{"filename":"src/private-parlor-xt/user.cr","line_number":165,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L165"},"def":{"name":"update_names","args":[{"name":"username","external_name":"username","restriction":"String | Nil"},{"name":"fullname","external_name":"fullname","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"@username = username\n@realname = fullname\n"}},{"html_id":"username:String|Nil-instance-method","name":"username","doc":"Returns the user's unformatted username, or `nil` if it does not exist","summary":"<p>Returns the user's unformatted username, or <code>nil</code> if it does not exist</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":16,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L16"},"def":{"name":"username","return_type":"String | ::Nil","visibility":"Public","body":"@username"}},{"html_id":"warn(lifespan:Int32):Nil-instance-method","name":"warn","doc":"Increments the user's `warnings` and sets the `warn_expiry` to the current time plus the *lifespan* of a warning","summary":"<p>Increments the user's <code><a href=\"../PrivateParlorXT/User.html#warnings%3AInt32-instance-method\">#warnings</a></code> and sets the <code><a href=\"../PrivateParlorXT/User.html#warn_expiry%3ATime%7CNil-instance-method\">#warn_expiry</a></code> to the current time plus the <em>lifespan</em> of a warning</p>","abstract":false,"args":[{"name":"lifespan","external_name":"lifespan","restriction":"Int32"}],"args_string":"(lifespan : Int32) : Nil","args_html":"(lifespan : Int32) : Nil","location":{"filename":"src/private-parlor-xt/user.cr","line_number":247,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L247"},"def":{"name":"warn","args":[{"name":"lifespan","external_name":"lifespan","restriction":"Int32"}],"return_type":"Nil","visibility":"Public","body":"@warnings = @warnings + 1\n@warn_expiry = Time.utc + lifespan.hours\n"}},{"html_id":"warn_expiry:Time|Nil-instance-method","name":"warn_expiry","doc":"Returns the `Time` when one of the `warnings` will expire, or `nil` if such a time does not exit","summary":"<p>Returns the <code>Time</code> when one of the <code><a href=\"../PrivateParlorXT/User.html#warnings%3AInt32-instance-method\">#warnings</a></code> will expire, or <code>nil</code> if such a time does not exit</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":43,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L43"},"def":{"name":"warn_expiry","return_type":"Time | ::Nil","visibility":"Public","body":"@warn_expiry"}},{"html_id":"warnings:Int32-instance-method","name":"warnings","doc":"Returns the number of warnings the user has","summary":"<p>Returns the number of warnings the user has</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/user.cr","line_number":40,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/user.cr#L40"},"def":{"name":"warnings","return_type":"Int32","visibility":"Public","body":"@warnings"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/UserID","path":"PrivateParlorXT/UserID.html","kind":"alias","full_name":"PrivateParlorXT::UserID","name":"UserID","abstract":false,"locations":[{"filename":"src/private-parlor-xt/constants.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/constants.cr#L3"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":true,"aliased":"Int64","aliased_html":"Int64","const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"The `Int64` ID of a user","summary":"<p>The <code>Int64</code> ID of a user</p>"},{"html_id":"private-parlor-xt/PrivateParlorXT/UsersCommand","path":"PrivateParlorXT/UsersCommand.html","kind":"class","full_name":"PrivateParlorXT::UsersCommand","name":"UsersCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/users_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/users_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command for retrieving information about user counts","summary":"<p>A command for retrieving information about user counts</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Returns a message containing either the total number of users or the full number of joined, left, and blacklisted users if user is authorized to see that information","summary":"<p>Returns a message containing either the total number of users or the full number of joined, left, and blacklisted users if user is authorized to see that information</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/users_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/users_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nupdate_user_activity(user, services)\ncounts = services.database.user_counts\nif services.access.authorized?(user.rank, :Users)\n  response = Format.substitute_reply(services.replies.user_count_full, {\"joined\" => (counts[:total] - counts[:left]).to_s, \"left\" => counts[:left].to_s, \"blacklisted\" => counts[:blacklisted].to_s, \"total\" => counts[:total].to_s})\nelse\n  response = Format.substitute_reply(services.replies.user_count, {\"total\" => counts[:total].to_s})\nend\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, response)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/VenueHandler","path":"PrivateParlorXT/VenueHandler.html","kind":"class","full_name":"PrivateParlorXT::VenueHandler","name":"VenueHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/venue_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/venue_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for venue message updates","summary":"<p>A handler for venue message updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the venue message meets requirements and relays it","summary":"<p>Checks if the venue message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/venue_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/venue_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif authorized?(user, message, :Venue, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif venue = message.venue\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Venues, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_venue(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, replies: reply_messages, effect: services.config.allow_effects ? message.effect_id : nil), venue)\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming venue messages\n\nReturns `true` if the user is spamming venue messages, `false` otherwise","summary":"<p>Checks if the user is spamming venue messages</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/venue_handler.cr","line_number":50,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/venue_handler.cr#L50"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_venue?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a venue message","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a venue message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/venue_handler.cr","line_number":93,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/venue_handler.cr#L93"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_venue >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_venue)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a venue message when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for venue messages is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a venue message when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/venue_handler.cr","line_number":70,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/venue_handler.cr#L70"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_venue >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_venue\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_venue.to_s, \"type\" => \"venue\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/VersionCommand","path":"PrivateParlorXT/VersionCommand.html","kind":"class","full_name":"PrivateParlorXT::VersionCommand","name":"VersionCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/version_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/version_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for getting the version of this bot and its source code","summary":"<p>A handler for getting the version of this bot and its source code</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Returns a message containing this bots's version number and a link to the soure code if the user exists and is not blacklisted","summary":"<p>Returns a message containing this bots's version number and a link to the soure code if the user exists and is not blacklisted</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/version_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/version_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nupdate_user_activity(user, services)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, version)\n"}},{"html_id":"version:String-instance-method","name":"version","doc":"Returns a message containing the program version and a link to its Git repo.\n\nFeel free to edit this if you fork the code.","summary":"<p>Returns a message containing the program version and a link to its Git repo.</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/handlers/command_handlers/version_command.cr","line_number":20,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/version_command.cr#L20"},"def":{"name":"version","return_type":"String","visibility":"Public","body":"\"Private Parlor XT v#{Format.escape_mdv2(VERSION)} \\\\~ [\\\\[Source\\\\]](https://github.com/Private-Parlor/Private-Parlor-XT)\""}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/VideoHandler","path":"PrivateParlorXT/VideoHandler.html","kind":"class","full_name":"PrivateParlorXT::VideoHandler","name":"VideoHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/video_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/video_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for video message updates","summary":"<p>A handler for video message updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the video message meets requirements and relays it","summary":"<p>Checks if the video message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/video_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/video_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif meets_requirements?(message)\nelse\n  return\nend\nif authorized?(user, message, :Video, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif video = message.video\nelse\n  return\nend\ncaption, entities = Format.text_and_entities(message, user, services)\nif caption\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nif unique?(user, message, services)\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Videos, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_video(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, replies: reply_messages, media: video.file_id, text: caption, entities: entities, spoiler: services.config.allow_spoilers ? message.has_media_spoiler? : false, effect: services.config.allow_effects ? message.effect_id : nil, caption_above_media: message.show_caption_above_media?))\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming video messages\n\nReturns `true` if the user is spamming video messages, `false` otherwise","summary":"<p>Checks if the user is spamming video messages</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/video_handler.cr","line_number":59,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/video_handler.cr#L59"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_video?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a video message","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a video message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/video_handler.cr","line_number":102,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/video_handler.cr#L102"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_video >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_video)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a video message when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for video messages is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a video message when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/video_handler.cr","line_number":79,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/video_handler.cr#L79"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_video >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_video\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_video.to_s, \"type\" => \"video\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/VideoNoteHandler","path":"PrivateParlorXT/VideoNoteHandler.html","kind":"class","full_name":"PrivateParlorXT::VideoNoteHandler","name":"VideoNoteHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/video_note_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/video_note_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for video note message updates","summary":"<p>A handler for video note message updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the video note message meets requirements and relays it","summary":"<p>Checks if the video note message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/video_note_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/video_note_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif authorized?(user, message, :VideoNote, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif video_note = message.video_note\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nif unique?(user, message, services)\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::VideoNotes, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_video_note(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, replies: reply_messages, media: video_note.file_id, effect: services.config.allow_effects ? message.effect_id : nil))\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming video note messages\n\nReturns `true` if the user is spamming video note messages, `false` otherwise","summary":"<p>Checks if the user is spamming video note messages</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/video_note_handler.cr","line_number":52,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/video_note_handler.cr#L52"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_video_note?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a video note message","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a video note message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/video_note_handler.cr","line_number":95,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/video_note_handler.cr#L95"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_video_note >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_video_note)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a video note message when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for video note messages is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a video note message when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/video_note_handler.cr","line_number":72,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/video_note_handler.cr#L72"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_video_note >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_video_note\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_video_note.to_s, \"type\" => \"video note\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/VoiceHandler","path":"PrivateParlorXT/VoiceHandler.html","kind":"class","full_name":"PrivateParlorXT::VoiceHandler","name":"VoiceHandler","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/UpdateHandler","kind":"class","full_name":"PrivateParlorXT::UpdateHandler","name":"UpdateHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/update_handlers/voice_handler.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/voice_handler.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A handler for voice message updates","summary":"<p>A handler for voice message updates</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Checks if the voice message meets requirements and relays it","summary":"<p>Checks if the voice message meets requirements and relays it</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/voice_handler.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/voice_handler.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif message.forward_origin\n  return\nend\nif authorized?(user, message, :Voice, services)\nelse\n  return\nend\nif sufficient_karma?(user, message, services)\nelse\n  return\nend\nif spamming?(user, message, services)\n  return\nend\nif voice = message.voice\nelse\n  return\nend\ncaption, entities = Format.text_and_entities(message, user, services)\nif caption\nelse\n  return\nend\nreply_messages = reply_receivers(message, user, services)\nif reply_messages\nelse\n  return\nend\nif unique?(user, message, services)\nelse\n  return\nend\nrecord_message_statistics(Statistics::Messages::Voice, services)\nuser = spend_karma(user, services)\nnew_message = services.history.new_message(user.id, message.message_id.to_i64)\nupdate_user_activity(user, services)\nreceivers = message_receivers(user, services)\nservices.relay.send_voice(RelayParameters.new(original_message: new_message, sender: user.id, receivers: receivers, replies: reply_messages, media: voice.file_id, text: caption, entities: entities, effect: services.config.allow_effects ? message.effect_id : nil))\n"}},{"html_id":"spamming?(user:User,message:Tourmaline::Message,services:Services):Bool-instance-method","name":"spamming?","doc":"Checks if the user is spamming voice messages\n\nReturns `true` if the user is spamming voice messages, `false` otherwise","summary":"<p>Checks if the user is spamming voice messages</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/voice_handler.cr","line_number":57,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/voice_handler.cr#L57"},"def":{"name":"spamming?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool","visibility":"Public","body":"if spam = services.spam\nelse\n  return false\nend\nif spam.spammy_voice?(user.id)\n  services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.spamming)\n  return true\nend\nfalse\n"}},{"html_id":"spend_karma(user:User,services:Services):User-instance-method","name":"spend_karma","doc":"Returns the `User` with decremented karma when `KarmaHandler` is enabled and\n*user* has sufficient karma for a voice message","summary":"<p>Returns the <code><a href=\"../PrivateParlorXT/User.html\">User</a></code> with decremented karma when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled and <em>user</em> has sufficient karma for a voice message</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, services : Services) : User","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : <a href=\"../PrivateParlorXT/User.html\">User</a>","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/voice_handler.cr","line_number":100,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/voice_handler.cr#L100"},"def":{"name":"spend_karma","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"User","visibility":"Public","body":"if karma = services.karma\nelse\n  return user\nend\nif karma.karma_voice >= 0\nelse\n  return user\nend\nif user.rank >= karma.cutoff_rank\n  return user\nend\nuser.decrement_karma(karma.karma_voice)\nuser\n"}},{"html_id":"sufficient_karma?(user:User,message:Tourmaline::Message,services:Services):Bool|Nil-instance-method","name":"sufficient_karma?","doc":"Checks if the user has sufficient karma to send a voice message when `KarmaHandler` is enabled\n\nReturns `true` if:\n  - `KarmaHandler` is not enabled\n  - The price for voice messages is less than 0\n  - The *user's* `Rank` is equal to or greater than the cutoff `Rank`\n  - User has sufficient karma\n\nReturns `nil` if the user does not have sufficient karma","summary":"<p>Checks if the user has sufficient karma to send a voice message when <code><a href=\"../PrivateParlorXT/KarmaHandler.html\">KarmaHandler</a></code> is enabled</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(user : User, message : Tourmaline::Message, services : Services) : Bool | Nil","args_html":"(user : <a href=\"../PrivateParlorXT/User.html\">User</a>, message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Bool | Nil","location":{"filename":"src/private-parlor-xt/handlers/update_handlers/voice_handler.cr","line_number":77,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/update_handlers/voice_handler.cr#L77"},"def":{"name":"sufficient_karma?","args":[{"name":"user","external_name":"user","restriction":"User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if karma = services.karma\nelse\n  return true\nend\nif karma.karma_voice >= 0\nelse\n  return true\nend\nif user.rank >= karma.cutoff_rank\n  return true\nend\nif user.karma >= karma.karma_voice\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, Format.substitute_reply(services.replies.insufficient_karma, {\"amount\" => karma.karma_voice.to_s, \"type\" => \"voice\"}))\nend\ntrue\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/WarnCommand","path":"PrivateParlorXT/WarnCommand.html","kind":"class","full_name":"PrivateParlorXT::WarnCommand","name":"WarnCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/warn_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/warn_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to give a user a warning and a cooldown without deleting the message","summary":"<p>A command used to give a user a warning and a cooldown without deleting the message</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Warns the user who sent a message the given *message* replies to if the *message* meets requirements\n\nWarning a message will give the sender a warning and a cooldown, but will not delete the message","summary":"<p>Warns the user who sent a message the given <em>message</em> replies to if the <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/warn_command.cr","line_number":11,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/warn_command.cr#L11"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Warn, services)\nelse\n  return\nend\nif reply = reply_message(user, message, services)\nelse\n  return\nend\nif reply_user = reply_user(user, reply, services)\nelse\n  return\nend\nif services.history.warned?(reply.message_id.to_i64)\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.already_warned)\nend\nupdate_user_activity(user, services)\nservices.history.add_warning(reply.message_id.to_i64)\nduration = reply_user.cooldown(services.config.cooldown_base)\nreply_user.warn(services.config.warn_lifespan)\nreply_user.decrement_karma(services.config.warn_deduction)\nservices.database.update_user(reply_user)\noriginal_message = services.history.origin_message(reply.message_id.to_i64)\nreason = Format.get_arg(message.text)\ncooldown_until = Format.time_span(duration, services.locale)\nresponse = Format.substitute_reply(services.replies.cooldown_given, {\"reason\" => Format.reason(reason, services.replies), \"duration\" => cooldown_until})\nlog = Format.substitute_message(services.logs.warned, {\"id\" => user.id.to_s, \"name\" => user.formatted_name, \"oid\" => reply_user.obfuscated_id, \"duration\" => cooldown_until, \"reason\" => Format.reason_log(reason, services.logs)})\nif original_message\n  original_message = ReplyParameters.new(original_message)\nend\nservices.relay.send_to_user(original_message, reply_user.id, response)\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.success)\n"}}]},{"html_id":"private-parlor-xt/PrivateParlorXT/WhitelistCommand","path":"PrivateParlorXT/WhitelistCommand.html","kind":"class","full_name":"PrivateParlorXT::WhitelistCommand","name":"WhitelistCommand","abstract":false,"superclass":{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},"ancestors":[{"html_id":"private-parlor-xt/PrivateParlorXT/CommandHandler","kind":"class","full_name":"PrivateParlorXT::CommandHandler","name":"CommandHandler"},{"html_id":"private-parlor-xt/PrivateParlorXT/Handler","kind":"class","full_name":"PrivateParlorXT::Handler","name":"Handler"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/private-parlor-xt/handlers/command_handlers/whitelist_command.cr","line_number":7,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/whitelist_command.cr#L7"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"private-parlor-xt/PrivateParlorXT","kind":"module","full_name":"PrivateParlorXT","name":"PrivateParlorXT"},"doc":"A command used to whitelist users through the Telegram bot","summary":"<p>A command used to whitelist users through the Telegram bot</p>","instance_methods":[{"html_id":"do(message:Tourmaline::Message,services:Services):Nil-instance-method","name":"do","doc":"Whitelists a user, allowing them to join the chat, if the given *message* meets requirements","summary":"<p>Whitelists a user, allowing them to join the chat, if the given <em>message</em> meets requirements</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"args_string":"(message : Tourmaline::Message, services : Services) : Nil","args_html":"(message : <a href=\"../Tourmaline/Message.html\">Tourmaline::Message</a>, services : <a href=\"../PrivateParlorXT/Services.html\">Services</a>) : Nil","location":{"filename":"src/private-parlor-xt/handlers/command_handlers/whitelist_command.cr","line_number":9,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/handlers/command_handlers/whitelist_command.cr#L9"},"def":{"name":"do","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"services","external_name":"services","restriction":"Services"}],"return_type":"Nil","visibility":"Public","body":"if user = user_from_message(message, services)\nelse\n  return\nend\nif authorized?(user, message, :Whitelist, services)\nelse\n  return\nend\nif services.config.registration_open\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.fail)\nend\nif (arg = Format.get_arg(message.text)) && (arg = arg.to_i64?)\nelse\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.missing_args)\nend\nif services.database.get_user(arg)\n  return services.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.already_whitelisted)\nend\nupdate_user_activity(user, services)\nservices.database.add_user(arg, \"\", \"WHITELISTED\", services.config.default_rank)\nservices.relay.send_to_user(nil, arg, services.replies.added_to_chat)\nlog = Format.substitute_message(services.logs.whitelisted, {\"id\" => arg.to_s, \"invoker\" => user.formatted_name})\nservices.relay.log_output(log)\nservices.relay.send_to_user(ReplyParameters.new(message.message_id), user.id, services.replies.success)\n"}}]}]},{"html_id":"private-parlor-xt/Tourmaline","path":"Tourmaline.html","kind":"module","full_name":"Tourmaline","name":"Tourmaline","abstract":false,"locations":[{"filename":"lib/tourmaline/src/tourmaline.cr","line_number":17,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline.cr#L17"},{"filename":"lib/tourmaline/src/tourmaline/chat_action.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/chat_action.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/client.cr","line_number":20,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/client.cr#L20"},{"filename":"lib/tourmaline/src/tourmaline/client/api.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/client/api.cr#L5"},{"filename":"lib/tourmaline/src/tourmaline/client/inline_keyboard_markup_builder.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/client/inline_keyboard_markup_builder.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/client/inline_query_result_builder.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/client/inline_query_result_builder.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/client/reply_keyboard_markup_builder.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/client/reply_keyboard_markup_builder.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/context.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/context.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/dispatcher.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/dispatcher.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/error.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/error.cr#L3"},{"filename":"lib/tourmaline/src/tourmaline/event_handler.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/event_handler.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/handlers/callback_query_handler.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/handlers/callback_query_handler.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/handlers/command_handler.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/handlers/command_handler.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/handlers/hears_handler.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/handlers/hears_handler.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/handlers/inline_query_handler.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/handlers/inline_query_handler.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/helpers.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/helpers.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/keyboard_builder.cr","line_number":3,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/keyboard_builder.cr#L3"},{"filename":"lib/tourmaline/src/tourmaline/logger.cr","line_number":6,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/logger.cr#L6"},{"filename":"lib/tourmaline/src/tourmaline/middleware.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/middleware.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/parse_mode.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/parse_mode.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/poller.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/poller.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/server.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/server.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/types/api.cr","line_number":5,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/types/api.cr#L5"},{"filename":"lib/tourmaline/src/tourmaline/types/custom/chat.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/types/custom/chat.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/types/custom/file.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/types/custom/file.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/types/custom/inline_keyboard_markup.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/types/custom/inline_keyboard_markup.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/types/custom/message.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/types/custom/message.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/types/custom/reply_keyboard_markup.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/types/custom/reply_keyboard_markup.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/types/custom/update.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/types/custom/update.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/types/custom/user.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/types/custom/user.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/update_action.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/update_action.cr#L1"},{"filename":"lib/tourmaline/src/tourmaline/version.cr","line_number":1,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/version.cr#L1"},{"filename":"src/private-parlor-xt/client.cr","line_number":22,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/client.cr#L22"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"doc":"Tourmaline is a Telegram Bot API library\nfor [Telegram](https://telegram.com). It provides an easy to\nuse interface for creating telegram bots, and using the\nvarious bot APIs that Telegram provides.\n\nFor usage examples, see the\n[examples](https://github.com/watzon/tourmaline/tree/master/examples)\ndirectory. For guides on using Tourmaline, see the official\nTourmaline [cookbook](https://tourmaline.dev/docs/cookbook/your-first-bot).","summary":"<p>Tourmaline is a Telegram Bot API library for <a href=\"https://telegram.com\">Telegram</a>.</p>","types":[{"html_id":"private-parlor-xt/Tourmaline/Message","path":"Tourmaline/Message.html","kind":"class","full_name":"Tourmaline::Message","name":"Message","abstract":false,"superclass":{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"private-parlor-xt/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"private-parlor-xt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"private-parlor-xt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/tourmaline/src/tourmaline/types/api.cr","line_number":445,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/types/api.cr#L445"},{"filename":"lib/tourmaline/src/tourmaline/types/custom/message.cr","line_number":2,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/lib/tourmaline/src/tourmaline/types/custom/message.cr#L2"},{"filename":"src/private-parlor-xt/client.cr","line_number":23,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/client.cr#L23"}],"repository_name":"private-parlor-xt","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"private-parlor-xt/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"private-parlor-xt/Tourmaline","kind":"module","full_name":"Tourmaline","name":"Tourmaline"},"doc":"This object represents a message.","summary":"<p>This object represents a message.</p>","instance_methods":[{"html_id":"preformatted=(preformatted:Bool|Nil)-instance-method","name":"preformatted=","doc":"Set to `true` if the message is preformatted (in case a command handler alters the message before an update handler gets it)\n\nSet to `false` otherwise","summary":"<p>Set to <code>true</code> if the message is preformatted (in case a command handler alters the message before an update handler gets it)</p>","abstract":false,"args":[{"name":"preformatted","external_name":"preformatted","restriction":"Bool | ::Nil"}],"args_string":"(preformatted : Bool | Nil)","args_html":"(preformatted : Bool | Nil)","location":{"filename":"src/private-parlor-xt/client.cr","line_number":27,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/client.cr#L27"},"def":{"name":"preformatted=","args":[{"name":"preformatted","external_name":"preformatted","restriction":"Bool | ::Nil"}],"visibility":"Public","body":"@preformatted = preformatted"}},{"html_id":"preformatted?:Bool|Nil-instance-method","name":"preformatted?","doc":"Set to `true` if the message is preformatted (in case a command handler alters the message before an update handler gets it)\n\nSet to `false` otherwise","summary":"<p>Set to <code>true</code> if the message is preformatted (in case a command handler alters the message before an update handler gets it)</p>","abstract":false,"location":{"filename":"src/private-parlor-xt/client.cr","line_number":27,"url":"https://github.com/Private-Parlor/Private-Parlor-XT/blob/9f3bd65eb3a07e5179afe800dccecd2c080376b7/src/private-parlor-xt/client.cr#L27"},"def":{"name":"preformatted?","return_type":"Bool | ::Nil","visibility":"Public","body":"@preformatted"}}]}]}]}}